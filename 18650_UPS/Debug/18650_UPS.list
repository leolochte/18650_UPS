
18650_UPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fa8  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002118  080050e8  080050e8  000150e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007200  08007200  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08007200  08007200  00017200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007208  08007208  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007208  08007208  00017208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800720c  0800720c  0001720c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08007210  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000080  08007290  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003bc  08007290  000203bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef7b  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020bb  00000000  00000000  0002f024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  000310e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00031ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199c2  00000000  00000000  00032bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101de  00000000  00000000  0004c5ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b446  00000000  00000000  0005c798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7bde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004024  00000000  00000000  000e7c34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000080 	.word	0x20000080
 800015c:	00000000 	.word	0x00000000
 8000160:	080050d0 	.word	0x080050d0

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000084 	.word	0x20000084
 800017c:	080050d0 	.word	0x080050d0

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_d2uiz>:
 800091c:	004a      	lsls	r2, r1, #1
 800091e:	d211      	bcs.n	8000944 <__aeabi_d2uiz+0x28>
 8000920:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000924:	d211      	bcs.n	800094a <__aeabi_d2uiz+0x2e>
 8000926:	d50d      	bpl.n	8000944 <__aeabi_d2uiz+0x28>
 8000928:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800092c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000930:	d40e      	bmi.n	8000950 <__aeabi_d2uiz+0x34>
 8000932:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800093a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800093e:	fa23 f002 	lsr.w	r0, r3, r2
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800094e:	d102      	bne.n	8000956 <__aeabi_d2uiz+0x3a>
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	4770      	bx	lr
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	4770      	bx	lr

0800095c <__aeabi_frsub>:
 800095c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000960:	e002      	b.n	8000968 <__addsf3>
 8000962:	bf00      	nop

08000964 <__aeabi_fsub>:
 8000964:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000968 <__addsf3>:
 8000968:	0042      	lsls	r2, r0, #1
 800096a:	bf1f      	itttt	ne
 800096c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000970:	ea92 0f03 	teqne	r2, r3
 8000974:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000978:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800097c:	d06a      	beq.n	8000a54 <__addsf3+0xec>
 800097e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000982:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000986:	bfc1      	itttt	gt
 8000988:	18d2      	addgt	r2, r2, r3
 800098a:	4041      	eorgt	r1, r0
 800098c:	4048      	eorgt	r0, r1
 800098e:	4041      	eorgt	r1, r0
 8000990:	bfb8      	it	lt
 8000992:	425b      	neglt	r3, r3
 8000994:	2b19      	cmp	r3, #25
 8000996:	bf88      	it	hi
 8000998:	4770      	bxhi	lr
 800099a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800099e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009a6:	bf18      	it	ne
 80009a8:	4240      	negne	r0, r0
 80009aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009b6:	bf18      	it	ne
 80009b8:	4249      	negne	r1, r1
 80009ba:	ea92 0f03 	teq	r2, r3
 80009be:	d03f      	beq.n	8000a40 <__addsf3+0xd8>
 80009c0:	f1a2 0201 	sub.w	r2, r2, #1
 80009c4:	fa41 fc03 	asr.w	ip, r1, r3
 80009c8:	eb10 000c 	adds.w	r0, r0, ip
 80009cc:	f1c3 0320 	rsb	r3, r3, #32
 80009d0:	fa01 f103 	lsl.w	r1, r1, r3
 80009d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009d8:	d502      	bpl.n	80009e0 <__addsf3+0x78>
 80009da:	4249      	negs	r1, r1
 80009dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009e4:	d313      	bcc.n	8000a0e <__addsf3+0xa6>
 80009e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ea:	d306      	bcc.n	80009fa <__addsf3+0x92>
 80009ec:	0840      	lsrs	r0, r0, #1
 80009ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80009f2:	f102 0201 	add.w	r2, r2, #1
 80009f6:	2afe      	cmp	r2, #254	; 0xfe
 80009f8:	d251      	bcs.n	8000a9e <__addsf3+0x136>
 80009fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a02:	bf08      	it	eq
 8000a04:	f020 0001 	biceq.w	r0, r0, #1
 8000a08:	ea40 0003 	orr.w	r0, r0, r3
 8000a0c:	4770      	bx	lr
 8000a0e:	0049      	lsls	r1, r1, #1
 8000a10:	eb40 0000 	adc.w	r0, r0, r0
 8000a14:	3a01      	subs	r2, #1
 8000a16:	bf28      	it	cs
 8000a18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a1c:	d2ed      	bcs.n	80009fa <__addsf3+0x92>
 8000a1e:	fab0 fc80 	clz	ip, r0
 8000a22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a26:	ebb2 020c 	subs.w	r2, r2, ip
 8000a2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a2e:	bfaa      	itet	ge
 8000a30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a34:	4252      	neglt	r2, r2
 8000a36:	4318      	orrge	r0, r3
 8000a38:	bfbc      	itt	lt
 8000a3a:	40d0      	lsrlt	r0, r2
 8000a3c:	4318      	orrlt	r0, r3
 8000a3e:	4770      	bx	lr
 8000a40:	f092 0f00 	teq	r2, #0
 8000a44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a48:	bf06      	itte	eq
 8000a4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a4e:	3201      	addeq	r2, #1
 8000a50:	3b01      	subne	r3, #1
 8000a52:	e7b5      	b.n	80009c0 <__addsf3+0x58>
 8000a54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a5c:	bf18      	it	ne
 8000a5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a62:	d021      	beq.n	8000aa8 <__addsf3+0x140>
 8000a64:	ea92 0f03 	teq	r2, r3
 8000a68:	d004      	beq.n	8000a74 <__addsf3+0x10c>
 8000a6a:	f092 0f00 	teq	r2, #0
 8000a6e:	bf08      	it	eq
 8000a70:	4608      	moveq	r0, r1
 8000a72:	4770      	bx	lr
 8000a74:	ea90 0f01 	teq	r0, r1
 8000a78:	bf1c      	itt	ne
 8000a7a:	2000      	movne	r0, #0
 8000a7c:	4770      	bxne	lr
 8000a7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a82:	d104      	bne.n	8000a8e <__addsf3+0x126>
 8000a84:	0040      	lsls	r0, r0, #1
 8000a86:	bf28      	it	cs
 8000a88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	4770      	bx	lr
 8000a8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a92:	bf3c      	itt	cc
 8000a94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bxcc	lr
 8000a9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000aa2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa6:	4770      	bx	lr
 8000aa8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aac:	bf16      	itet	ne
 8000aae:	4608      	movne	r0, r1
 8000ab0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ab4:	4601      	movne	r1, r0
 8000ab6:	0242      	lsls	r2, r0, #9
 8000ab8:	bf06      	itte	eq
 8000aba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000abe:	ea90 0f01 	teqeq	r0, r1
 8000ac2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_ui2f>:
 8000ac8:	f04f 0300 	mov.w	r3, #0
 8000acc:	e004      	b.n	8000ad8 <__aeabi_i2f+0x8>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_i2f>:
 8000ad0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ad4:	bf48      	it	mi
 8000ad6:	4240      	negmi	r0, r0
 8000ad8:	ea5f 0c00 	movs.w	ip, r0
 8000adc:	bf08      	it	eq
 8000ade:	4770      	bxeq	lr
 8000ae0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ae4:	4601      	mov	r1, r0
 8000ae6:	f04f 0000 	mov.w	r0, #0
 8000aea:	e01c      	b.n	8000b26 <__aeabi_l2f+0x2a>

08000aec <__aeabi_ul2f>:
 8000aec:	ea50 0201 	orrs.w	r2, r0, r1
 8000af0:	bf08      	it	eq
 8000af2:	4770      	bxeq	lr
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e00a      	b.n	8000b10 <__aeabi_l2f+0x14>
 8000afa:	bf00      	nop

08000afc <__aeabi_l2f>:
 8000afc:	ea50 0201 	orrs.w	r2, r0, r1
 8000b00:	bf08      	it	eq
 8000b02:	4770      	bxeq	lr
 8000b04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b08:	d502      	bpl.n	8000b10 <__aeabi_l2f+0x14>
 8000b0a:	4240      	negs	r0, r0
 8000b0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b10:	ea5f 0c01 	movs.w	ip, r1
 8000b14:	bf02      	ittt	eq
 8000b16:	4684      	moveq	ip, r0
 8000b18:	4601      	moveq	r1, r0
 8000b1a:	2000      	moveq	r0, #0
 8000b1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b20:	bf08      	it	eq
 8000b22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b2a:	fabc f28c 	clz	r2, ip
 8000b2e:	3a08      	subs	r2, #8
 8000b30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b34:	db10      	blt.n	8000b58 <__aeabi_l2f+0x5c>
 8000b36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b40:	f1c2 0220 	rsb	r2, r2, #32
 8000b44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b48:	fa20 f202 	lsr.w	r2, r0, r2
 8000b4c:	eb43 0002 	adc.w	r0, r3, r2
 8000b50:	bf08      	it	eq
 8000b52:	f020 0001 	biceq.w	r0, r0, #1
 8000b56:	4770      	bx	lr
 8000b58:	f102 0220 	add.w	r2, r2, #32
 8000b5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b60:	f1c2 0220 	rsb	r2, r2, #32
 8000b64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b68:	fa21 f202 	lsr.w	r2, r1, r2
 8000b6c:	eb43 0002 	adc.w	r0, r3, r2
 8000b70:	bf08      	it	eq
 8000b72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b96e 	b.w	8000e6c <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9e08      	ldr	r6, [sp, #32]
 8000bae:	460d      	mov	r5, r1
 8000bb0:	4604      	mov	r4, r0
 8000bb2:	468e      	mov	lr, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f040 8083 	bne.w	8000cc0 <__udivmoddi4+0x118>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4617      	mov	r7, r2
 8000bbe:	d947      	bls.n	8000c50 <__udivmoddi4+0xa8>
 8000bc0:	fab2 f382 	clz	r3, r2
 8000bc4:	b14b      	cbz	r3, 8000bda <__udivmoddi4+0x32>
 8000bc6:	f1c3 0120 	rsb	r1, r3, #32
 8000bca:	fa05 fe03 	lsl.w	lr, r5, r3
 8000bce:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd2:	409f      	lsls	r7, r3
 8000bd4:	ea41 0e0e 	orr.w	lr, r1, lr
 8000bd8:	409c      	lsls	r4, r3
 8000bda:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bde:	fbbe fcf8 	udiv	ip, lr, r8
 8000be2:	fa1f f987 	uxth.w	r9, r7
 8000be6:	fb08 e21c 	mls	r2, r8, ip, lr
 8000bea:	fb0c f009 	mul.w	r0, ip, r9
 8000bee:	0c21      	lsrs	r1, r4, #16
 8000bf0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000bf4:	4290      	cmp	r0, r2
 8000bf6:	d90a      	bls.n	8000c0e <__udivmoddi4+0x66>
 8000bf8:	18ba      	adds	r2, r7, r2
 8000bfa:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000bfe:	f080 8118 	bcs.w	8000e32 <__udivmoddi4+0x28a>
 8000c02:	4290      	cmp	r0, r2
 8000c04:	f240 8115 	bls.w	8000e32 <__udivmoddi4+0x28a>
 8000c08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c0c:	443a      	add	r2, r7
 8000c0e:	1a12      	subs	r2, r2, r0
 8000c10:	fbb2 f0f8 	udiv	r0, r2, r8
 8000c14:	fb08 2210 	mls	r2, r8, r0, r2
 8000c18:	fb00 f109 	mul.w	r1, r0, r9
 8000c1c:	b2a4      	uxth	r4, r4
 8000c1e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c22:	42a1      	cmp	r1, r4
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x92>
 8000c26:	193c      	adds	r4, r7, r4
 8000c28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2c:	f080 8103 	bcs.w	8000e36 <__udivmoddi4+0x28e>
 8000c30:	42a1      	cmp	r1, r4
 8000c32:	f240 8100 	bls.w	8000e36 <__udivmoddi4+0x28e>
 8000c36:	3802      	subs	r0, #2
 8000c38:	443c      	add	r4, r7
 8000c3a:	1a64      	subs	r4, r4, r1
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c42:	b11e      	cbz	r6, 8000c4c <__udivmoddi4+0xa4>
 8000c44:	2200      	movs	r2, #0
 8000c46:	40dc      	lsrs	r4, r3
 8000c48:	e9c6 4200 	strd	r4, r2, [r6]
 8000c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c50:	b902      	cbnz	r2, 8000c54 <__udivmoddi4+0xac>
 8000c52:	deff      	udf	#255	; 0xff
 8000c54:	fab2 f382 	clz	r3, r2
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d14f      	bne.n	8000cfc <__udivmoddi4+0x154>
 8000c5c:	1a8d      	subs	r5, r1, r2
 8000c5e:	2101      	movs	r1, #1
 8000c60:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000c64:	fa1f f882 	uxth.w	r8, r2
 8000c68:	fbb5 fcfe 	udiv	ip, r5, lr
 8000c6c:	fb0e 551c 	mls	r5, lr, ip, r5
 8000c70:	fb08 f00c 	mul.w	r0, r8, ip
 8000c74:	0c22      	lsrs	r2, r4, #16
 8000c76:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000c7a:	42a8      	cmp	r0, r5
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0xe6>
 8000c7e:	197d      	adds	r5, r7, r5
 8000c80:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000c84:	d202      	bcs.n	8000c8c <__udivmoddi4+0xe4>
 8000c86:	42a8      	cmp	r0, r5
 8000c88:	f200 80e9 	bhi.w	8000e5e <__udivmoddi4+0x2b6>
 8000c8c:	4694      	mov	ip, r2
 8000c8e:	1a2d      	subs	r5, r5, r0
 8000c90:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c94:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c98:	fb08 f800 	mul.w	r8, r8, r0
 8000c9c:	b2a4      	uxth	r4, r4
 8000c9e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca2:	45a0      	cmp	r8, r4
 8000ca4:	d907      	bls.n	8000cb6 <__udivmoddi4+0x10e>
 8000ca6:	193c      	adds	r4, r7, r4
 8000ca8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cac:	d202      	bcs.n	8000cb4 <__udivmoddi4+0x10c>
 8000cae:	45a0      	cmp	r8, r4
 8000cb0:	f200 80d9 	bhi.w	8000e66 <__udivmoddi4+0x2be>
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	eba4 0408 	sub.w	r4, r4, r8
 8000cba:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cbe:	e7c0      	b.n	8000c42 <__udivmoddi4+0x9a>
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x12e>
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	f000 80b1 	beq.w	8000e2c <__udivmoddi4+0x284>
 8000cca:	2100      	movs	r1, #0
 8000ccc:	e9c6 0500 	strd	r0, r5, [r6]
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f183 	clz	r1, r3
 8000cda:	2900      	cmp	r1, #0
 8000cdc:	d14b      	bne.n	8000d76 <__udivmoddi4+0x1ce>
 8000cde:	42ab      	cmp	r3, r5
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0x140>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80b9 	bhi.w	8000e5a <__udivmoddi4+0x2b2>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb65 0303 	sbc.w	r3, r5, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	469e      	mov	lr, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0aa      	beq.n	8000c4c <__udivmoddi4+0xa4>
 8000cf6:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cfa:	e7a7      	b.n	8000c4c <__udivmoddi4+0xa4>
 8000cfc:	409f      	lsls	r7, r3
 8000cfe:	f1c3 0220 	rsb	r2, r3, #32
 8000d02:	40d1      	lsrs	r1, r2
 8000d04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d08:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d14:	fa24 f202 	lsr.w	r2, r4, r2
 8000d18:	409d      	lsls	r5, r3
 8000d1a:	fb00 fc08 	mul.w	ip, r0, r8
 8000d1e:	432a      	orrs	r2, r5
 8000d20:	0c15      	lsrs	r5, r2, #16
 8000d22:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000d26:	45ac      	cmp	ip, r5
 8000d28:	fa04 f403 	lsl.w	r4, r4, r3
 8000d2c:	d909      	bls.n	8000d42 <__udivmoddi4+0x19a>
 8000d2e:	197d      	adds	r5, r7, r5
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	f080 808f 	bcs.w	8000e56 <__udivmoddi4+0x2ae>
 8000d38:	45ac      	cmp	ip, r5
 8000d3a:	f240 808c 	bls.w	8000e56 <__udivmoddi4+0x2ae>
 8000d3e:	3802      	subs	r0, #2
 8000d40:	443d      	add	r5, r7
 8000d42:	eba5 050c 	sub.w	r5, r5, ip
 8000d46:	fbb5 f1fe 	udiv	r1, r5, lr
 8000d4a:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000d4e:	fb01 f908 	mul.w	r9, r1, r8
 8000d52:	b295      	uxth	r5, r2
 8000d54:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d58:	45a9      	cmp	r9, r5
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x1c4>
 8000d5c:	197d      	adds	r5, r7, r5
 8000d5e:	f101 32ff 	add.w	r2, r1, #4294967295
 8000d62:	d274      	bcs.n	8000e4e <__udivmoddi4+0x2a6>
 8000d64:	45a9      	cmp	r9, r5
 8000d66:	d972      	bls.n	8000e4e <__udivmoddi4+0x2a6>
 8000d68:	3902      	subs	r1, #2
 8000d6a:	443d      	add	r5, r7
 8000d6c:	eba5 0509 	sub.w	r5, r5, r9
 8000d70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d74:	e778      	b.n	8000c68 <__udivmoddi4+0xc0>
 8000d76:	f1c1 0720 	rsb	r7, r1, #32
 8000d7a:	408b      	lsls	r3, r1
 8000d7c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d80:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d84:	fa25 f407 	lsr.w	r4, r5, r7
 8000d88:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d8c:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d90:	fa1f f88c 	uxth.w	r8, ip
 8000d94:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d98:	fa20 f307 	lsr.w	r3, r0, r7
 8000d9c:	fb09 fa08 	mul.w	sl, r9, r8
 8000da0:	408d      	lsls	r5, r1
 8000da2:	431d      	orrs	r5, r3
 8000da4:	0c2b      	lsrs	r3, r5, #16
 8000da6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	fa02 f201 	lsl.w	r2, r2, r1
 8000db0:	fa00 f301 	lsl.w	r3, r0, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0x222>
 8000db6:	eb1c 0404 	adds.w	r4, ip, r4
 8000dba:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dbe:	d248      	bcs.n	8000e52 <__udivmoddi4+0x2aa>
 8000dc0:	45a2      	cmp	sl, r4
 8000dc2:	d946      	bls.n	8000e52 <__udivmoddi4+0x2aa>
 8000dc4:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc8:	4464      	add	r4, ip
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	fbb4 f0fe 	udiv	r0, r4, lr
 8000dd2:	fb0e 4410 	mls	r4, lr, r0, r4
 8000dd6:	fb00 fa08 	mul.w	sl, r0, r8
 8000dda:	b2ad      	uxth	r5, r5
 8000ddc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de0:	45a2      	cmp	sl, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x24e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dec:	d22d      	bcs.n	8000e4a <__udivmoddi4+0x2a2>
 8000dee:	45a2      	cmp	sl, r4
 8000df0:	d92b      	bls.n	8000e4a <__udivmoddi4+0x2a2>
 8000df2:	3802      	subs	r0, #2
 8000df4:	4464      	add	r4, ip
 8000df6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfe:	eba4 040a 	sub.w	r4, r4, sl
 8000e02:	454c      	cmp	r4, r9
 8000e04:	46c6      	mov	lr, r8
 8000e06:	464d      	mov	r5, r9
 8000e08:	d319      	bcc.n	8000e3e <__udivmoddi4+0x296>
 8000e0a:	d016      	beq.n	8000e3a <__udivmoddi4+0x292>
 8000e0c:	b15e      	cbz	r6, 8000e26 <__udivmoddi4+0x27e>
 8000e0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e12:	eb64 0405 	sbc.w	r4, r4, r5
 8000e16:	fa04 f707 	lsl.w	r7, r4, r7
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431f      	orrs	r7, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c6 7400 	strd	r7, r4, [r6]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	4630      	mov	r0, r6
 8000e30:	e70c      	b.n	8000c4c <__udivmoddi4+0xa4>
 8000e32:	468c      	mov	ip, r1
 8000e34:	e6eb      	b.n	8000c0e <__udivmoddi4+0x66>
 8000e36:	4610      	mov	r0, r2
 8000e38:	e6ff      	b.n	8000c3a <__udivmoddi4+0x92>
 8000e3a:	4543      	cmp	r3, r8
 8000e3c:	d2e6      	bcs.n	8000e0c <__udivmoddi4+0x264>
 8000e3e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e42:	eb69 050c 	sbc.w	r5, r9, ip
 8000e46:	3801      	subs	r0, #1
 8000e48:	e7e0      	b.n	8000e0c <__udivmoddi4+0x264>
 8000e4a:	4628      	mov	r0, r5
 8000e4c:	e7d3      	b.n	8000df6 <__udivmoddi4+0x24e>
 8000e4e:	4611      	mov	r1, r2
 8000e50:	e78c      	b.n	8000d6c <__udivmoddi4+0x1c4>
 8000e52:	4681      	mov	r9, r0
 8000e54:	e7b9      	b.n	8000dca <__udivmoddi4+0x222>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e773      	b.n	8000d42 <__udivmoddi4+0x19a>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e749      	b.n	8000cf2 <__udivmoddi4+0x14a>
 8000e5e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e62:	443d      	add	r5, r7
 8000e64:	e713      	b.n	8000c8e <__udivmoddi4+0xe6>
 8000e66:	3802      	subs	r0, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	e724      	b.n	8000cb6 <__udivmoddi4+0x10e>

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e76:	f000 ff04 	bl	8001c82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7a:	f000 f929 	bl	80010d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7e:	f000 fa11 	bl	80012a4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e82:	f000 f9e5 	bl	8001250 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000e86:	f000 f969 	bl	800115c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000e8a:	f000 f995 	bl	80011b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000e8e:	f000 fb6b 	bl	8001568 <ssd1306_Init>

  //resetting ina237
  TxBuffer[0] = 0x80;
 8000e92:	4b83      	ldr	r3, [pc, #524]	; (80010a0 <main+0x230>)
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	701a      	strb	r2, [r3, #0]
  TxBuffer[1] = 0x00;
 8000e98:	4b81      	ldr	r3, [pc, #516]	; (80010a0 <main+0x230>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Mem_Write(&hi2c1, 0x45<<1, 0x00, 1, TxBuffer, sizeof(TxBuffer), 1000);
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	9302      	str	r3, [sp, #8]
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	4b7d      	ldr	r3, [pc, #500]	; (80010a0 <main+0x230>)
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	2301      	movs	r3, #1
 8000eae:	2200      	movs	r2, #0
 8000eb0:	218a      	movs	r1, #138	; 0x8a
 8000eb2:	487c      	ldr	r0, [pc, #496]	; (80010a4 <main+0x234>)
 8000eb4:	f001 fb78 	bl	80025a8 <HAL_I2C_Mem_Write>

  //setting adc range
  TxBuffer[0] = 0x00;
 8000eb8:	4b79      	ldr	r3, [pc, #484]	; (80010a0 <main+0x230>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
  TxBuffer[1] = 0x10;
 8000ebe:	4b78      	ldr	r3, [pc, #480]	; (80010a0 <main+0x230>)
 8000ec0:	2210      	movs	r2, #16
 8000ec2:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Mem_Write(&hi2c1, 0x45<<1, 0x00, 1, TxBuffer, sizeof(TxBuffer), 1000);
 8000ec4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec8:	9302      	str	r3, [sp, #8]
 8000eca:	2302      	movs	r3, #2
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	4b74      	ldr	r3, [pc, #464]	; (80010a0 <main+0x230>)
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	218a      	movs	r1, #138	; 0x8a
 8000ed8:	4872      	ldr	r0, [pc, #456]	; (80010a4 <main+0x234>)
 8000eda:	f001 fb65 	bl	80025a8 <HAL_I2C_Mem_Write>

  //calibrating shunt register
  TxBuffer[0] = 0x07;
 8000ede:	4b70      	ldr	r3, [pc, #448]	; (80010a0 <main+0x230>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	701a      	strb	r2, [r3, #0]
  TxBuffer[1] = 0xD0;
 8000ee4:	4b6e      	ldr	r3, [pc, #440]	; (80010a0 <main+0x230>)
 8000ee6:	22d0      	movs	r2, #208	; 0xd0
 8000ee8:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Mem_Write(&hi2c1, 0x45<<1, 0x02, 1, TxBuffer, sizeof(TxBuffer), 1000);
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	9302      	str	r3, [sp, #8]
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	4b6a      	ldr	r3, [pc, #424]	; (80010a0 <main+0x230>)
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	2202      	movs	r2, #2
 8000efc:	218a      	movs	r1, #138	; 0x8a
 8000efe:	4869      	ldr	r0, [pc, #420]	; (80010a4 <main+0x234>)
 8000f00:	f001 fb52 	bl	80025a8 <HAL_I2C_Mem_Write>

  //read adc_config
  HAL_I2C_Mem_Read(&hi2c1, 0x45<<1, 0x01, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 8000f04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f08:	9302      	str	r3, [sp, #8]
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	4b66      	ldr	r3, [pc, #408]	; (80010a8 <main+0x238>)
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2301      	movs	r3, #1
 8000f14:	2201      	movs	r2, #1
 8000f16:	218a      	movs	r1, #138	; 0x8a
 8000f18:	4862      	ldr	r0, [pc, #392]	; (80010a4 <main+0x234>)
 8000f1a:	f001 fc3f 	bl	800279c <HAL_I2C_Mem_Read>
  temp = (aRxBuffer[0]<<8) | aRxBuffer[1];
 8000f1e:	4b62      	ldr	r3, [pc, #392]	; (80010a8 <main+0x238>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	021b      	lsls	r3, r3, #8
 8000f24:	b21a      	sxth	r2, r3
 8000f26:	4b60      	ldr	r3, [pc, #384]	; (80010a8 <main+0x238>)
 8000f28:	785b      	ldrb	r3, [r3, #1]
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4b5e      	ldr	r3, [pc, #376]	; (80010ac <main+0x23c>)
 8000f34:	801a      	strh	r2, [r3, #0]
  TxBuffer[0] = aRxBuffer[0];
 8000f36:	4b5c      	ldr	r3, [pc, #368]	; (80010a8 <main+0x238>)
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	4b59      	ldr	r3, [pc, #356]	; (80010a0 <main+0x230>)
 8000f3c:	701a      	strb	r2, [r3, #0]
  TxBuffer[1] = aRxBuffer[1] | 0x03;
 8000f3e:	4b5a      	ldr	r3, [pc, #360]	; (80010a8 <main+0x238>)
 8000f40:	785b      	ldrb	r3, [r3, #1]
 8000f42:	f043 0303 	orr.w	r3, r3, #3
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b55      	ldr	r3, [pc, #340]	; (80010a0 <main+0x230>)
 8000f4a:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Mem_Write(&hi2c1, 0x45<<1, 0x01, 1, TxBuffer, sizeof(TxBuffer), 1000);
 8000f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f50:	9302      	str	r3, [sp, #8]
 8000f52:	2302      	movs	r3, #2
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	4b52      	ldr	r3, [pc, #328]	; (80010a0 <main+0x230>)
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	218a      	movs	r1, #138	; 0x8a
 8000f60:	4850      	ldr	r0, [pc, #320]	; (80010a4 <main+0x234>)
 8000f62:	f001 fb21 	bl	80025a8 <HAL_I2C_Mem_Write>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  switch (read_state) {
 8000f66:	4b52      	ldr	r3, [pc, #328]	; (80010b0 <main+0x240>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d06c      	beq.n	800104a <main+0x1da>
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	dc66      	bgt.n	8001042 <main+0x1d2>
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d002      	beq.n	8000f7e <main+0x10e>
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d031      	beq.n	8000fe0 <main+0x170>
 8000f7c:	e061      	b.n	8001042 <main+0x1d2>
	  	  case 0:
			  //current
			  HAL_I2C_Mem_Read(&hi2c1, 0x45<<1, 0x07, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	9302      	str	r3, [sp, #8]
 8000f84:	2302      	movs	r3, #2
 8000f86:	9301      	str	r3, [sp, #4]
 8000f88:	4b47      	ldr	r3, [pc, #284]	; (80010a8 <main+0x238>)
 8000f8a:	9300      	str	r3, [sp, #0]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	2207      	movs	r2, #7
 8000f90:	218a      	movs	r1, #138	; 0x8a
 8000f92:	4844      	ldr	r0, [pc, #272]	; (80010a4 <main+0x234>)
 8000f94:	f001 fc02 	bl	800279c <HAL_I2C_Mem_Read>
			  temp = 0.0610352*(float)((aRxBuffer[0]<<8) | aRxBuffer[1]);
 8000f98:	4b43      	ldr	r3, [pc, #268]	; (80010a8 <main+0x238>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	4a42      	ldr	r2, [pc, #264]	; (80010a8 <main+0x238>)
 8000fa0:	7852      	ldrb	r2, [r2, #1]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fd93 	bl	8000ad0 <__aeabi_i2f>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fa4b 	bl	8000448 <__aeabi_f2d>
 8000fb2:	a339      	add	r3, pc, #228	; (adr r3, 8001098 <main+0x228>)
 8000fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb8:	f7ff fa9e 	bl	80004f8 <__aeabi_dmul>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	4610      	mov	r0, r2
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f7ff fcaa 	bl	800091c <__aeabi_d2uiz>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	b29a      	uxth	r2, r3
 8000fcc:	4b37      	ldr	r3, [pc, #220]	; (80010ac <main+0x23c>)
 8000fce:	801a      	strh	r2, [r3, #0]
			  sprintf(charBuffer, "%u mA\r\n", temp);
 8000fd0:	4b36      	ldr	r3, [pc, #216]	; (80010ac <main+0x23c>)
 8000fd2:	881b      	ldrh	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4937      	ldr	r1, [pc, #220]	; (80010b4 <main+0x244>)
 8000fd8:	4837      	ldr	r0, [pc, #220]	; (80010b8 <main+0x248>)
 8000fda:	f003 fc67 	bl	80048ac <siprintf>
	  		  break;
 8000fde:	e035      	b.n	800104c <main+0x1dc>
	  	  case 1:
			  //vshunt
			  HAL_I2C_Mem_Read(&hi2c1, 0x45<<1, 0x04, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 8000fe0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe4:	9302      	str	r3, [sp, #8]
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	4b2f      	ldr	r3, [pc, #188]	; (80010a8 <main+0x238>)
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2301      	movs	r3, #1
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	218a      	movs	r1, #138	; 0x8a
 8000ff4:	482b      	ldr	r0, [pc, #172]	; (80010a4 <main+0x234>)
 8000ff6:	f001 fbd1 	bl	800279c <HAL_I2C_Mem_Read>
			  temp = 1.25*(float)((aRxBuffer[0]<<8) | aRxBuffer[1]);
 8000ffa:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <main+0x238>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	021b      	lsls	r3, r3, #8
 8001000:	4a29      	ldr	r2, [pc, #164]	; (80010a8 <main+0x238>)
 8001002:	7852      	ldrb	r2, [r2, #1]
 8001004:	4313      	orrs	r3, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fd62 	bl	8000ad0 <__aeabi_i2f>
 800100c:	4603      	mov	r3, r0
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fa1a 	bl	8000448 <__aeabi_f2d>
 8001014:	f04f 0200 	mov.w	r2, #0
 8001018:	4b28      	ldr	r3, [pc, #160]	; (80010bc <main+0x24c>)
 800101a:	f7ff fa6d 	bl	80004f8 <__aeabi_dmul>
 800101e:	4602      	mov	r2, r0
 8001020:	460b      	mov	r3, r1
 8001022:	4610      	mov	r0, r2
 8001024:	4619      	mov	r1, r3
 8001026:	f7ff fc79 	bl	800091c <__aeabi_d2uiz>
 800102a:	4603      	mov	r3, r0
 800102c:	b29a      	uxth	r2, r3
 800102e:	4b1f      	ldr	r3, [pc, #124]	; (80010ac <main+0x23c>)
 8001030:	801a      	strh	r2, [r3, #0]
			  sprintf(charBuffer, "%u uV\r\n", temp);
 8001032:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <main+0x23c>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	461a      	mov	r2, r3
 8001038:	4921      	ldr	r1, [pc, #132]	; (80010c0 <main+0x250>)
 800103a:	481f      	ldr	r0, [pc, #124]	; (80010b8 <main+0x248>)
 800103c:	f003 fc36 	bl	80048ac <siprintf>
	  		  break;
 8001040:	e004      	b.n	800104c <main+0x1dc>
	  	  case 2:
	  		  break;
	  	  default:
		  	  read_state = 0;
 8001042:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <main+0x240>)
 8001044:	2200      	movs	r2, #0
 8001046:	701a      	strb	r2, [r3, #0]
		  	  break;
 8001048:	e000      	b.n	800104c <main+0x1dc>
	  		  break;
 800104a:	bf00      	nop
	  }



	  ssd1306_Fill(Black);
 800104c:	2000      	movs	r0, #0
 800104e:	f000 faf5 	bl	800163c <ssd1306_Fill>
	  ssd1306_SetCursor(0, 0);
 8001052:	2100      	movs	r1, #0
 8001054:	2000      	movs	r0, #0
 8001056:	f000 fc49 	bl	80018ec <ssd1306_SetCursor>
	  ssd1306_WriteString(&charBuffer, Font_16x26, White);
 800105a:	4a1a      	ldr	r2, [pc, #104]	; (80010c4 <main+0x254>)
 800105c:	2301      	movs	r3, #1
 800105e:	ca06      	ldmia	r2, {r1, r2}
 8001060:	4815      	ldr	r0, [pc, #84]	; (80010b8 <main+0x248>)
 8001062:	f000 fc1d 	bl	80018a0 <ssd1306_WriteString>
	  //ssd1306_UpdateScreen();

	  sprintf(charBuffer,"%u\r\n", read_state);
 8001066:	4b12      	ldr	r3, [pc, #72]	; (80010b0 <main+0x240>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b2db      	uxtb	r3, r3
 800106c:	461a      	mov	r2, r3
 800106e:	4916      	ldr	r1, [pc, #88]	; (80010c8 <main+0x258>)
 8001070:	4811      	ldr	r0, [pc, #68]	; (80010b8 <main+0x248>)
 8001072:	f003 fc1b 	bl	80048ac <siprintf>

	  //ssd1306_Fill(Black);
	  ssd1306_SetCursor(96, 0);
 8001076:	2100      	movs	r1, #0
 8001078:	2060      	movs	r0, #96	; 0x60
 800107a:	f000 fc37 	bl	80018ec <ssd1306_SetCursor>
	  ssd1306_WriteString(&charBuffer, Font_11x18, White);
 800107e:	4a13      	ldr	r2, [pc, #76]	; (80010cc <main+0x25c>)
 8001080:	2301      	movs	r3, #1
 8001082:	ca06      	ldmia	r2, {r1, r2}
 8001084:	480c      	ldr	r0, [pc, #48]	; (80010b8 <main+0x248>)
 8001086:	f000 fc0b 	bl	80018a0 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 800108a:	f000 faf9 	bl	8001680 <ssd1306_UpdateScreen>

	  HAL_Delay(100);
 800108e:	2064      	movs	r0, #100	; 0x64
 8001090:	f000 fe66 	bl	8001d60 <HAL_Delay>
	  switch (read_state) {
 8001094:	e767      	b.n	8000f66 <main+0xf6>
 8001096:	bf00      	nop
 8001098:	77cf4476 	.word	0x77cf4476
 800109c:	3faf4001 	.word	0x3faf4001
 80010a0:	20000360 	.word	0x20000360
 80010a4:	200002b8 	.word	0x200002b8
 80010a8:	20000364 	.word	0x20000364
 80010ac:	2000030c 	.word	0x2000030c
 80010b0:	2000009c 	.word	0x2000009c
 80010b4:	080050e8 	.word	0x080050e8
 80010b8:	20000354 	.word	0x20000354
 80010bc:	3ff40000 	.word	0x3ff40000
 80010c0:	080050f0 	.word	0x080050f0
 80010c4:	20000008 	.word	0x20000008
 80010c8:	080050f8 	.word	0x080050f8
 80010cc:	20000000 	.word	0x20000000

080010d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b092      	sub	sp, #72	; 0x48
 80010d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	2234      	movs	r2, #52	; 0x34
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f003 fbdc 	bl	800489c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010e4:	463b      	mov	r3, r7
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	605a      	str	r2, [r3, #4]
 80010ec:	609a      	str	r2, [r3, #8]
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f2:	4b19      	ldr	r3, [pc, #100]	; (8001158 <SystemClock_Config+0x88>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80010fa:	4a17      	ldr	r2, [pc, #92]	; (8001158 <SystemClock_Config+0x88>)
 80010fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001100:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001102:	2302      	movs	r3, #2
 8001104:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001106:	2301      	movs	r3, #1
 8001108:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800110a:	2310      	movs	r3, #16
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800110e:	2300      	movs	r3, #0
 8001110:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4618      	mov	r0, r3
 8001118:	f002 f8c0 	bl	800329c <HAL_RCC_OscConfig>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <SystemClock_Config+0x56>
  {
    Error_Handler();
 8001122:	f000 f9e3 	bl	80014ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001126:	230f      	movs	r3, #15
 8001128:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800112a:	2301      	movs	r3, #1
 800112c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001136:	2300      	movs	r3, #0
 8001138:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800113a:	463b      	mov	r3, r7
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f002 fbdc 	bl	80038fc <HAL_RCC_ClockConfig>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800114a:	f000 f9cf 	bl	80014ec <Error_Handler>
  }
}
 800114e:	bf00      	nop
 8001150:	3748      	adds	r7, #72	; 0x48
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40007000 	.word	0x40007000

0800115c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_I2C1_Init+0x50>)
 8001162:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <MX_I2C1_Init+0x54>)
 8001164:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_I2C1_Init+0x50>)
 8001168:	4a12      	ldr	r2, [pc, #72]	; (80011b4 <MX_I2C1_Init+0x58>)
 800116a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_I2C1_Init+0x50>)
 800116e:	2200      	movs	r2, #0
 8001170:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_I2C1_Init+0x50>)
 8001174:	2200      	movs	r2, #0
 8001176:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_I2C1_Init+0x50>)
 800117a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800117e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001180:	4b0a      	ldr	r3, [pc, #40]	; (80011ac <MX_I2C1_Init+0x50>)
 8001182:	2200      	movs	r2, #0
 8001184:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001186:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_I2C1_Init+0x50>)
 8001188:	2200      	movs	r2, #0
 800118a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800118c:	4b07      	ldr	r3, [pc, #28]	; (80011ac <MX_I2C1_Init+0x50>)
 800118e:	2200      	movs	r2, #0
 8001190:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_I2C1_Init+0x50>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001198:	4804      	ldr	r0, [pc, #16]	; (80011ac <MX_I2C1_Init+0x50>)
 800119a:	f001 f8c1 	bl	8002320 <HAL_I2C_Init>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011a4:	f000 f9a2 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011a8:	bf00      	nop
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200002b8 	.word	0x200002b8
 80011b0:	40005400 	.word	0x40005400
 80011b4:	000186a0 	.word	0x000186a0

080011b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011be:	f107 0308 	add.w	r3, r7, #8
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	463b      	mov	r3, r7
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011d4:	4b1d      	ldr	r3, [pc, #116]	; (800124c <MX_TIM2_Init+0x94>)
 80011d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000;
 80011dc:	4b1b      	ldr	r3, [pc, #108]	; (800124c <MX_TIM2_Init+0x94>)
 80011de:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80011e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <MX_TIM2_Init+0x94>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <MX_TIM2_Init+0x94>)
 80011ec:	2232      	movs	r2, #50	; 0x32
 80011ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011f0:	4b16      	ldr	r3, [pc, #88]	; (800124c <MX_TIM2_Init+0x94>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f6:	4b15      	ldr	r3, [pc, #84]	; (800124c <MX_TIM2_Init+0x94>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011fc:	4813      	ldr	r0, [pc, #76]	; (800124c <MX_TIM2_Init+0x94>)
 80011fe:	f002 fde9 	bl	8003dd4 <HAL_TIM_Base_Init>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001208:	f000 f970 	bl	80014ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800120c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001210:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	4619      	mov	r1, r3
 8001218:	480c      	ldr	r0, [pc, #48]	; (800124c <MX_TIM2_Init+0x94>)
 800121a:	f002 ff6f 	bl	80040fc <HAL_TIM_ConfigClockSource>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001224:	f000 f962 	bl	80014ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001228:	2300      	movs	r3, #0
 800122a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001230:	463b      	mov	r3, r7
 8001232:	4619      	mov	r1, r3
 8001234:	4805      	ldr	r0, [pc, #20]	; (800124c <MX_TIM2_Init+0x94>)
 8001236:	f003 f94f 	bl	80044d8 <HAL_TIMEx_MasterConfigSynchronization>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001240:	f000 f954 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001244:	bf00      	nop
 8001246:	3718      	adds	r7, #24
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000368 	.word	0x20000368

08001250 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001254:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001256:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <MX_USART1_UART_Init+0x50>)
 8001258:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <MX_USART1_UART_Init+0x4c>)
 800125c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001260:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_USART1_UART_Init+0x4c>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001276:	220c      	movs	r2, #12
 8001278:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MX_USART1_UART_Init+0x4c>)
 800127c:	2200      	movs	r2, #0
 800127e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001282:	2200      	movs	r2, #0
 8001284:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_USART1_UART_Init+0x4c>)
 8001288:	f003 f984 	bl	8004594 <HAL_UART_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001292:	f000 f92b 	bl	80014ec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000310 	.word	0x20000310
 80012a0:	40013800 	.word	0x40013800

080012a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	4b19      	ldr	r3, [pc, #100]	; (8001320 <MX_GPIO_Init+0x7c>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	4a18      	ldr	r2, [pc, #96]	; (8001320 <MX_GPIO_Init+0x7c>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	61d3      	str	r3, [r2, #28]
 80012c6:	4b16      	ldr	r3, [pc, #88]	; (8001320 <MX_GPIO_Init+0x7c>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b13      	ldr	r3, [pc, #76]	; (8001320 <MX_GPIO_Init+0x7c>)
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	4a12      	ldr	r2, [pc, #72]	; (8001320 <MX_GPIO_Init+0x7c>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	61d3      	str	r3, [r2, #28]
 80012de:	4b10      	ldr	r3, [pc, #64]	; (8001320 <MX_GPIO_Init+0x7c>)
 80012e0:	69db      	ldr	r3, [r3, #28]
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : SW_R_Pin SW_D_Pin SW_L_Pin SW_U_Pin */
  GPIO_InitStruct.Pin = SW_R_Pin|SW_D_Pin|SW_L_Pin|SW_U_Pin;
 80012ea:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80012ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012f0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012f6:	2301      	movs	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fa:	f107 030c 	add.w	r3, r7, #12
 80012fe:	4619      	mov	r1, r3
 8001300:	4808      	ldr	r0, [pc, #32]	; (8001324 <MX_GPIO_Init+0x80>)
 8001302:	f000 fe5d 	bl	8001fc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2100      	movs	r1, #0
 800130a:	2028      	movs	r0, #40	; 0x28
 800130c:	f000 fe21 	bl	8001f52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001310:	2028      	movs	r0, #40	; 0x28
 8001312:	f000 fe3a 	bl	8001f8a <HAL_NVIC_EnableIRQ>

}
 8001316:	bf00      	nop
 8001318:	3720      	adds	r7, #32
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800
 8001324:	40020400 	.word	0x40020400

08001328 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001338:	d00f      	beq.n	800135a <HAL_GPIO_EXTI_Callback+0x32>
 800133a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800133e:	dc44      	bgt.n	80013ca <HAL_GPIO_EXTI_Callback+0xa2>
 8001340:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001344:	d025      	beq.n	8001392 <HAL_GPIO_EXTI_Callback+0x6a>
 8001346:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800134a:	dc3e      	bgt.n	80013ca <HAL_GPIO_EXTI_Callback+0xa2>
 800134c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001350:	d02d      	beq.n	80013ae <HAL_GPIO_EXTI_Callback+0x86>
 8001352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001356:	d00e      	beq.n	8001376 <HAL_GPIO_EXTI_Callback+0x4e>
				default:
					break;
			}
			break;
		default:
			break;
 8001358:	e037      	b.n	80013ca <HAL_GPIO_EXTI_Callback+0xa2>
			switch (state_SW_U) {
 800135a:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <HAL_GPIO_EXTI_Callback+0xac>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_GPIO_EXTI_Callback+0x3e>
 8001362:	2b01      	cmp	r3, #1
					break;
 8001364:	e006      	b.n	8001374 <HAL_GPIO_EXTI_Callback+0x4c>
					state_SW_U = 1;
 8001366:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <HAL_GPIO_EXTI_Callback+0xac>)
 8001368:	2201      	movs	r2, #1
 800136a:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim2);
 800136c:	481a      	ldr	r0, [pc, #104]	; (80013d8 <HAL_GPIO_EXTI_Callback+0xb0>)
 800136e:	f002 fd71 	bl	8003e54 <HAL_TIM_Base_Start_IT>
					break;
 8001372:	bf00      	nop
			break;
 8001374:	e02a      	b.n	80013cc <HAL_GPIO_EXTI_Callback+0xa4>
			switch (state_SW_D) {
 8001376:	4b19      	ldr	r3, [pc, #100]	; (80013dc <HAL_GPIO_EXTI_Callback+0xb4>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <HAL_GPIO_EXTI_Callback+0x5a>
 800137e:	2b01      	cmp	r3, #1
					break;
 8001380:	e006      	b.n	8001390 <HAL_GPIO_EXTI_Callback+0x68>
					state_SW_D = 1;
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <HAL_GPIO_EXTI_Callback+0xb4>)
 8001384:	2201      	movs	r2, #1
 8001386:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim2);
 8001388:	4813      	ldr	r0, [pc, #76]	; (80013d8 <HAL_GPIO_EXTI_Callback+0xb0>)
 800138a:	f002 fd63 	bl	8003e54 <HAL_TIM_Base_Start_IT>
					break;
 800138e:	bf00      	nop
			break;
 8001390:	e01c      	b.n	80013cc <HAL_GPIO_EXTI_Callback+0xa4>
			switch (state_SW_L) {
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_GPIO_EXTI_Callback+0x76>
 800139a:	2b01      	cmp	r3, #1
					break;
 800139c:	e006      	b.n	80013ac <HAL_GPIO_EXTI_Callback+0x84>
					state_SW_L = 1;
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <HAL_GPIO_EXTI_Callback+0xb8>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim2);
 80013a4:	480c      	ldr	r0, [pc, #48]	; (80013d8 <HAL_GPIO_EXTI_Callback+0xb0>)
 80013a6:	f002 fd55 	bl	8003e54 <HAL_TIM_Base_Start_IT>
					break;
 80013aa:	bf00      	nop
			break;
 80013ac:	e00e      	b.n	80013cc <HAL_GPIO_EXTI_Callback+0xa4>
			switch (state_SW_R) {
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_GPIO_EXTI_Callback+0xbc>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <HAL_GPIO_EXTI_Callback+0x92>
 80013b6:	2b01      	cmp	r3, #1
					break;
 80013b8:	e006      	b.n	80013c8 <HAL_GPIO_EXTI_Callback+0xa0>
					state_SW_R = 1;
 80013ba:	4b0a      	ldr	r3, [pc, #40]	; (80013e4 <HAL_GPIO_EXTI_Callback+0xbc>)
 80013bc:	2201      	movs	r2, #1
 80013be:	701a      	strb	r2, [r3, #0]
					HAL_TIM_Base_Start_IT(&htim2);
 80013c0:	4805      	ldr	r0, [pc, #20]	; (80013d8 <HAL_GPIO_EXTI_Callback+0xb0>)
 80013c2:	f002 fd47 	bl	8003e54 <HAL_TIM_Base_Start_IT>
					break;
 80013c6:	bf00      	nop
			break;
 80013c8:	e000      	b.n	80013cc <HAL_GPIO_EXTI_Callback+0xa4>
			break;
 80013ca:	bf00      	nop
	}
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	2000009d 	.word	0x2000009d
 80013d8:	20000368 	.word	0x20000368
 80013dc:	2000009e 	.word	0x2000009e
 80013e0:	2000009f 	.word	0x2000009f
 80013e4:	200000a0 	.word	0x200000a0

080013e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if (htim == &htim2) {
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	4a37      	ldr	r2, [pc, #220]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d167      	bne.n	80014c8 <HAL_TIM_PeriodElapsedCallback+0xe0>
	 if (state_SW_U == 1 && HAL_GPIO_ReadPin(SW_U_GPIO_Port, SW_U_Pin) == GPIO_PIN_RESET) {
 80013f8:	4b36      	ldr	r3, [pc, #216]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d11d      	bne.n	800143c <HAL_TIM_PeriodElapsedCallback+0x54>
 8001400:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001404:	4834      	ldr	r0, [pc, #208]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001406:	f000 ff5b 	bl	80022c0 <HAL_GPIO_ReadPin>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d115      	bne.n	800143c <HAL_TIM_PeriodElapsedCallback+0x54>
		 state_SW_U = 0;
 8001410:	4b30      	ldr	r3, [pc, #192]	; (80014d4 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
		 HAL_TIM_Base_Stop_IT(&htim2);
 8001416:	482e      	ldr	r0, [pc, #184]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001418:	f002 fd6e 	bl	8003ef8 <HAL_TIM_Base_Stop_IT>

		 if (read_state == 2) {
 800141c:	4b2f      	ldr	r3, [pc, #188]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b02      	cmp	r3, #2
 8001424:	d103      	bne.n	800142e <HAL_TIM_PeriodElapsedCallback+0x46>
			 read_state = 0;
 8001426:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001428:	2200      	movs	r2, #0
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	e006      	b.n	800143c <HAL_TIM_PeriodElapsedCallback+0x54>
		 } else {
			 read_state++;
 800142e:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b2db      	uxtb	r3, r3
 8001434:	3301      	adds	r3, #1
 8001436:	b2da      	uxtb	r2, r3
 8001438:	4b28      	ldr	r3, [pc, #160]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800143a:	701a      	strb	r2, [r3, #0]
		 }
	 }
	 if (state_SW_D == 1 && HAL_GPIO_ReadPin(SW_D_GPIO_Port, SW_D_Pin) == GPIO_PIN_RESET) {
 800143c:	4b28      	ldr	r3, [pc, #160]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2b01      	cmp	r3, #1
 8001442:	d11d      	bne.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x98>
 8001444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001448:	4823      	ldr	r0, [pc, #140]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800144a:	f000 ff39 	bl	80022c0 <HAL_GPIO_ReadPin>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d115      	bne.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x98>
		 state_SW_D = 0;
 8001454:	4b22      	ldr	r3, [pc, #136]	; (80014e0 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001456:	2200      	movs	r2, #0
 8001458:	701a      	strb	r2, [r3, #0]
		 HAL_TIM_Base_Stop_IT(&htim2);
 800145a:	481d      	ldr	r0, [pc, #116]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800145c:	f002 fd4c 	bl	8003ef8 <HAL_TIM_Base_Stop_IT>

		 if (read_state == 0) {
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	b2db      	uxtb	r3, r3
 8001466:	2b00      	cmp	r3, #0
 8001468:	d103      	bne.n	8001472 <HAL_TIM_PeriodElapsedCallback+0x8a>
			 read_state = 2;
 800146a:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800146c:	2202      	movs	r2, #2
 800146e:	701a      	strb	r2, [r3, #0]
 8001470:	e006      	b.n	8001480 <HAL_TIM_PeriodElapsedCallback+0x98>
		 } else {
			 read_state--;
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	3b01      	subs	r3, #1
 800147a:	b2da      	uxtb	r2, r3
 800147c:	4b17      	ldr	r3, [pc, #92]	; (80014dc <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800147e:	701a      	strb	r2, [r3, #0]
		 }
	 }
	 if (state_SW_L == 1 && HAL_GPIO_ReadPin(SW_L_GPIO_Port, SW_L_Pin) == GPIO_PIN_RESET) {
 8001480:	4b18      	ldr	r3, [pc, #96]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	2b01      	cmp	r3, #1
 8001486:	d10d      	bne.n	80014a4 <HAL_TIM_PeriodElapsedCallback+0xbc>
 8001488:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800148c:	4812      	ldr	r0, [pc, #72]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800148e:	f000 ff17 	bl	80022c0 <HAL_GPIO_ReadPin>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d105      	bne.n	80014a4 <HAL_TIM_PeriodElapsedCallback+0xbc>
		 state_SW_L = 0;
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800149a:	2200      	movs	r2, #0
 800149c:	701a      	strb	r2, [r3, #0]
		 HAL_TIM_Base_Stop_IT(&htim2);
 800149e:	480c      	ldr	r0, [pc, #48]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80014a0:	f002 fd2a 	bl	8003ef8 <HAL_TIM_Base_Stop_IT>
	 }
	 if (state_SW_R == 1 && HAL_GPIO_ReadPin(SW_R_GPIO_Port, SW_R_Pin) == GPIO_PIN_RESET) {
 80014a4:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d10d      	bne.n	80014c8 <HAL_TIM_PeriodElapsedCallback+0xe0>
 80014ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014b0:	4809      	ldr	r0, [pc, #36]	; (80014d8 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80014b2:	f000 ff05 	bl	80022c0 <HAL_GPIO_ReadPin>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d105      	bne.n	80014c8 <HAL_TIM_PeriodElapsedCallback+0xe0>
		 state_SW_R = 0;
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <HAL_TIM_PeriodElapsedCallback+0x100>)
 80014be:	2200      	movs	r2, #0
 80014c0:	701a      	strb	r2, [r3, #0]
		 HAL_TIM_Base_Stop_IT(&htim2);
 80014c2:	4803      	ldr	r0, [pc, #12]	; (80014d0 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80014c4:	f002 fd18 	bl	8003ef8 <HAL_TIM_Base_Stop_IT>
	 }
  }
}
 80014c8:	bf00      	nop
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000368 	.word	0x20000368
 80014d4:	2000009d 	.word	0x2000009d
 80014d8:	40020400 	.word	0x40020400
 80014dc:	2000009c 	.word	0x2000009c
 80014e0:	2000009e 	.word	0x2000009e
 80014e4:	2000009f 	.word	0x2000009f
 80014e8:	200000a0 	.word	0x200000a0

080014ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014f0:	b672      	cpsid	i
}
 80014f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014f4:	e7fe      	b.n	80014f4 <Error_Handler+0x8>

080014f6 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80014f6:	b480      	push	{r7}
 80014f8:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80014fa:	bf00      	nop
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr
	...

08001504 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af04      	add	r7, sp, #16
 800150a:	4603      	mov	r3, r0
 800150c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
 8001512:	9302      	str	r3, [sp, #8]
 8001514:	2301      	movs	r3, #1
 8001516:	9301      	str	r3, [sp, #4]
 8001518:	1dfb      	adds	r3, r7, #7
 800151a:	9300      	str	r3, [sp, #0]
 800151c:	2301      	movs	r3, #1
 800151e:	2200      	movs	r2, #0
 8001520:	2178      	movs	r1, #120	; 0x78
 8001522:	4803      	ldr	r0, [pc, #12]	; (8001530 <ssd1306_WriteCommand+0x2c>)
 8001524:	f001 f840 	bl	80025a8 <HAL_I2C_Mem_Write>
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	200002b8 	.word	0x200002b8

08001534 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af04      	add	r7, sp, #16
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b29b      	uxth	r3, r3
 8001542:	f04f 32ff 	mov.w	r2, #4294967295
 8001546:	9202      	str	r2, [sp, #8]
 8001548:	9301      	str	r3, [sp, #4]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	9300      	str	r3, [sp, #0]
 800154e:	2301      	movs	r3, #1
 8001550:	2240      	movs	r2, #64	; 0x40
 8001552:	2178      	movs	r1, #120	; 0x78
 8001554:	4803      	ldr	r0, [pc, #12]	; (8001564 <ssd1306_WriteData+0x30>)
 8001556:	f001 f827 	bl	80025a8 <HAL_I2C_Mem_Write>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	200002b8 	.word	0x200002b8

08001568 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800156c:	f7ff ffc3 	bl	80014f6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001570:	2064      	movs	r0, #100	; 0x64
 8001572:	f000 fbf5 	bl	8001d60 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001576:	2000      	movs	r0, #0
 8001578:	f000 f9e4 	bl	8001944 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800157c:	2020      	movs	r0, #32
 800157e:	f7ff ffc1 	bl	8001504 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001582:	2000      	movs	r0, #0
 8001584:	f7ff ffbe 	bl	8001504 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001588:	20b0      	movs	r0, #176	; 0xb0
 800158a:	f7ff ffbb 	bl	8001504 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800158e:	20c8      	movs	r0, #200	; 0xc8
 8001590:	f7ff ffb8 	bl	8001504 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001594:	2000      	movs	r0, #0
 8001596:	f7ff ffb5 	bl	8001504 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800159a:	2010      	movs	r0, #16
 800159c:	f7ff ffb2 	bl	8001504 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80015a0:	2040      	movs	r0, #64	; 0x40
 80015a2:	f7ff ffaf 	bl	8001504 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80015a6:	20ff      	movs	r0, #255	; 0xff
 80015a8:	f000 f9b8 	bl	800191c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80015ac:	20a1      	movs	r0, #161	; 0xa1
 80015ae:	f7ff ffa9 	bl	8001504 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80015b2:	20a6      	movs	r0, #166	; 0xa6
 80015b4:	f7ff ffa6 	bl	8001504 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80015b8:	20a8      	movs	r0, #168	; 0xa8
 80015ba:	f7ff ffa3 	bl	8001504 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 80015be:	201f      	movs	r0, #31
 80015c0:	f7ff ffa0 	bl	8001504 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80015c4:	20a4      	movs	r0, #164	; 0xa4
 80015c6:	f7ff ff9d 	bl	8001504 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80015ca:	20d3      	movs	r0, #211	; 0xd3
 80015cc:	f7ff ff9a 	bl	8001504 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80015d0:	2000      	movs	r0, #0
 80015d2:	f7ff ff97 	bl	8001504 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80015d6:	20d5      	movs	r0, #213	; 0xd5
 80015d8:	f7ff ff94 	bl	8001504 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80015dc:	20f0      	movs	r0, #240	; 0xf0
 80015de:	f7ff ff91 	bl	8001504 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80015e2:	20d9      	movs	r0, #217	; 0xd9
 80015e4:	f7ff ff8e 	bl	8001504 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80015e8:	2022      	movs	r0, #34	; 0x22
 80015ea:	f7ff ff8b 	bl	8001504 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80015ee:	20da      	movs	r0, #218	; 0xda
 80015f0:	f7ff ff88 	bl	8001504 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80015f4:	2002      	movs	r0, #2
 80015f6:	f7ff ff85 	bl	8001504 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80015fa:	20db      	movs	r0, #219	; 0xdb
 80015fc:	f7ff ff82 	bl	8001504 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001600:	2020      	movs	r0, #32
 8001602:	f7ff ff7f 	bl	8001504 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001606:	208d      	movs	r0, #141	; 0x8d
 8001608:	f7ff ff7c 	bl	8001504 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800160c:	2014      	movs	r0, #20
 800160e:	f7ff ff79 	bl	8001504 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001612:	2001      	movs	r0, #1
 8001614:	f000 f996 	bl	8001944 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001618:	2000      	movs	r0, #0
 800161a:	f000 f80f 	bl	800163c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800161e:	f000 f82f 	bl	8001680 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001622:	4b05      	ldr	r3, [pc, #20]	; (8001638 <ssd1306_Init+0xd0>)
 8001624:	2200      	movs	r2, #0
 8001626:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001628:	4b03      	ldr	r3, [pc, #12]	; (8001638 <ssd1306_Init+0xd0>)
 800162a:	2200      	movs	r2, #0
 800162c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800162e:	4b02      	ldr	r3, [pc, #8]	; (8001638 <ssd1306_Init+0xd0>)
 8001630:	2201      	movs	r2, #1
 8001632:	715a      	strb	r2, [r3, #5]
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}
 8001638:	200002a4 	.word	0x200002a4

0800163c <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 800163c:	b480      	push	{r7}
 800163e:	b085      	sub	sp, #20
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001646:	2300      	movs	r3, #0
 8001648:	60fb      	str	r3, [r7, #12]
 800164a:	e00d      	b.n	8001668 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d101      	bne.n	8001656 <ssd1306_Fill+0x1a>
 8001652:	2100      	movs	r1, #0
 8001654:	e000      	b.n	8001658 <ssd1306_Fill+0x1c>
 8001656:	21ff      	movs	r1, #255	; 0xff
 8001658:	4a08      	ldr	r2, [pc, #32]	; (800167c <ssd1306_Fill+0x40>)
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4413      	add	r3, r2
 800165e:	460a      	mov	r2, r1
 8001660:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	3301      	adds	r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800166e:	d3ed      	bcc.n	800164c <ssd1306_Fill+0x10>
    }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3714      	adds	r7, #20
 8001676:	46bd      	mov	sp, r7
 8001678:	bc80      	pop	{r7}
 800167a:	4770      	bx	lr
 800167c:	200000a4 	.word	0x200000a4

08001680 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001686:	2300      	movs	r3, #0
 8001688:	71fb      	strb	r3, [r7, #7]
 800168a:	e016      	b.n	80016ba <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	3b50      	subs	r3, #80	; 0x50
 8001690:	b2db      	uxtb	r3, r3
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff ff36 	bl	8001504 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001698:	2000      	movs	r0, #0
 800169a:	f7ff ff33 	bl	8001504 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 800169e:	2010      	movs	r0, #16
 80016a0:	f7ff ff30 	bl	8001504 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	01db      	lsls	r3, r3, #7
 80016a8:	4a08      	ldr	r2, [pc, #32]	; (80016cc <ssd1306_UpdateScreen+0x4c>)
 80016aa:	4413      	add	r3, r2
 80016ac:	2180      	movs	r1, #128	; 0x80
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7ff ff40 	bl	8001534 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80016b4:	79fb      	ldrb	r3, [r7, #7]
 80016b6:	3301      	adds	r3, #1
 80016b8:	71fb      	strb	r3, [r7, #7]
 80016ba:	79fb      	ldrb	r3, [r7, #7]
 80016bc:	2b03      	cmp	r3, #3
 80016be:	d9e5      	bls.n	800168c <ssd1306_UpdateScreen+0xc>
    }
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	200000a4 	.word	0x200000a4

080016d0 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	71fb      	strb	r3, [r7, #7]
 80016da:	460b      	mov	r3, r1
 80016dc:	71bb      	strb	r3, [r7, #6]
 80016de:	4613      	mov	r3, r2
 80016e0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80016e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	db48      	blt.n	800177c <ssd1306_DrawPixel+0xac>
 80016ea:	79bb      	ldrb	r3, [r7, #6]
 80016ec:	2b1f      	cmp	r3, #31
 80016ee:	d845      	bhi.n	800177c <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80016f0:	4b25      	ldr	r3, [pc, #148]	; (8001788 <ssd1306_DrawPixel+0xb8>)
 80016f2:	791b      	ldrb	r3, [r3, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d006      	beq.n	8001706 <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80016f8:	797b      	ldrb	r3, [r7, #5]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	bf0c      	ite	eq
 80016fe:	2301      	moveq	r3, #1
 8001700:	2300      	movne	r3, #0
 8001702:	b2db      	uxtb	r3, r3
 8001704:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8001706:	797b      	ldrb	r3, [r7, #5]
 8001708:	2b01      	cmp	r3, #1
 800170a:	d11a      	bne.n	8001742 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800170c:	79fa      	ldrb	r2, [r7, #7]
 800170e:	79bb      	ldrb	r3, [r7, #6]
 8001710:	08db      	lsrs	r3, r3, #3
 8001712:	b2d8      	uxtb	r0, r3
 8001714:	4603      	mov	r3, r0
 8001716:	01db      	lsls	r3, r3, #7
 8001718:	4413      	add	r3, r2
 800171a:	4a1c      	ldr	r2, [pc, #112]	; (800178c <ssd1306_DrawPixel+0xbc>)
 800171c:	5cd3      	ldrb	r3, [r2, r3]
 800171e:	b25a      	sxtb	r2, r3
 8001720:	79bb      	ldrb	r3, [r7, #6]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	2101      	movs	r1, #1
 8001728:	fa01 f303 	lsl.w	r3, r1, r3
 800172c:	b25b      	sxtb	r3, r3
 800172e:	4313      	orrs	r3, r2
 8001730:	b259      	sxtb	r1, r3
 8001732:	79fa      	ldrb	r2, [r7, #7]
 8001734:	4603      	mov	r3, r0
 8001736:	01db      	lsls	r3, r3, #7
 8001738:	4413      	add	r3, r2
 800173a:	b2c9      	uxtb	r1, r1
 800173c:	4a13      	ldr	r2, [pc, #76]	; (800178c <ssd1306_DrawPixel+0xbc>)
 800173e:	54d1      	strb	r1, [r2, r3]
 8001740:	e01d      	b.n	800177e <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001742:	79fa      	ldrb	r2, [r7, #7]
 8001744:	79bb      	ldrb	r3, [r7, #6]
 8001746:	08db      	lsrs	r3, r3, #3
 8001748:	b2d8      	uxtb	r0, r3
 800174a:	4603      	mov	r3, r0
 800174c:	01db      	lsls	r3, r3, #7
 800174e:	4413      	add	r3, r2
 8001750:	4a0e      	ldr	r2, [pc, #56]	; (800178c <ssd1306_DrawPixel+0xbc>)
 8001752:	5cd3      	ldrb	r3, [r2, r3]
 8001754:	b25a      	sxtb	r2, r3
 8001756:	79bb      	ldrb	r3, [r7, #6]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	2101      	movs	r1, #1
 800175e:	fa01 f303 	lsl.w	r3, r1, r3
 8001762:	b25b      	sxtb	r3, r3
 8001764:	43db      	mvns	r3, r3
 8001766:	b25b      	sxtb	r3, r3
 8001768:	4013      	ands	r3, r2
 800176a:	b259      	sxtb	r1, r3
 800176c:	79fa      	ldrb	r2, [r7, #7]
 800176e:	4603      	mov	r3, r0
 8001770:	01db      	lsls	r3, r3, #7
 8001772:	4413      	add	r3, r2
 8001774:	b2c9      	uxtb	r1, r1
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <ssd1306_DrawPixel+0xbc>)
 8001778:	54d1      	strb	r1, [r2, r3]
 800177a:	e000      	b.n	800177e <ssd1306_DrawPixel+0xae>
        return;
 800177c:	bf00      	nop
    }
}
 800177e:	370c      	adds	r7, #12
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	200002a4 	.word	0x200002a4
 800178c:	200000a4 	.word	0x200000a4

08001790 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001790:	b590      	push	{r4, r7, lr}
 8001792:	b089      	sub	sp, #36	; 0x24
 8001794:	af00      	add	r7, sp, #0
 8001796:	4604      	mov	r4, r0
 8001798:	1d38      	adds	r0, r7, #4
 800179a:	e880 0006 	stmia.w	r0, {r1, r2}
 800179e:	461a      	mov	r2, r3
 80017a0:	4623      	mov	r3, r4
 80017a2:	73fb      	strb	r3, [r7, #15]
 80017a4:	4613      	mov	r3, r2
 80017a6:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80017a8:	7bfb      	ldrb	r3, [r7, #15]
 80017aa:	2b1f      	cmp	r3, #31
 80017ac:	d902      	bls.n	80017b4 <ssd1306_WriteChar+0x24>
 80017ae:	7bfb      	ldrb	r3, [r7, #15]
 80017b0:	2b7e      	cmp	r3, #126	; 0x7e
 80017b2:	d901      	bls.n	80017b8 <ssd1306_WriteChar+0x28>
        return 0;
 80017b4:	2300      	movs	r3, #0
 80017b6:	e06d      	b.n	8001894 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80017b8:	4b38      	ldr	r3, [pc, #224]	; (800189c <ssd1306_WriteChar+0x10c>)
 80017ba:	881b      	ldrh	r3, [r3, #0]
 80017bc:	461a      	mov	r2, r3
 80017be:	793b      	ldrb	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	2b80      	cmp	r3, #128	; 0x80
 80017c4:	dc06      	bgt.n	80017d4 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80017c6:	4b35      	ldr	r3, [pc, #212]	; (800189c <ssd1306_WriteChar+0x10c>)
 80017c8:	885b      	ldrh	r3, [r3, #2]
 80017ca:	461a      	mov	r2, r3
 80017cc:	797b      	ldrb	r3, [r7, #5]
 80017ce:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80017d0:	2b20      	cmp	r3, #32
 80017d2:	dd01      	ble.n	80017d8 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	e05d      	b.n	8001894 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80017d8:	2300      	movs	r3, #0
 80017da:	61fb      	str	r3, [r7, #28]
 80017dc:	e04c      	b.n	8001878 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	7bfb      	ldrb	r3, [r7, #15]
 80017e2:	3b20      	subs	r3, #32
 80017e4:	7979      	ldrb	r1, [r7, #5]
 80017e6:	fb01 f303 	mul.w	r3, r1, r3
 80017ea:	4619      	mov	r1, r3
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	440b      	add	r3, r1
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	4413      	add	r3, r2
 80017f4:	881b      	ldrh	r3, [r3, #0]
 80017f6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80017f8:	2300      	movs	r3, #0
 80017fa:	61bb      	str	r3, [r7, #24]
 80017fc:	e034      	b.n	8001868 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80017fe:	697a      	ldr	r2, [r7, #20]
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d012      	beq.n	8001834 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800180e:	4b23      	ldr	r3, [pc, #140]	; (800189c <ssd1306_WriteChar+0x10c>)
 8001810:	881b      	ldrh	r3, [r3, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	b2db      	uxtb	r3, r3
 8001818:	4413      	add	r3, r2
 800181a:	b2d8      	uxtb	r0, r3
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <ssd1306_WriteChar+0x10c>)
 800181e:	885b      	ldrh	r3, [r3, #2]
 8001820:	b2da      	uxtb	r2, r3
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	b2db      	uxtb	r3, r3
 8001826:	4413      	add	r3, r2
 8001828:	b2db      	uxtb	r3, r3
 800182a:	7bba      	ldrb	r2, [r7, #14]
 800182c:	4619      	mov	r1, r3
 800182e:	f7ff ff4f 	bl	80016d0 <ssd1306_DrawPixel>
 8001832:	e016      	b.n	8001862 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001834:	4b19      	ldr	r3, [pc, #100]	; (800189c <ssd1306_WriteChar+0x10c>)
 8001836:	881b      	ldrh	r3, [r3, #0]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	b2db      	uxtb	r3, r3
 800183e:	4413      	add	r3, r2
 8001840:	b2d8      	uxtb	r0, r3
 8001842:	4b16      	ldr	r3, [pc, #88]	; (800189c <ssd1306_WriteChar+0x10c>)
 8001844:	885b      	ldrh	r3, [r3, #2]
 8001846:	b2da      	uxtb	r2, r3
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	b2db      	uxtb	r3, r3
 800184c:	4413      	add	r3, r2
 800184e:	b2d9      	uxtb	r1, r3
 8001850:	7bbb      	ldrb	r3, [r7, #14]
 8001852:	2b00      	cmp	r3, #0
 8001854:	bf0c      	ite	eq
 8001856:	2301      	moveq	r3, #1
 8001858:	2300      	movne	r3, #0
 800185a:	b2db      	uxtb	r3, r3
 800185c:	461a      	mov	r2, r3
 800185e:	f7ff ff37 	bl	80016d0 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	3301      	adds	r3, #1
 8001866:	61bb      	str	r3, [r7, #24]
 8001868:	793b      	ldrb	r3, [r7, #4]
 800186a:	461a      	mov	r2, r3
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	4293      	cmp	r3, r2
 8001870:	d3c5      	bcc.n	80017fe <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3301      	adds	r3, #1
 8001876:	61fb      	str	r3, [r7, #28]
 8001878:	797b      	ldrb	r3, [r7, #5]
 800187a:	461a      	mov	r2, r3
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	4293      	cmp	r3, r2
 8001880:	d3ad      	bcc.n	80017de <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001882:	4b06      	ldr	r3, [pc, #24]	; (800189c <ssd1306_WriteChar+0x10c>)
 8001884:	881a      	ldrh	r2, [r3, #0]
 8001886:	793b      	ldrb	r3, [r7, #4]
 8001888:	b29b      	uxth	r3, r3
 800188a:	4413      	add	r3, r2
 800188c:	b29a      	uxth	r2, r3
 800188e:	4b03      	ldr	r3, [pc, #12]	; (800189c <ssd1306_WriteChar+0x10c>)
 8001890:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001892:	7bfb      	ldrb	r3, [r7, #15]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3724      	adds	r7, #36	; 0x24
 8001898:	46bd      	mov	sp, r7
 800189a:	bd90      	pop	{r4, r7, pc}
 800189c:	200002a4 	.word	0x200002a4

080018a0 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	1d38      	adds	r0, r7, #4
 80018aa:	e880 0006 	stmia.w	r0, {r1, r2}
 80018ae:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80018b0:	e012      	b.n	80018d8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	7818      	ldrb	r0, [r3, #0]
 80018b6:	78fb      	ldrb	r3, [r7, #3]
 80018b8:	1d3a      	adds	r2, r7, #4
 80018ba:	ca06      	ldmia	r2, {r1, r2}
 80018bc:	f7ff ff68 	bl	8001790 <ssd1306_WriteChar>
 80018c0:	4603      	mov	r3, r0
 80018c2:	461a      	mov	r2, r3
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d002      	beq.n	80018d2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	e008      	b.n	80018e4 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	3301      	adds	r3, #1
 80018d6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1e8      	bne.n	80018b2 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	781b      	ldrb	r3, [r3, #0]
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	3710      	adds	r7, #16
 80018e8:	46bd      	mov	sp, r7
 80018ea:	bd80      	pop	{r7, pc}

080018ec <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	4603      	mov	r3, r0
 80018f4:	460a      	mov	r2, r1
 80018f6:	71fb      	strb	r3, [r7, #7]
 80018f8:	4613      	mov	r3, r2
 80018fa:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80018fc:	79fb      	ldrb	r3, [r7, #7]
 80018fe:	b29a      	uxth	r2, r3
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <ssd1306_SetCursor+0x2c>)
 8001902:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001904:	79bb      	ldrb	r3, [r7, #6]
 8001906:	b29a      	uxth	r2, r3
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <ssd1306_SetCursor+0x2c>)
 800190a:	805a      	strh	r2, [r3, #2]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	200002a4 	.word	0x200002a4

0800191c <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001926:	2381      	movs	r3, #129	; 0x81
 8001928:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800192a:	7bfb      	ldrb	r3, [r7, #15]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fde9 	bl	8001504 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001932:	79fb      	ldrb	r3, [r7, #7]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fde5 	bl	8001504 <ssd1306_WriteCommand>
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
	...

08001944 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001954:	23af      	movs	r3, #175	; 0xaf
 8001956:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001958:	4b08      	ldr	r3, [pc, #32]	; (800197c <ssd1306_SetDisplayOn+0x38>)
 800195a:	2201      	movs	r2, #1
 800195c:	719a      	strb	r2, [r3, #6]
 800195e:	e004      	b.n	800196a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001960:	23ae      	movs	r3, #174	; 0xae
 8001962:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <ssd1306_SetDisplayOn+0x38>)
 8001966:	2200      	movs	r2, #0
 8001968:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 800196a:	7bfb      	ldrb	r3, [r7, #15]
 800196c:	4618      	mov	r0, r3
 800196e:	f7ff fdc9 	bl	8001504 <ssd1306_WriteCommand>
}
 8001972:	bf00      	nop
 8001974:	3710      	adds	r7, #16
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200002a4 	.word	0x200002a4

08001980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001986:	4b14      	ldr	r3, [pc, #80]	; (80019d8 <HAL_MspInit+0x58>)
 8001988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800198a:	4a13      	ldr	r2, [pc, #76]	; (80019d8 <HAL_MspInit+0x58>)
 800198c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001990:	6253      	str	r3, [r2, #36]	; 0x24
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <HAL_MspInit+0x58>)
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001996:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	4b0e      	ldr	r3, [pc, #56]	; (80019d8 <HAL_MspInit+0x58>)
 80019a0:	6a1b      	ldr	r3, [r3, #32]
 80019a2:	4a0d      	ldr	r2, [pc, #52]	; (80019d8 <HAL_MspInit+0x58>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6213      	str	r3, [r2, #32]
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_MspInit+0x58>)
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <HAL_MspInit+0x58>)
 80019b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ba:	4a07      	ldr	r2, [pc, #28]	; (80019d8 <HAL_MspInit+0x58>)
 80019bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c0:	6253      	str	r3, [r2, #36]	; 0x24
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_MspInit+0x58>)
 80019c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr
 80019d8:	40023800 	.word	0x40023800

080019dc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08a      	sub	sp, #40	; 0x28
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0314 	add.w	r3, r7, #20
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a17      	ldr	r2, [pc, #92]	; (8001a58 <HAL_I2C_MspInit+0x7c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d128      	bne.n	8001a50 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <HAL_I2C_MspInit+0x80>)
 8001a00:	69db      	ldr	r3, [r3, #28]
 8001a02:	4a16      	ldr	r2, [pc, #88]	; (8001a5c <HAL_I2C_MspInit+0x80>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	61d3      	str	r3, [r2, #28]
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <HAL_I2C_MspInit+0x80>)
 8001a0c:	69db      	ldr	r3, [r3, #28]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	613b      	str	r3, [r7, #16]
 8001a14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a1c:	2312      	movs	r3, #18
 8001a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a24:	2303      	movs	r3, #3
 8001a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a28:	2304      	movs	r3, #4
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	4619      	mov	r1, r3
 8001a32:	480b      	ldr	r0, [pc, #44]	; (8001a60 <HAL_I2C_MspInit+0x84>)
 8001a34:	f000 fac4 	bl	8001fc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <HAL_I2C_MspInit+0x80>)
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a3c:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <HAL_I2C_MspInit+0x80>)
 8001a3e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a42:	6253      	str	r3, [r2, #36]	; 0x24
 8001a44:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_I2C_MspInit+0x80>)
 8001a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a50:	bf00      	nop
 8001a52:	3728      	adds	r7, #40	; 0x28
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40005400 	.word	0x40005400
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40020400 	.word	0x40020400

08001a64 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b084      	sub	sp, #16
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a74:	d113      	bne.n	8001a9e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_TIM_Base_MspInit+0x44>)
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <HAL_TIM_Base_MspInit+0x44>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6253      	str	r3, [r2, #36]	; 0x24
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_TIM_Base_MspInit+0x44>)
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a8e:	2200      	movs	r2, #0
 8001a90:	2100      	movs	r1, #0
 8001a92:	201c      	movs	r0, #28
 8001a94:	f000 fa5d 	bl	8001f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a98:	201c      	movs	r0, #28
 8001a9a:	f000 fa76 	bl	8001f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a9e:	bf00      	nop
 8001aa0:	3710      	adds	r7, #16
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800

08001aac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	605a      	str	r2, [r3, #4]
 8001abe:	609a      	str	r2, [r3, #8]
 8001ac0:	60da      	str	r2, [r3, #12]
 8001ac2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <HAL_UART_MspInit+0x7c>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d127      	bne.n	8001b1e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ace:	4b17      	ldr	r3, [pc, #92]	; (8001b2c <HAL_UART_MspInit+0x80>)
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
 8001ad2:	4a16      	ldr	r2, [pc, #88]	; (8001b2c <HAL_UART_MspInit+0x80>)
 8001ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad8:	6213      	str	r3, [r2, #32]
 8001ada:	4b14      	ldr	r3, [pc, #80]	; (8001b2c <HAL_UART_MspInit+0x80>)
 8001adc:	6a1b      	ldr	r3, [r3, #32]
 8001ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ae6:	4b11      	ldr	r3, [pc, #68]	; (8001b2c <HAL_UART_MspInit+0x80>)
 8001ae8:	69db      	ldr	r3, [r3, #28]
 8001aea:	4a10      	ldr	r2, [pc, #64]	; (8001b2c <HAL_UART_MspInit+0x80>)
 8001aec:	f043 0302 	orr.w	r3, r3, #2
 8001af0:	61d3      	str	r3, [r2, #28]
 8001af2:	4b0e      	ldr	r3, [pc, #56]	; (8001b2c <HAL_UART_MspInit+0x80>)
 8001af4:	69db      	ldr	r3, [r3, #28]
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	60fb      	str	r3, [r7, #12]
 8001afc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001afe:	23c0      	movs	r3, #192	; 0xc0
 8001b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b06:	2301      	movs	r3, #1
 8001b08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b0e:	2307      	movs	r3, #7
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b12:	f107 0314 	add.w	r3, r7, #20
 8001b16:	4619      	mov	r1, r3
 8001b18:	4805      	ldr	r0, [pc, #20]	; (8001b30 <HAL_UART_MspInit+0x84>)
 8001b1a:	f000 fa51 	bl	8001fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b1e:	bf00      	nop
 8001b20:	3728      	adds	r7, #40	; 0x28
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40013800 	.word	0x40013800
 8001b2c:	40023800 	.word	0x40023800
 8001b30:	40020400 	.word	0x40020400

08001b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <NMI_Handler+0x4>

08001b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <HardFault_Handler+0x4>

08001b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <MemManage_Handler+0x4>

08001b46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <BusFault_Handler+0x4>

08001b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <UsageFault_Handler+0x4>

08001b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bc80      	pop	{r7}
 8001b5c:	4770      	bx	lr

08001b5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr

08001b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr

08001b76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b76:	b580      	push	{r7, lr}
 8001b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b7a:	f000 f8d5 	bl	8001d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
	...

08001b84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b88:	4802      	ldr	r0, [pc, #8]	; (8001b94 <TIM2_IRQHandler+0x10>)
 8001b8a:	f002 f9db 	bl	8003f44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	20000368 	.word	0x20000368

08001b98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001b9c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001ba0:	f000 fba6 	bl	80022f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001ba4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001ba8:	f000 fba2 	bl	80022f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001bac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001bb0:	f000 fb9e 	bl	80022f0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001bb4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001bb8:	f000 fb9a 	bl	80022f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bc8:	4a14      	ldr	r2, [pc, #80]	; (8001c1c <_sbrk+0x5c>)
 8001bca:	4b15      	ldr	r3, [pc, #84]	; (8001c20 <_sbrk+0x60>)
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd4:	4b13      	ldr	r3, [pc, #76]	; (8001c24 <_sbrk+0x64>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d102      	bne.n	8001be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bdc:	4b11      	ldr	r3, [pc, #68]	; (8001c24 <_sbrk+0x64>)
 8001bde:	4a12      	ldr	r2, [pc, #72]	; (8001c28 <_sbrk+0x68>)
 8001be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <_sbrk+0x64>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4413      	add	r3, r2
 8001bea:	693a      	ldr	r2, [r7, #16]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d207      	bcs.n	8001c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf0:	f002 fe02 	bl	80047f8 <__errno>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	220c      	movs	r2, #12
 8001bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001bfe:	e009      	b.n	8001c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c00:	4b08      	ldr	r3, [pc, #32]	; (8001c24 <_sbrk+0x64>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c06:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <_sbrk+0x64>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <_sbrk+0x64>)
 8001c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c12:	68fb      	ldr	r3, [r7, #12]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20008000 	.word	0x20008000
 8001c20:	00000400 	.word	0x00000400
 8001c24:	200002ac 	.word	0x200002ac
 8001c28:	200003c0 	.word	0x200003c0

08001c2c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c38:	480c      	ldr	r0, [pc, #48]	; (8001c6c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c3a:	490d      	ldr	r1, [pc, #52]	; (8001c70 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	; (8001c74 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c40:	e002      	b.n	8001c48 <LoopCopyDataInit>

08001c42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c46:	3304      	adds	r3, #4

08001c48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c4c:	d3f9      	bcc.n	8001c42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c4e:	4a0a      	ldr	r2, [pc, #40]	; (8001c78 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c50:	4c0a      	ldr	r4, [pc, #40]	; (8001c7c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c54:	e001      	b.n	8001c5a <LoopFillZerobss>

08001c56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c58:	3204      	adds	r2, #4

08001c5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c5c:	d3fb      	bcc.n	8001c56 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c5e:	f7ff ffe5 	bl	8001c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c62:	f002 fdcf 	bl	8004804 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c66:	f7ff f903 	bl	8000e70 <main>
  bx lr
 8001c6a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c70:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001c74:	08007210 	.word	0x08007210
  ldr r2, =_sbss
 8001c78:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001c7c:	200003bc 	.word	0x200003bc

08001c80 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c80:	e7fe      	b.n	8001c80 <ADC1_IRQHandler>

08001c82 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c82:	b580      	push	{r7, lr}
 8001c84:	b082      	sub	sp, #8
 8001c86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c8c:	2003      	movs	r0, #3
 8001c8e:	f000 f955 	bl	8001f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c92:	200f      	movs	r0, #15
 8001c94:	f000 f80e 	bl	8001cb4 <HAL_InitTick>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	71fb      	strb	r3, [r7, #7]
 8001ca2:	e001      	b.n	8001ca8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001ca4:	f7ff fe6c 	bl	8001980 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001cc0:	4b16      	ldr	r3, [pc, #88]	; (8001d1c <HAL_InitTick+0x68>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d022      	beq.n	8001d0e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001cc8:	4b15      	ldr	r3, [pc, #84]	; (8001d20 <HAL_InitTick+0x6c>)
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <HAL_InitTick+0x68>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 f962 	bl	8001fa6 <HAL_SYSTICK_Config>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d10f      	bne.n	8001d08 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b0f      	cmp	r3, #15
 8001cec:	d809      	bhi.n	8001d02 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf6:	f000 f92c 	bl	8001f52 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <HAL_InitTick+0x70>)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	e007      	b.n	8001d12 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	73fb      	strb	r3, [r7, #15]
 8001d06:	e004      	b.n	8001d12 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	73fb      	strb	r3, [r7, #15]
 8001d0c:	e001      	b.n	8001d12 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000018 	.word	0x20000018
 8001d20:	20000010 	.word	0x20000010
 8001d24:	20000014 	.word	0x20000014

08001d28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_IncTick+0x1c>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_IncTick+0x20>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4413      	add	r3, r2
 8001d36:	4a03      	ldr	r2, [pc, #12]	; (8001d44 <HAL_IncTick+0x1c>)
 8001d38:	6013      	str	r3, [r2, #0]
}
 8001d3a:	bf00      	nop
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bc80      	pop	{r7}
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	200003a8 	.word	0x200003a8
 8001d48:	20000018 	.word	0x20000018

08001d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d50:	4b02      	ldr	r3, [pc, #8]	; (8001d5c <HAL_GetTick+0x10>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	200003a8 	.word	0x200003a8

08001d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d68:	f7ff fff0 	bl	8001d4c <HAL_GetTick>
 8001d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d004      	beq.n	8001d84 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d7a:	4b09      	ldr	r3, [pc, #36]	; (8001da0 <HAL_Delay+0x40>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	4413      	add	r3, r2
 8001d82:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d84:	bf00      	nop
 8001d86:	f7ff ffe1 	bl	8001d4c <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d8f7      	bhi.n	8001d86 <HAL_Delay+0x26>
  {
  }
}
 8001d96:	bf00      	nop
 8001d98:	bf00      	nop
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000018 	.word	0x20000018

08001da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da4:	b480      	push	{r7}
 8001da6:	b085      	sub	sp, #20
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db4:	4b0c      	ldr	r3, [pc, #48]	; (8001de8 <__NVIC_SetPriorityGrouping+0x44>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd6:	4a04      	ldr	r2, [pc, #16]	; (8001de8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	60d3      	str	r3, [r2, #12]
}
 8001ddc:	bf00      	nop
 8001dde:	3714      	adds	r7, #20
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <__NVIC_GetPriorityGrouping+0x18>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	0a1b      	lsrs	r3, r3, #8
 8001df6:	f003 0307 	and.w	r3, r3, #7
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bc80      	pop	{r7}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	4603      	mov	r3, r0
 8001e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	db0b      	blt.n	8001e32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e1a:	79fb      	ldrb	r3, [r7, #7]
 8001e1c:	f003 021f 	and.w	r2, r3, #31
 8001e20:	4906      	ldr	r1, [pc, #24]	; (8001e3c <__NVIC_EnableIRQ+0x34>)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	095b      	lsrs	r3, r3, #5
 8001e28:	2001      	movs	r0, #1
 8001e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e32:	bf00      	nop
 8001e34:	370c      	adds	r7, #12
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bc80      	pop	{r7}
 8001e3a:	4770      	bx	lr
 8001e3c:	e000e100 	.word	0xe000e100

08001e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	db0a      	blt.n	8001e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	490c      	ldr	r1, [pc, #48]	; (8001e8c <__NVIC_SetPriority+0x4c>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	0112      	lsls	r2, r2, #4
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	440b      	add	r3, r1
 8001e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e68:	e00a      	b.n	8001e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4908      	ldr	r1, [pc, #32]	; (8001e90 <__NVIC_SetPriority+0x50>)
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	3b04      	subs	r3, #4
 8001e78:	0112      	lsls	r2, r2, #4
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	761a      	strb	r2, [r3, #24]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bc80      	pop	{r7}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	e000e100 	.word	0xe000e100
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	; 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f1c3 0307 	rsb	r3, r3, #7
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	bf28      	it	cs
 8001eb2:	2304      	movcs	r3, #4
 8001eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	d902      	bls.n	8001ec4 <NVIC_EncodePriority+0x30>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3b03      	subs	r3, #3
 8001ec2:	e000      	b.n	8001ec6 <NVIC_EncodePriority+0x32>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001edc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	43d9      	mvns	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	4313      	orrs	r3, r2
         );
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3724      	adds	r7, #36	; 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bc80      	pop	{r7}
 8001ef6:	4770      	bx	lr

08001ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b082      	sub	sp, #8
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f08:	d301      	bcc.n	8001f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e00f      	b.n	8001f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f0e:	4a0a      	ldr	r2, [pc, #40]	; (8001f38 <SysTick_Config+0x40>)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	3b01      	subs	r3, #1
 8001f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f16:	210f      	movs	r1, #15
 8001f18:	f04f 30ff 	mov.w	r0, #4294967295
 8001f1c:	f7ff ff90 	bl	8001e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f20:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <SysTick_Config+0x40>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f26:	4b04      	ldr	r3, [pc, #16]	; (8001f38 <SysTick_Config+0x40>)
 8001f28:	2207      	movs	r2, #7
 8001f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f2c:	2300      	movs	r3, #0
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	e000e010 	.word	0xe000e010

08001f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff2d 	bl	8001da4 <__NVIC_SetPriorityGrouping>
}
 8001f4a:	bf00      	nop
 8001f4c:	3708      	adds	r7, #8
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	607a      	str	r2, [r7, #4]
 8001f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f60:	2300      	movs	r3, #0
 8001f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f64:	f7ff ff42 	bl	8001dec <__NVIC_GetPriorityGrouping>
 8001f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	6978      	ldr	r0, [r7, #20]
 8001f70:	f7ff ff90 	bl	8001e94 <NVIC_EncodePriority>
 8001f74:	4602      	mov	r2, r0
 8001f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7a:	4611      	mov	r1, r2
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff5f 	bl	8001e40 <__NVIC_SetPriority>
}
 8001f82:	bf00      	nop
 8001f84:	3718      	adds	r7, #24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bd80      	pop	{r7, pc}

08001f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	4603      	mov	r3, r0
 8001f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff35 	bl	8001e08 <__NVIC_EnableIRQ>
}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f7ff ffa2 	bl	8001ef8 <SysTick_Config>
 8001fb4:	4603      	mov	r3, r0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3708      	adds	r7, #8
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
	...

08001fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b087      	sub	sp, #28
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001fd6:	e154      	b.n	8002282 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	2101      	movs	r1, #1
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 8146 	beq.w	800227c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d005      	beq.n	8002008 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002004:	2b02      	cmp	r3, #2
 8002006:	d130      	bne.n	800206a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800203e:	2201      	movs	r2, #1
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	f003 0201 	and.w	r2, r3, #1
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b03      	cmp	r3, #3
 8002074:	d017      	beq.n	80020a6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	2203      	movs	r2, #3
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d123      	bne.n	80020fa <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	08da      	lsrs	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3208      	adds	r2, #8
 80020ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020be:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	220f      	movs	r2, #15
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	08da      	lsrs	r2, r3, #3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3208      	adds	r2, #8
 80020f4:	6939      	ldr	r1, [r7, #16]
 80020f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	2203      	movs	r2, #3
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0203 	and.w	r2, r3, #3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80a0 	beq.w	800227c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213c:	4b58      	ldr	r3, [pc, #352]	; (80022a0 <HAL_GPIO_Init+0x2e0>)
 800213e:	6a1b      	ldr	r3, [r3, #32]
 8002140:	4a57      	ldr	r2, [pc, #348]	; (80022a0 <HAL_GPIO_Init+0x2e0>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6213      	str	r3, [r2, #32]
 8002148:	4b55      	ldr	r3, [pc, #340]	; (80022a0 <HAL_GPIO_Init+0x2e0>)
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002154:	4a53      	ldr	r2, [pc, #332]	; (80022a4 <HAL_GPIO_Init+0x2e4>)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	089b      	lsrs	r3, r3, #2
 800215a:	3302      	adds	r3, #2
 800215c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002160:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	220f      	movs	r2, #15
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a4b      	ldr	r2, [pc, #300]	; (80022a8 <HAL_GPIO_Init+0x2e8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d019      	beq.n	80021b4 <HAL_GPIO_Init+0x1f4>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a4a      	ldr	r2, [pc, #296]	; (80022ac <HAL_GPIO_Init+0x2ec>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d013      	beq.n	80021b0 <HAL_GPIO_Init+0x1f0>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a49      	ldr	r2, [pc, #292]	; (80022b0 <HAL_GPIO_Init+0x2f0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00d      	beq.n	80021ac <HAL_GPIO_Init+0x1ec>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a48      	ldr	r2, [pc, #288]	; (80022b4 <HAL_GPIO_Init+0x2f4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d007      	beq.n	80021a8 <HAL_GPIO_Init+0x1e8>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a47      	ldr	r2, [pc, #284]	; (80022b8 <HAL_GPIO_Init+0x2f8>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d101      	bne.n	80021a4 <HAL_GPIO_Init+0x1e4>
 80021a0:	2304      	movs	r3, #4
 80021a2:	e008      	b.n	80021b6 <HAL_GPIO_Init+0x1f6>
 80021a4:	2305      	movs	r3, #5
 80021a6:	e006      	b.n	80021b6 <HAL_GPIO_Init+0x1f6>
 80021a8:	2303      	movs	r3, #3
 80021aa:	e004      	b.n	80021b6 <HAL_GPIO_Init+0x1f6>
 80021ac:	2302      	movs	r3, #2
 80021ae:	e002      	b.n	80021b6 <HAL_GPIO_Init+0x1f6>
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <HAL_GPIO_Init+0x1f6>
 80021b4:	2300      	movs	r3, #0
 80021b6:	697a      	ldr	r2, [r7, #20]
 80021b8:	f002 0203 	and.w	r2, r2, #3
 80021bc:	0092      	lsls	r2, r2, #2
 80021be:	4093      	lsls	r3, r2
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021c6:	4937      	ldr	r1, [pc, #220]	; (80022a4 <HAL_GPIO_Init+0x2e4>)
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	3302      	adds	r3, #2
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d4:	4b39      	ldr	r3, [pc, #228]	; (80022bc <HAL_GPIO_Init+0x2fc>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	43db      	mvns	r3, r3
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	4013      	ands	r3, r2
 80021e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80021f0:	693a      	ldr	r2, [r7, #16]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021f8:	4a30      	ldr	r2, [pc, #192]	; (80022bc <HAL_GPIO_Init+0x2fc>)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021fe:	4b2f      	ldr	r3, [pc, #188]	; (80022bc <HAL_GPIO_Init+0x2fc>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	43db      	mvns	r3, r3
 8002208:	693a      	ldr	r2, [r7, #16]
 800220a:	4013      	ands	r3, r2
 800220c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800221a:	693a      	ldr	r2, [r7, #16]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4313      	orrs	r3, r2
 8002220:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002222:	4a26      	ldr	r2, [pc, #152]	; (80022bc <HAL_GPIO_Init+0x2fc>)
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002228:	4b24      	ldr	r3, [pc, #144]	; (80022bc <HAL_GPIO_Init+0x2fc>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	43db      	mvns	r3, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002244:	693a      	ldr	r2, [r7, #16]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	4313      	orrs	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800224c:	4a1b      	ldr	r2, [pc, #108]	; (80022bc <HAL_GPIO_Init+0x2fc>)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002252:	4b1a      	ldr	r3, [pc, #104]	; (80022bc <HAL_GPIO_Init+0x2fc>)
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	43db      	mvns	r3, r3
 800225c:	693a      	ldr	r2, [r7, #16]
 800225e:	4013      	ands	r3, r2
 8002260:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4313      	orrs	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002276:	4a11      	ldr	r2, [pc, #68]	; (80022bc <HAL_GPIO_Init+0x2fc>)
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	3301      	adds	r3, #1
 8002280:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
 800228c:	2b00      	cmp	r3, #0
 800228e:	f47f aea3 	bne.w	8001fd8 <HAL_GPIO_Init+0x18>
  }
}
 8002292:	bf00      	nop
 8002294:	bf00      	nop
 8002296:	371c      	adds	r7, #28
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40010000 	.word	0x40010000
 80022a8:	40020000 	.word	0x40020000
 80022ac:	40020400 	.word	0x40020400
 80022b0:	40020800 	.word	0x40020800
 80022b4:	40020c00 	.word	0x40020c00
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40010400 	.word	0x40010400

080022c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b085      	sub	sp, #20
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691a      	ldr	r2, [r3, #16]
 80022d0:	887b      	ldrh	r3, [r7, #2]
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022d8:	2301      	movs	r3, #1
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	e001      	b.n	80022e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022de:	2300      	movs	r3, #0
 80022e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bc80      	pop	{r7}
 80022ec:	4770      	bx	lr
	...

080022f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	4603      	mov	r3, r0
 80022f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	88fb      	ldrh	r3, [r7, #6]
 8002300:	4013      	ands	r3, r2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d006      	beq.n	8002314 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002306:	4a05      	ldr	r2, [pc, #20]	; (800231c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002308:	88fb      	ldrh	r3, [r7, #6]
 800230a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800230c:	88fb      	ldrh	r3, [r7, #6]
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff f80a 	bl	8001328 <HAL_GPIO_EXTI_Callback>
  }
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40010400 	.word	0x40010400

08002320 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d101      	bne.n	8002332 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e12b      	b.n	800258a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002338:	b2db      	uxtb	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d106      	bne.n	800234c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	f7ff fb48 	bl	80019dc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2224      	movs	r2, #36	; 0x24
 8002350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0201 	bic.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002372:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002382:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002384:	f001 fc9e 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 8002388:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	4a81      	ldr	r2, [pc, #516]	; (8002594 <HAL_I2C_Init+0x274>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d807      	bhi.n	80023a4 <HAL_I2C_Init+0x84>
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4a80      	ldr	r2, [pc, #512]	; (8002598 <HAL_I2C_Init+0x278>)
 8002398:	4293      	cmp	r3, r2
 800239a:	bf94      	ite	ls
 800239c:	2301      	movls	r3, #1
 800239e:	2300      	movhi	r3, #0
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	e006      	b.n	80023b2 <HAL_I2C_Init+0x92>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4a7d      	ldr	r2, [pc, #500]	; (800259c <HAL_I2C_Init+0x27c>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	bf94      	ite	ls
 80023ac:	2301      	movls	r3, #1
 80023ae:	2300      	movhi	r3, #0
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d001      	beq.n	80023ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0e7      	b.n	800258a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4a78      	ldr	r2, [pc, #480]	; (80025a0 <HAL_I2C_Init+0x280>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	0c9b      	lsrs	r3, r3, #18
 80023c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	4a6a      	ldr	r2, [pc, #424]	; (8002594 <HAL_I2C_Init+0x274>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d802      	bhi.n	80023f4 <HAL_I2C_Init+0xd4>
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	3301      	adds	r3, #1
 80023f2:	e009      	b.n	8002408 <HAL_I2C_Init+0xe8>
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80023fa:	fb02 f303 	mul.w	r3, r2, r3
 80023fe:	4a69      	ldr	r2, [pc, #420]	; (80025a4 <HAL_I2C_Init+0x284>)
 8002400:	fba2 2303 	umull	r2, r3, r2, r3
 8002404:	099b      	lsrs	r3, r3, #6
 8002406:	3301      	adds	r3, #1
 8002408:	687a      	ldr	r2, [r7, #4]
 800240a:	6812      	ldr	r2, [r2, #0]
 800240c:	430b      	orrs	r3, r1
 800240e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800241a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	495c      	ldr	r1, [pc, #368]	; (8002594 <HAL_I2C_Init+0x274>)
 8002424:	428b      	cmp	r3, r1
 8002426:	d819      	bhi.n	800245c <HAL_I2C_Init+0x13c>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1e59      	subs	r1, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	fbb1 f3f3 	udiv	r3, r1, r3
 8002436:	1c59      	adds	r1, r3, #1
 8002438:	f640 73fc 	movw	r3, #4092	; 0xffc
 800243c:	400b      	ands	r3, r1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HAL_I2C_Init+0x138>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1e59      	subs	r1, r3, #1
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	005b      	lsls	r3, r3, #1
 800244c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002450:	3301      	adds	r3, #1
 8002452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002456:	e051      	b.n	80024fc <HAL_I2C_Init+0x1dc>
 8002458:	2304      	movs	r3, #4
 800245a:	e04f      	b.n	80024fc <HAL_I2C_Init+0x1dc>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d111      	bne.n	8002488 <HAL_I2C_Init+0x168>
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1e58      	subs	r0, r3, #1
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6859      	ldr	r1, [r3, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	440b      	add	r3, r1
 8002472:	fbb0 f3f3 	udiv	r3, r0, r3
 8002476:	3301      	adds	r3, #1
 8002478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800247c:	2b00      	cmp	r3, #0
 800247e:	bf0c      	ite	eq
 8002480:	2301      	moveq	r3, #1
 8002482:	2300      	movne	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	e012      	b.n	80024ae <HAL_I2C_Init+0x18e>
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	1e58      	subs	r0, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6859      	ldr	r1, [r3, #4]
 8002490:	460b      	mov	r3, r1
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	0099      	lsls	r1, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	fbb0 f3f3 	udiv	r3, r0, r3
 800249e:	3301      	adds	r3, #1
 80024a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	bf0c      	ite	eq
 80024a8:	2301      	moveq	r3, #1
 80024aa:	2300      	movne	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_I2C_Init+0x196>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e022      	b.n	80024fc <HAL_I2C_Init+0x1dc>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10e      	bne.n	80024dc <HAL_I2C_Init+0x1bc>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	1e58      	subs	r0, r3, #1
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6859      	ldr	r1, [r3, #4]
 80024c6:	460b      	mov	r3, r1
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	440b      	add	r3, r1
 80024cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80024d0:	3301      	adds	r3, #1
 80024d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024da:	e00f      	b.n	80024fc <HAL_I2C_Init+0x1dc>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	1e58      	subs	r0, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6859      	ldr	r1, [r3, #4]
 80024e4:	460b      	mov	r3, r1
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	0099      	lsls	r1, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80024f2:	3301      	adds	r3, #1
 80024f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	6809      	ldr	r1, [r1, #0]
 8002500:	4313      	orrs	r3, r2
 8002502:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69da      	ldr	r2, [r3, #28]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689b      	ldr	r3, [r3, #8]
 8002526:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800252a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	6911      	ldr	r1, [r2, #16]
 8002532:	687a      	ldr	r2, [r7, #4]
 8002534:	68d2      	ldr	r2, [r2, #12]
 8002536:	4311      	orrs	r1, r2
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	6812      	ldr	r2, [r2, #0]
 800253c:	430b      	orrs	r3, r1
 800253e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695a      	ldr	r2, [r3, #20]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0201 	orr.w	r2, r2, #1
 800256a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2220      	movs	r2, #32
 8002576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	3710      	adds	r7, #16
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	000186a0 	.word	0x000186a0
 8002598:	001e847f 	.word	0x001e847f
 800259c:	003d08ff 	.word	0x003d08ff
 80025a0:	431bde83 	.word	0x431bde83
 80025a4:	10624dd3 	.word	0x10624dd3

080025a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af02      	add	r7, sp, #8
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	4608      	mov	r0, r1
 80025b2:	4611      	mov	r1, r2
 80025b4:	461a      	mov	r2, r3
 80025b6:	4603      	mov	r3, r0
 80025b8:	817b      	strh	r3, [r7, #10]
 80025ba:	460b      	mov	r3, r1
 80025bc:	813b      	strh	r3, [r7, #8]
 80025be:	4613      	mov	r3, r2
 80025c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025c2:	f7ff fbc3 	bl	8001d4c <HAL_GetTick>
 80025c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b20      	cmp	r3, #32
 80025d2:	f040 80d9 	bne.w	8002788 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	2319      	movs	r3, #25
 80025dc:	2201      	movs	r2, #1
 80025de:	496d      	ldr	r1, [pc, #436]	; (8002794 <HAL_I2C_Mem_Write+0x1ec>)
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f000 fc7f 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80025ec:	2302      	movs	r3, #2
 80025ee:	e0cc      	b.n	800278a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d101      	bne.n	80025fe <HAL_I2C_Mem_Write+0x56>
 80025fa:	2302      	movs	r3, #2
 80025fc:	e0c5      	b.n	800278a <HAL_I2C_Mem_Write+0x1e2>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b01      	cmp	r3, #1
 8002612:	d007      	beq.n	8002624 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002632:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2221      	movs	r2, #33	; 0x21
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2240      	movs	r2, #64	; 0x40
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6a3a      	ldr	r2, [r7, #32]
 800264e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002654:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265a:	b29a      	uxth	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4a4d      	ldr	r2, [pc, #308]	; (8002798 <HAL_I2C_Mem_Write+0x1f0>)
 8002664:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002666:	88f8      	ldrh	r0, [r7, #6]
 8002668:	893a      	ldrh	r2, [r7, #8]
 800266a:	8979      	ldrh	r1, [r7, #10]
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	9301      	str	r3, [sp, #4]
 8002670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002672:	9300      	str	r3, [sp, #0]
 8002674:	4603      	mov	r3, r0
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f000 fab6 	bl	8002be8 <I2C_RequestMemoryWrite>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d052      	beq.n	8002728 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e081      	b.n	800278a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 fd00 	bl	8003090 <I2C_WaitOnTXEFlagUntilTimeout>
 8002690:	4603      	mov	r3, r0
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00d      	beq.n	80026b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	2b04      	cmp	r3, #4
 800269c:	d107      	bne.n	80026ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e06b      	b.n	800278a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	781a      	ldrb	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c2:	1c5a      	adds	r2, r3, #1
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026cc:	3b01      	subs	r3, #1
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d8:	b29b      	uxth	r3, r3
 80026da:	3b01      	subs	r3, #1
 80026dc:	b29a      	uxth	r2, r3
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	2b04      	cmp	r3, #4
 80026ee:	d11b      	bne.n	8002728 <HAL_I2C_Mem_Write+0x180>
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d017      	beq.n	8002728 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	781a      	ldrb	r2, [r3, #0]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	1c5a      	adds	r2, r3, #1
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271e:	b29b      	uxth	r3, r3
 8002720:	3b01      	subs	r3, #1
 8002722:	b29a      	uxth	r2, r3
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1aa      	bne.n	8002686 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f000 fcec 	bl	8003112 <I2C_WaitOnBTFFlagUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d00d      	beq.n	800275c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	2b04      	cmp	r3, #4
 8002746:	d107      	bne.n	8002758 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002756:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e016      	b.n	800278a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800276a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2220      	movs	r2, #32
 8002770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	e000      	b.n	800278a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002788:	2302      	movs	r3, #2
  }
}
 800278a:	4618      	mov	r0, r3
 800278c:	3718      	adds	r7, #24
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	00100002 	.word	0x00100002
 8002798:	ffff0000 	.word	0xffff0000

0800279c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08c      	sub	sp, #48	; 0x30
 80027a0:	af02      	add	r7, sp, #8
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	4608      	mov	r0, r1
 80027a6:	4611      	mov	r1, r2
 80027a8:	461a      	mov	r2, r3
 80027aa:	4603      	mov	r3, r0
 80027ac:	817b      	strh	r3, [r7, #10]
 80027ae:	460b      	mov	r3, r1
 80027b0:	813b      	strh	r3, [r7, #8]
 80027b2:	4613      	mov	r3, r2
 80027b4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80027b6:	f7ff fac9 	bl	8001d4c <HAL_GetTick>
 80027ba:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c2:	b2db      	uxtb	r3, r3
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	f040 8208 	bne.w	8002bda <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2319      	movs	r3, #25
 80027d0:	2201      	movs	r2, #1
 80027d2:	497b      	ldr	r1, [pc, #492]	; (80029c0 <HAL_I2C_Mem_Read+0x224>)
 80027d4:	68f8      	ldr	r0, [r7, #12]
 80027d6:	f000 fb85 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d001      	beq.n	80027e4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80027e0:	2302      	movs	r3, #2
 80027e2:	e1fb      	b.n	8002bdc <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_I2C_Mem_Read+0x56>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e1f4      	b.n	8002bdc <HAL_I2C_Mem_Read+0x440>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0301 	and.w	r3, r3, #1
 8002804:	2b01      	cmp	r3, #1
 8002806:	d007      	beq.n	8002818 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002826:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2222      	movs	r2, #34	; 0x22
 800282c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2240      	movs	r2, #64	; 0x40
 8002834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002842:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002848:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	4a5b      	ldr	r2, [pc, #364]	; (80029c4 <HAL_I2C_Mem_Read+0x228>)
 8002858:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800285a:	88f8      	ldrh	r0, [r7, #6]
 800285c:	893a      	ldrh	r2, [r7, #8]
 800285e:	8979      	ldrh	r1, [r7, #10]
 8002860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	4603      	mov	r3, r0
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f000 fa52 	bl	8002d14 <I2C_RequestMemoryRead>
 8002870:	4603      	mov	r3, r0
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e1b0      	b.n	8002bdc <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287e:	2b00      	cmp	r3, #0
 8002880:	d113      	bne.n	80028aa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002882:	2300      	movs	r3, #0
 8002884:	623b      	str	r3, [r7, #32]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	623b      	str	r3, [r7, #32]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	623b      	str	r3, [r7, #32]
 8002896:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	681a      	ldr	r2, [r3, #0]
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	e184      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d11b      	bne.n	80028ea <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e6:	601a      	str	r2, [r3, #0]
 80028e8:	e164      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d11b      	bne.n	800292a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002900:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002910:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002912:	2300      	movs	r3, #0
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	695b      	ldr	r3, [r3, #20]
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	61bb      	str	r3, [r7, #24]
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	e144      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800292a:	2300      	movs	r3, #0
 800292c:	617b      	str	r3, [r7, #20]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	695b      	ldr	r3, [r3, #20]
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	617b      	str	r3, [r7, #20]
 800293e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002940:	e138      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002946:	2b03      	cmp	r3, #3
 8002948:	f200 80f1 	bhi.w	8002b2e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002950:	2b01      	cmp	r3, #1
 8002952:	d123      	bne.n	800299c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002956:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f000 fc1b 	bl	8003194 <I2C_WaitOnRXNEFlagUntilTimeout>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d001      	beq.n	8002968 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e139      	b.n	8002bdc <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	691a      	ldr	r2, [r3, #16]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	b2d2      	uxtb	r2, r2
 8002974:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	1c5a      	adds	r2, r3, #1
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002984:	3b01      	subs	r3, #1
 8002986:	b29a      	uxth	r2, r3
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002990:	b29b      	uxth	r3, r3
 8002992:	3b01      	subs	r3, #1
 8002994:	b29a      	uxth	r2, r3
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	855a      	strh	r2, [r3, #42]	; 0x2a
 800299a:	e10b      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029a0:	2b02      	cmp	r3, #2
 80029a2:	d14e      	bne.n	8002a42 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a6:	9300      	str	r3, [sp, #0]
 80029a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029aa:	2200      	movs	r2, #0
 80029ac:	4906      	ldr	r1, [pc, #24]	; (80029c8 <HAL_I2C_Mem_Read+0x22c>)
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 fa98 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e10e      	b.n	8002bdc <HAL_I2C_Mem_Read+0x440>
 80029be:	bf00      	nop
 80029c0:	00100002 	.word	0x00100002
 80029c4:	ffff0000 	.word	0xffff0000
 80029c8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	691a      	ldr	r2, [r3, #16]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a40:	e0b8      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a48:	2200      	movs	r2, #0
 8002a4a:	4966      	ldr	r1, [pc, #408]	; (8002be4 <HAL_I2C_Mem_Read+0x448>)
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 fa49 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002a52:	4603      	mov	r3, r0
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d001      	beq.n	8002a5c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0bf      	b.n	8002bdc <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681a      	ldr	r2, [r3, #0]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691a      	ldr	r2, [r3, #16]
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a76:	b2d2      	uxtb	r2, r2
 8002a78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	1c5a      	adds	r2, r3, #1
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	3b01      	subs	r3, #1
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	494f      	ldr	r1, [pc, #316]	; (8002be4 <HAL_I2C_Mem_Read+0x448>)
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 fa1b 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e091      	b.n	8002bdc <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681a      	ldr	r2, [r3, #0]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691a      	ldr	r2, [r3, #16]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	691a      	ldr	r2, [r3, #16]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b04:	b2d2      	uxtb	r2, r2
 8002b06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	1c5a      	adds	r2, r3, #1
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b16:	3b01      	subs	r3, #1
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	3b01      	subs	r3, #1
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b2c:	e042      	b.n	8002bb4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b32:	68f8      	ldr	r0, [r7, #12]
 8002b34:	f000 fb2e 	bl	8003194 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d001      	beq.n	8002b42 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e04c      	b.n	8002bdc <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	695b      	ldr	r3, [r3, #20]
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	2b04      	cmp	r3, #4
 8002b80:	d118      	bne.n	8002bb4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	691a      	ldr	r2, [r3, #16]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	b29a      	uxth	r2, r3
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	3b01      	subs	r3, #1
 8002bae:	b29a      	uxth	r2, r3
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f47f aec2 	bne.w	8002942 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	2220      	movs	r2, #32
 8002bc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	e000      	b.n	8002bdc <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002bda:	2302      	movs	r3, #2
  }
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3728      	adds	r7, #40	; 0x28
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	00010004 	.word	0x00010004

08002be8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af02      	add	r7, sp, #8
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	4608      	mov	r0, r1
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	817b      	strh	r3, [r7, #10]
 8002bfa:	460b      	mov	r3, r1
 8002bfc:	813b      	strh	r3, [r7, #8]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c14:	9300      	str	r3, [sp, #0]
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f960 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00d      	beq.n	8002c46 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c38:	d103      	bne.n	8002c42 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c42:	2303      	movs	r3, #3
 8002c44:	e05f      	b.n	8002d06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c46:	897b      	ldrh	r3, [r7, #10]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	6a3a      	ldr	r2, [r7, #32]
 8002c5a:	492d      	ldr	r1, [pc, #180]	; (8002d10 <I2C_RequestMemoryWrite+0x128>)
 8002c5c:	68f8      	ldr	r0, [r7, #12]
 8002c5e:	f000 f998 	bl	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d001      	beq.n	8002c6c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e04c      	b.n	8002d06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	617b      	str	r3, [r7, #20]
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c84:	6a39      	ldr	r1, [r7, #32]
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f000 fa02 	bl	8003090 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d00d      	beq.n	8002cae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	2b04      	cmp	r3, #4
 8002c98:	d107      	bne.n	8002caa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ca8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e02b      	b.n	8002d06 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cae:	88fb      	ldrh	r3, [r7, #6]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d105      	bne.n	8002cc0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cb4:	893b      	ldrh	r3, [r7, #8]
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	611a      	str	r2, [r3, #16]
 8002cbe:	e021      	b.n	8002d04 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002cc0:	893b      	ldrh	r3, [r7, #8]
 8002cc2:	0a1b      	lsrs	r3, r3, #8
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cd0:	6a39      	ldr	r1, [r7, #32]
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f9dc 	bl	8003090 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00d      	beq.n	8002cfa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	2b04      	cmp	r3, #4
 8002ce4:	d107      	bne.n	8002cf6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e005      	b.n	8002d06 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cfa:	893b      	ldrh	r3, [r7, #8]
 8002cfc:	b2da      	uxtb	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	00010002 	.word	0x00010002

08002d14 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b088      	sub	sp, #32
 8002d18:	af02      	add	r7, sp, #8
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	4608      	mov	r0, r1
 8002d1e:	4611      	mov	r1, r2
 8002d20:	461a      	mov	r2, r3
 8002d22:	4603      	mov	r3, r0
 8002d24:	817b      	strh	r3, [r7, #10]
 8002d26:	460b      	mov	r3, r1
 8002d28:	813b      	strh	r3, [r7, #8]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d3c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d4c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d50:	9300      	str	r3, [sp, #0]
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	2200      	movs	r2, #0
 8002d56:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f8c2 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00d      	beq.n	8002d82 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d74:	d103      	bne.n	8002d7e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d7c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e0aa      	b.n	8002ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d82:	897b      	ldrh	r3, [r7, #10]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	461a      	mov	r2, r3
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d90:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	6a3a      	ldr	r2, [r7, #32]
 8002d96:	4952      	ldr	r1, [pc, #328]	; (8002ee0 <I2C_RequestMemoryRead+0x1cc>)
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 f8fa 	bl	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e097      	b.n	8002ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	617b      	str	r3, [r7, #20]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	617b      	str	r3, [r7, #20]
 8002dbc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002dbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dc0:	6a39      	ldr	r1, [r7, #32]
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 f964 	bl	8003090 <I2C_WaitOnTXEFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d00d      	beq.n	8002dea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	d107      	bne.n	8002de6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e076      	b.n	8002ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d105      	bne.n	8002dfc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002df0:	893b      	ldrh	r3, [r7, #8]
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	611a      	str	r2, [r3, #16]
 8002dfa:	e021      	b.n	8002e40 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002dfc:	893b      	ldrh	r3, [r7, #8]
 8002dfe:	0a1b      	lsrs	r3, r3, #8
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	b2da      	uxtb	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e0c:	6a39      	ldr	r1, [r7, #32]
 8002e0e:	68f8      	ldr	r0, [r7, #12]
 8002e10:	f000 f93e 	bl	8003090 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e14:	4603      	mov	r3, r0
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00d      	beq.n	8002e36 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d107      	bne.n	8002e32 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e30:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e050      	b.n	8002ed8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e36:	893b      	ldrh	r3, [r7, #8]
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e42:	6a39      	ldr	r1, [r7, #32]
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 f923 	bl	8003090 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d00d      	beq.n	8002e6c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d107      	bne.n	8002e68 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e66:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	e035      	b.n	8002ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681a      	ldr	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e7a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7e:	9300      	str	r3, [sp, #0]
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 f82b 	bl	8002ee4 <I2C_WaitOnFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00d      	beq.n	8002eb0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea2:	d103      	bne.n	8002eac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eaa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e013      	b.n	8002ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002eb0:	897b      	ldrh	r3, [r7, #10]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f043 0301 	orr.w	r3, r3, #1
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec2:	6a3a      	ldr	r2, [r7, #32]
 8002ec4:	4906      	ldr	r1, [pc, #24]	; (8002ee0 <I2C_RequestMemoryRead+0x1cc>)
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f000 f863 	bl	8002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e000      	b.n	8002ed8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3718      	adds	r7, #24
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	00010002 	.word	0x00010002

08002ee4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b084      	sub	sp, #16
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ef4:	e025      	b.n	8002f42 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002efc:	d021      	beq.n	8002f42 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002efe:	f7fe ff25 	bl	8001d4c <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d302      	bcc.n	8002f14 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d116      	bne.n	8002f42 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2220      	movs	r2, #32
 8002f1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f043 0220 	orr.w	r2, r3, #32
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e023      	b.n	8002f8a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	0c1b      	lsrs	r3, r3, #16
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d10d      	bne.n	8002f68 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	43da      	mvns	r2, r3
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	4013      	ands	r3, r2
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bf0c      	ite	eq
 8002f5e:	2301      	moveq	r3, #1
 8002f60:	2300      	movne	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	e00c      	b.n	8002f82 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	43da      	mvns	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4013      	ands	r3, r2
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bf0c      	ite	eq
 8002f7a:	2301      	moveq	r3, #1
 8002f7c:	2300      	movne	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	461a      	mov	r2, r3
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d0b6      	beq.n	8002ef6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	60f8      	str	r0, [r7, #12]
 8002f9a:	60b9      	str	r1, [r7, #8]
 8002f9c:	607a      	str	r2, [r7, #4]
 8002f9e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002fa0:	e051      	b.n	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695b      	ldr	r3, [r3, #20]
 8002fa8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fb0:	d123      	bne.n	8002ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f043 0204 	orr.w	r2, r3, #4
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e046      	b.n	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003000:	d021      	beq.n	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003002:	f7fe fea3 	bl	8001d4c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	429a      	cmp	r2, r3
 8003010:	d302      	bcc.n	8003018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d116      	bne.n	8003046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2220      	movs	r2, #32
 8003022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f043 0220 	orr.w	r2, r3, #32
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e020      	b.n	8003088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	0c1b      	lsrs	r3, r3, #16
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b01      	cmp	r3, #1
 800304e:	d10c      	bne.n	800306a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	43da      	mvns	r2, r3
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4013      	ands	r3, r2
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	bf14      	ite	ne
 8003062:	2301      	movne	r3, #1
 8003064:	2300      	moveq	r3, #0
 8003066:	b2db      	uxtb	r3, r3
 8003068:	e00b      	b.n	8003082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	43da      	mvns	r2, r3
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	4013      	ands	r3, r2
 8003076:	b29b      	uxth	r3, r3
 8003078:	2b00      	cmp	r3, #0
 800307a:	bf14      	ite	ne
 800307c:	2301      	movne	r3, #1
 800307e:	2300      	moveq	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d18d      	bne.n	8002fa2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3710      	adds	r7, #16
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800309c:	e02d      	b.n	80030fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f8ce 	bl	8003240 <I2C_IsAcknowledgeFailed>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d001      	beq.n	80030ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e02d      	b.n	800310a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d021      	beq.n	80030fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b6:	f7fe fe49 	bl	8001d4c <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d302      	bcc.n	80030cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d116      	bne.n	80030fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f043 0220 	orr.w	r2, r3, #32
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e007      	b.n	800310a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003104:	2b80      	cmp	r3, #128	; 0x80
 8003106:	d1ca      	bne.n	800309e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3710      	adds	r7, #16
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b084      	sub	sp, #16
 8003116:	af00      	add	r7, sp, #0
 8003118:	60f8      	str	r0, [r7, #12]
 800311a:	60b9      	str	r1, [r7, #8]
 800311c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800311e:	e02d      	b.n	800317c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f88d 	bl	8003240 <I2C_IsAcknowledgeFailed>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e02d      	b.n	800318c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003136:	d021      	beq.n	800317c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003138:	f7fe fe08 	bl	8001d4c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	68ba      	ldr	r2, [r7, #8]
 8003144:	429a      	cmp	r2, r3
 8003146:	d302      	bcc.n	800314e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d116      	bne.n	800317c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	2200      	movs	r2, #0
 8003152:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	f043 0220 	orr.w	r2, r3, #32
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	e007      	b.n	800318c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 0304 	and.w	r3, r3, #4
 8003186:	2b04      	cmp	r3, #4
 8003188:	d1ca      	bne.n	8003120 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80031a0:	e042      	b.n	8003228 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	f003 0310 	and.w	r3, r3, #16
 80031ac:	2b10      	cmp	r3, #16
 80031ae:	d119      	bne.n	80031e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0210 	mvn.w	r2, #16
 80031b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031e0:	2301      	movs	r3, #1
 80031e2:	e029      	b.n	8003238 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031e4:	f7fe fdb2 	bl	8001d4c <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	68ba      	ldr	r2, [r7, #8]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d302      	bcc.n	80031fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d116      	bne.n	8003228 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2200      	movs	r2, #0
 80031fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f043 0220 	orr.w	r2, r3, #32
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e007      	b.n	8003238 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003232:	2b40      	cmp	r3, #64	; 0x40
 8003234:	d1b5      	bne.n	80031a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3710      	adds	r7, #16
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}

08003240 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003256:	d11b      	bne.n	8003290 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003260:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327c:	f043 0204 	orr.w	r2, r3, #4
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e000      	b.n	8003292 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr

0800329c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e31d      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032ae:	4b94      	ldr	r3, [pc, #592]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 030c 	and.w	r3, r3, #12
 80032b6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032b8:	4b91      	ldr	r3, [pc, #580]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c0:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d07b      	beq.n	80033c6 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d006      	beq.n	80032e2 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	2b0c      	cmp	r3, #12
 80032d8:	d10f      	bne.n	80032fa <HAL_RCC_OscConfig+0x5e>
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e0:	d10b      	bne.n	80032fa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e2:	4b87      	ldr	r3, [pc, #540]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d06a      	beq.n	80033c4 <HAL_RCC_OscConfig+0x128>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d166      	bne.n	80033c4 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e2f7      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d106      	bne.n	8003310 <HAL_RCC_OscConfig+0x74>
 8003302:	4b7f      	ldr	r3, [pc, #508]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a7e      	ldr	r2, [pc, #504]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 8003308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	e02d      	b.n	800336c <HAL_RCC_OscConfig+0xd0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10c      	bne.n	8003332 <HAL_RCC_OscConfig+0x96>
 8003318:	4b79      	ldr	r3, [pc, #484]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a78      	ldr	r2, [pc, #480]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 800331e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003322:	6013      	str	r3, [r2, #0]
 8003324:	4b76      	ldr	r3, [pc, #472]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a75      	ldr	r2, [pc, #468]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 800332a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800332e:	6013      	str	r3, [r2, #0]
 8003330:	e01c      	b.n	800336c <HAL_RCC_OscConfig+0xd0>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b05      	cmp	r3, #5
 8003338:	d10c      	bne.n	8003354 <HAL_RCC_OscConfig+0xb8>
 800333a:	4b71      	ldr	r3, [pc, #452]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a70      	ldr	r2, [pc, #448]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 8003340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	4b6e      	ldr	r3, [pc, #440]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a6d      	ldr	r2, [pc, #436]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 800334c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	e00b      	b.n	800336c <HAL_RCC_OscConfig+0xd0>
 8003354:	4b6a      	ldr	r3, [pc, #424]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a69      	ldr	r2, [pc, #420]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 800335a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	4b67      	ldr	r3, [pc, #412]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a66      	ldr	r2, [pc, #408]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 8003366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800336a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d013      	beq.n	800339c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003374:	f7fe fcea 	bl	8001d4c <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800337c:	f7fe fce6 	bl	8001d4c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b64      	cmp	r3, #100	; 0x64
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e2ad      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800338e:	4b5c      	ldr	r3, [pc, #368]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d0f0      	beq.n	800337c <HAL_RCC_OscConfig+0xe0>
 800339a:	e014      	b.n	80033c6 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339c:	f7fe fcd6 	bl	8001d4c <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033a4:	f7fe fcd2 	bl	8001d4c <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b64      	cmp	r3, #100	; 0x64
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e299      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80033b6:	4b52      	ldr	r3, [pc, #328]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1f0      	bne.n	80033a4 <HAL_RCC_OscConfig+0x108>
 80033c2:	e000      	b.n	80033c6 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d05a      	beq.n	8003488 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	2b0c      	cmp	r3, #12
 80033dc:	d119      	bne.n	8003412 <HAL_RCC_OscConfig+0x176>
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d116      	bne.n	8003412 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033e4:	4b46      	ldr	r3, [pc, #280]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_OscConfig+0x160>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d001      	beq.n	80033fc <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e276      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fc:	4b40      	ldr	r3, [pc, #256]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	021b      	lsls	r3, r3, #8
 800340a:	493d      	ldr	r1, [pc, #244]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003410:	e03a      	b.n	8003488 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d020      	beq.n	800345c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800341a:	4b3a      	ldr	r3, [pc, #232]	; (8003504 <HAL_RCC_OscConfig+0x268>)
 800341c:	2201      	movs	r2, #1
 800341e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003420:	f7fe fc94 	bl	8001d4c <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003428:	f7fe fc90 	bl	8001d4c <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e257      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800343a:	4b31      	ldr	r3, [pc, #196]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d0f0      	beq.n	8003428 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003446:	4b2e      	ldr	r3, [pc, #184]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	691b      	ldr	r3, [r3, #16]
 8003452:	021b      	lsls	r3, r3, #8
 8003454:	492a      	ldr	r1, [pc, #168]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 8003456:	4313      	orrs	r3, r2
 8003458:	604b      	str	r3, [r1, #4]
 800345a:	e015      	b.n	8003488 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800345c:	4b29      	ldr	r3, [pc, #164]	; (8003504 <HAL_RCC_OscConfig+0x268>)
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003462:	f7fe fc73 	bl	8001d4c <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800346a:	f7fe fc6f 	bl	8001d4c <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e236      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800347c:	4b20      	ldr	r3, [pc, #128]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1f0      	bne.n	800346a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b00      	cmp	r3, #0
 8003492:	f000 80b8 	beq.w	8003606 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d170      	bne.n	800357e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800349c:	4b18      	ldr	r3, [pc, #96]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d005      	beq.n	80034b4 <HAL_RCC_OscConfig+0x218>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	699b      	ldr	r3, [r3, #24]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e21a      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6a1a      	ldr	r2, [r3, #32]
 80034b8:	4b11      	ldr	r3, [pc, #68]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d921      	bls.n	8003508 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f000 fc23 	bl	8003d14 <RCC_SetFlashLatencyFromMSIRange>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e208      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034d8:	4b09      	ldr	r3, [pc, #36]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	4906      	ldr	r1, [pc, #24]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	061b      	lsls	r3, r3, #24
 80034f8:	4901      	ldr	r1, [pc, #4]	; (8003500 <HAL_RCC_OscConfig+0x264>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	604b      	str	r3, [r1, #4]
 80034fe:	e020      	b.n	8003542 <HAL_RCC_OscConfig+0x2a6>
 8003500:	40023800 	.word	0x40023800
 8003504:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003508:	4ba4      	ldr	r3, [pc, #656]	; (800379c <HAL_RCC_OscConfig+0x500>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a1b      	ldr	r3, [r3, #32]
 8003514:	49a1      	ldr	r1, [pc, #644]	; (800379c <HAL_RCC_OscConfig+0x500>)
 8003516:	4313      	orrs	r3, r2
 8003518:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800351a:	4ba0      	ldr	r3, [pc, #640]	; (800379c <HAL_RCC_OscConfig+0x500>)
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	061b      	lsls	r3, r3, #24
 8003528:	499c      	ldr	r1, [pc, #624]	; (800379c <HAL_RCC_OscConfig+0x500>)
 800352a:	4313      	orrs	r3, r2
 800352c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a1b      	ldr	r3, [r3, #32]
 8003532:	4618      	mov	r0, r3
 8003534:	f000 fbee 	bl	8003d14 <RCC_SetFlashLatencyFromMSIRange>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e1d3      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a1b      	ldr	r3, [r3, #32]
 8003546:	0b5b      	lsrs	r3, r3, #13
 8003548:	3301      	adds	r3, #1
 800354a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003552:	4a92      	ldr	r2, [pc, #584]	; (800379c <HAL_RCC_OscConfig+0x500>)
 8003554:	6892      	ldr	r2, [r2, #8]
 8003556:	0912      	lsrs	r2, r2, #4
 8003558:	f002 020f 	and.w	r2, r2, #15
 800355c:	4990      	ldr	r1, [pc, #576]	; (80037a0 <HAL_RCC_OscConfig+0x504>)
 800355e:	5c8a      	ldrb	r2, [r1, r2]
 8003560:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003562:	4a90      	ldr	r2, [pc, #576]	; (80037a4 <HAL_RCC_OscConfig+0x508>)
 8003564:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003566:	4b90      	ldr	r3, [pc, #576]	; (80037a8 <HAL_RCC_OscConfig+0x50c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe fba2 	bl	8001cb4 <HAL_InitTick>
 8003570:	4603      	mov	r3, r0
 8003572:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003574:	7bfb      	ldrb	r3, [r7, #15]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d045      	beq.n	8003606 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800357a:	7bfb      	ldrb	r3, [r7, #15]
 800357c:	e1b5      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d029      	beq.n	80035da <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003586:	4b89      	ldr	r3, [pc, #548]	; (80037ac <HAL_RCC_OscConfig+0x510>)
 8003588:	2201      	movs	r2, #1
 800358a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358c:	f7fe fbde 	bl	8001d4c <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003594:	f7fe fbda 	bl	8001d4c <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e1a1      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80035a6:	4b7d      	ldr	r3, [pc, #500]	; (800379c <HAL_RCC_OscConfig+0x500>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d0f0      	beq.n	8003594 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035b2:	4b7a      	ldr	r3, [pc, #488]	; (800379c <HAL_RCC_OscConfig+0x500>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	4977      	ldr	r1, [pc, #476]	; (800379c <HAL_RCC_OscConfig+0x500>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035c4:	4b75      	ldr	r3, [pc, #468]	; (800379c <HAL_RCC_OscConfig+0x500>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	69db      	ldr	r3, [r3, #28]
 80035d0:	061b      	lsls	r3, r3, #24
 80035d2:	4972      	ldr	r1, [pc, #456]	; (800379c <HAL_RCC_OscConfig+0x500>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	604b      	str	r3, [r1, #4]
 80035d8:	e015      	b.n	8003606 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80035da:	4b74      	ldr	r3, [pc, #464]	; (80037ac <HAL_RCC_OscConfig+0x510>)
 80035dc:	2200      	movs	r2, #0
 80035de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e0:	f7fe fbb4 	bl	8001d4c <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80035e8:	f7fe fbb0 	bl	8001d4c <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e177      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80035fa:	4b68      	ldr	r3, [pc, #416]	; (800379c <HAL_RCC_OscConfig+0x500>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1f0      	bne.n	80035e8 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d030      	beq.n	8003674 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d016      	beq.n	8003648 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361a:	4b65      	ldr	r3, [pc, #404]	; (80037b0 <HAL_RCC_OscConfig+0x514>)
 800361c:	2201      	movs	r2, #1
 800361e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003620:	f7fe fb94 	bl	8001d4c <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003628:	f7fe fb90 	bl	8001d4c <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e157      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800363a:	4b58      	ldr	r3, [pc, #352]	; (800379c <HAL_RCC_OscConfig+0x500>)
 800363c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0x38c>
 8003646:	e015      	b.n	8003674 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003648:	4b59      	ldr	r3, [pc, #356]	; (80037b0 <HAL_RCC_OscConfig+0x514>)
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800364e:	f7fe fb7d 	bl	8001d4c <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003656:	f7fe fb79 	bl	8001d4c <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e140      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003668:	4b4c      	ldr	r3, [pc, #304]	; (800379c <HAL_RCC_OscConfig+0x500>)
 800366a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1f0      	bne.n	8003656 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0304 	and.w	r3, r3, #4
 800367c:	2b00      	cmp	r3, #0
 800367e:	f000 80b5 	beq.w	80037ec <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003682:	2300      	movs	r3, #0
 8003684:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003686:	4b45      	ldr	r3, [pc, #276]	; (800379c <HAL_RCC_OscConfig+0x500>)
 8003688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d10d      	bne.n	80036ae <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003692:	4b42      	ldr	r3, [pc, #264]	; (800379c <HAL_RCC_OscConfig+0x500>)
 8003694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003696:	4a41      	ldr	r2, [pc, #260]	; (800379c <HAL_RCC_OscConfig+0x500>)
 8003698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369c:	6253      	str	r3, [r2, #36]	; 0x24
 800369e:	4b3f      	ldr	r3, [pc, #252]	; (800379c <HAL_RCC_OscConfig+0x500>)
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a6:	60bb      	str	r3, [r7, #8]
 80036a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036aa:	2301      	movs	r3, #1
 80036ac:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ae:	4b41      	ldr	r3, [pc, #260]	; (80037b4 <HAL_RCC_OscConfig+0x518>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d118      	bne.n	80036ec <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036ba:	4b3e      	ldr	r3, [pc, #248]	; (80037b4 <HAL_RCC_OscConfig+0x518>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a3d      	ldr	r2, [pc, #244]	; (80037b4 <HAL_RCC_OscConfig+0x518>)
 80036c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c6:	f7fe fb41 	bl	8001d4c <HAL_GetTick>
 80036ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036cc:	e008      	b.n	80036e0 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ce:	f7fe fb3d 	bl	8001d4c <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b64      	cmp	r3, #100	; 0x64
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e104      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e0:	4b34      	ldr	r3, [pc, #208]	; (80037b4 <HAL_RCC_OscConfig+0x518>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0f0      	beq.n	80036ce <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d106      	bne.n	8003702 <HAL_RCC_OscConfig+0x466>
 80036f4:	4b29      	ldr	r3, [pc, #164]	; (800379c <HAL_RCC_OscConfig+0x500>)
 80036f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f8:	4a28      	ldr	r2, [pc, #160]	; (800379c <HAL_RCC_OscConfig+0x500>)
 80036fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036fe:	6353      	str	r3, [r2, #52]	; 0x34
 8003700:	e02d      	b.n	800375e <HAL_RCC_OscConfig+0x4c2>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10c      	bne.n	8003724 <HAL_RCC_OscConfig+0x488>
 800370a:	4b24      	ldr	r3, [pc, #144]	; (800379c <HAL_RCC_OscConfig+0x500>)
 800370c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370e:	4a23      	ldr	r2, [pc, #140]	; (800379c <HAL_RCC_OscConfig+0x500>)
 8003710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003714:	6353      	str	r3, [r2, #52]	; 0x34
 8003716:	4b21      	ldr	r3, [pc, #132]	; (800379c <HAL_RCC_OscConfig+0x500>)
 8003718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800371a:	4a20      	ldr	r2, [pc, #128]	; (800379c <HAL_RCC_OscConfig+0x500>)
 800371c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003720:	6353      	str	r3, [r2, #52]	; 0x34
 8003722:	e01c      	b.n	800375e <HAL_RCC_OscConfig+0x4c2>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b05      	cmp	r3, #5
 800372a:	d10c      	bne.n	8003746 <HAL_RCC_OscConfig+0x4aa>
 800372c:	4b1b      	ldr	r3, [pc, #108]	; (800379c <HAL_RCC_OscConfig+0x500>)
 800372e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003730:	4a1a      	ldr	r2, [pc, #104]	; (800379c <HAL_RCC_OscConfig+0x500>)
 8003732:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003736:	6353      	str	r3, [r2, #52]	; 0x34
 8003738:	4b18      	ldr	r3, [pc, #96]	; (800379c <HAL_RCC_OscConfig+0x500>)
 800373a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373c:	4a17      	ldr	r2, [pc, #92]	; (800379c <HAL_RCC_OscConfig+0x500>)
 800373e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003742:	6353      	str	r3, [r2, #52]	; 0x34
 8003744:	e00b      	b.n	800375e <HAL_RCC_OscConfig+0x4c2>
 8003746:	4b15      	ldr	r3, [pc, #84]	; (800379c <HAL_RCC_OscConfig+0x500>)
 8003748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800374a:	4a14      	ldr	r2, [pc, #80]	; (800379c <HAL_RCC_OscConfig+0x500>)
 800374c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003750:	6353      	str	r3, [r2, #52]	; 0x34
 8003752:	4b12      	ldr	r3, [pc, #72]	; (800379c <HAL_RCC_OscConfig+0x500>)
 8003754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003756:	4a11      	ldr	r2, [pc, #68]	; (800379c <HAL_RCC_OscConfig+0x500>)
 8003758:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800375c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d015      	beq.n	8003792 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003766:	f7fe faf1 	bl	8001d4c <HAL_GetTick>
 800376a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800376c:	e00a      	b.n	8003784 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800376e:	f7fe faed 	bl	8001d4c <HAL_GetTick>
 8003772:	4602      	mov	r2, r0
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	1ad3      	subs	r3, r2, r3
 8003778:	f241 3288 	movw	r2, #5000	; 0x1388
 800377c:	4293      	cmp	r3, r2
 800377e:	d901      	bls.n	8003784 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e0b2      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003784:	4b05      	ldr	r3, [pc, #20]	; (800379c <HAL_RCC_OscConfig+0x500>)
 8003786:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003788:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ee      	beq.n	800376e <HAL_RCC_OscConfig+0x4d2>
 8003790:	e023      	b.n	80037da <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003792:	f7fe fadb 	bl	8001d4c <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003798:	e019      	b.n	80037ce <HAL_RCC_OscConfig+0x532>
 800379a:	bf00      	nop
 800379c:	40023800 	.word	0x40023800
 80037a0:	080071b4 	.word	0x080071b4
 80037a4:	20000010 	.word	0x20000010
 80037a8:	20000014 	.word	0x20000014
 80037ac:	42470020 	.word	0x42470020
 80037b0:	42470680 	.word	0x42470680
 80037b4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037b8:	f7fe fac8 	bl	8001d4c <HAL_GetTick>
 80037bc:	4602      	mov	r2, r0
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	1ad3      	subs	r3, r2, r3
 80037c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e08d      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037ce:	4b49      	ldr	r3, [pc, #292]	; (80038f4 <HAL_RCC_OscConfig+0x658>)
 80037d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1ee      	bne.n	80037b8 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80037da:	7ffb      	ldrb	r3, [r7, #31]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d105      	bne.n	80037ec <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037e0:	4b44      	ldr	r3, [pc, #272]	; (80038f4 <HAL_RCC_OscConfig+0x658>)
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	4a43      	ldr	r2, [pc, #268]	; (80038f4 <HAL_RCC_OscConfig+0x658>)
 80037e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ea:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d079      	beq.n	80038e8 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2b0c      	cmp	r3, #12
 80037f8:	d056      	beq.n	80038a8 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fe:	2b02      	cmp	r3, #2
 8003800:	d13b      	bne.n	800387a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003802:	4b3d      	ldr	r3, [pc, #244]	; (80038f8 <HAL_RCC_OscConfig+0x65c>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003808:	f7fe faa0 	bl	8001d4c <HAL_GetTick>
 800380c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800380e:	e008      	b.n	8003822 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003810:	f7fe fa9c 	bl	8001d4c <HAL_GetTick>
 8003814:	4602      	mov	r2, r0
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e063      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003822:	4b34      	ldr	r3, [pc, #208]	; (80038f4 <HAL_RCC_OscConfig+0x658>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382a:	2b00      	cmp	r3, #0
 800382c:	d1f0      	bne.n	8003810 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800382e:	4b31      	ldr	r3, [pc, #196]	; (80038f4 <HAL_RCC_OscConfig+0x658>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	4319      	orrs	r1, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	430b      	orrs	r3, r1
 8003846:	492b      	ldr	r1, [pc, #172]	; (80038f4 <HAL_RCC_OscConfig+0x658>)
 8003848:	4313      	orrs	r3, r2
 800384a:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800384c:	4b2a      	ldr	r3, [pc, #168]	; (80038f8 <HAL_RCC_OscConfig+0x65c>)
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003852:	f7fe fa7b 	bl	8001d4c <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800385a:	f7fe fa77 	bl	8001d4c <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e03e      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800386c:	4b21      	ldr	r3, [pc, #132]	; (80038f4 <HAL_RCC_OscConfig+0x658>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x5be>
 8003878:	e036      	b.n	80038e8 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800387a:	4b1f      	ldr	r3, [pc, #124]	; (80038f8 <HAL_RCC_OscConfig+0x65c>)
 800387c:	2200      	movs	r2, #0
 800387e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7fe fa64 	bl	8001d4c <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003888:	f7fe fa60 	bl	8001d4c <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e027      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800389a:	4b16      	ldr	r3, [pc, #88]	; (80038f4 <HAL_RCC_OscConfig+0x658>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1f0      	bne.n	8003888 <HAL_RCC_OscConfig+0x5ec>
 80038a6:	e01f      	b.n	80038e8 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e01a      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038b4:	4b0f      	ldr	r3, [pc, #60]	; (80038f4 <HAL_RCC_OscConfig+0x658>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d10d      	bne.n	80038e4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d106      	bne.n	80038e4 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d001      	beq.n	80038e8 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3720      	adds	r7, #32
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	40023800 	.word	0x40023800
 80038f8:	42470060 	.word	0x42470060

080038fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b084      	sub	sp, #16
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d101      	bne.n	8003910 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e11a      	b.n	8003b46 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003910:	4b8f      	ldr	r3, [pc, #572]	; (8003b50 <HAL_RCC_ClockConfig+0x254>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f003 0301 	and.w	r3, r3, #1
 8003918:	683a      	ldr	r2, [r7, #0]
 800391a:	429a      	cmp	r2, r3
 800391c:	d919      	bls.n	8003952 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d105      	bne.n	8003930 <HAL_RCC_ClockConfig+0x34>
 8003924:	4b8a      	ldr	r3, [pc, #552]	; (8003b50 <HAL_RCC_ClockConfig+0x254>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a89      	ldr	r2, [pc, #548]	; (8003b50 <HAL_RCC_ClockConfig+0x254>)
 800392a:	f043 0304 	orr.w	r3, r3, #4
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	4b87      	ldr	r3, [pc, #540]	; (8003b50 <HAL_RCC_ClockConfig+0x254>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f023 0201 	bic.w	r2, r3, #1
 8003938:	4985      	ldr	r1, [pc, #532]	; (8003b50 <HAL_RCC_ClockConfig+0x254>)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	4313      	orrs	r3, r2
 800393e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003940:	4b83      	ldr	r3, [pc, #524]	; (8003b50 <HAL_RCC_ClockConfig+0x254>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	683a      	ldr	r2, [r7, #0]
 800394a:	429a      	cmp	r2, r3
 800394c:	d001      	beq.n	8003952 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	e0f9      	b.n	8003b46 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d008      	beq.n	8003970 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800395e:	4b7d      	ldr	r3, [pc, #500]	; (8003b54 <HAL_RCC_ClockConfig+0x258>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	497a      	ldr	r1, [pc, #488]	; (8003b54 <HAL_RCC_ClockConfig+0x258>)
 800396c:	4313      	orrs	r3, r2
 800396e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f003 0301 	and.w	r3, r3, #1
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 808e 	beq.w	8003a9a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d107      	bne.n	8003996 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003986:	4b73      	ldr	r3, [pc, #460]	; (8003b54 <HAL_RCC_ClockConfig+0x258>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d121      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e0d7      	b.n	8003b46 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	2b03      	cmp	r3, #3
 800399c:	d107      	bne.n	80039ae <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800399e:	4b6d      	ldr	r3, [pc, #436]	; (8003b54 <HAL_RCC_ClockConfig+0x258>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d115      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e0cb      	b.n	8003b46 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d107      	bne.n	80039c6 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039b6:	4b67      	ldr	r3, [pc, #412]	; (8003b54 <HAL_RCC_ClockConfig+0x258>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 0302 	and.w	r3, r3, #2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d109      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e0bf      	b.n	8003b46 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80039c6:	4b63      	ldr	r3, [pc, #396]	; (8003b54 <HAL_RCC_ClockConfig+0x258>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80039d2:	2301      	movs	r3, #1
 80039d4:	e0b7      	b.n	8003b46 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039d6:	4b5f      	ldr	r3, [pc, #380]	; (8003b54 <HAL_RCC_ClockConfig+0x258>)
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	f023 0203 	bic.w	r2, r3, #3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	495c      	ldr	r1, [pc, #368]	; (8003b54 <HAL_RCC_ClockConfig+0x258>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e8:	f7fe f9b0 	bl	8001d4c <HAL_GetTick>
 80039ec:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	2b02      	cmp	r3, #2
 80039f4:	d112      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80039f6:	e00a      	b.n	8003a0e <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f8:	f7fe f9a8 	bl	8001d4c <HAL_GetTick>
 80039fc:	4602      	mov	r2, r0
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	1ad3      	subs	r3, r2, r3
 8003a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e09b      	b.n	8003b46 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a0e:	4b51      	ldr	r3, [pc, #324]	; (8003b54 <HAL_RCC_ClockConfig+0x258>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	2b08      	cmp	r3, #8
 8003a18:	d1ee      	bne.n	80039f8 <HAL_RCC_ClockConfig+0xfc>
 8003a1a:	e03e      	b.n	8003a9a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d112      	bne.n	8003a4a <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a24:	e00a      	b.n	8003a3c <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a26:	f7fe f991 	bl	8001d4c <HAL_GetTick>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	1ad3      	subs	r3, r2, r3
 8003a30:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d901      	bls.n	8003a3c <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e084      	b.n	8003b46 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a3c:	4b45      	ldr	r3, [pc, #276]	; (8003b54 <HAL_RCC_ClockConfig+0x258>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	f003 030c 	and.w	r3, r3, #12
 8003a44:	2b0c      	cmp	r3, #12
 8003a46:	d1ee      	bne.n	8003a26 <HAL_RCC_ClockConfig+0x12a>
 8003a48:	e027      	b.n	8003a9a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d11d      	bne.n	8003a8e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a52:	e00a      	b.n	8003a6a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a54:	f7fe f97a 	bl	8001d4c <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d901      	bls.n	8003a6a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e06d      	b.n	8003b46 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a6a:	4b3a      	ldr	r3, [pc, #232]	; (8003b54 <HAL_RCC_ClockConfig+0x258>)
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 030c 	and.w	r3, r3, #12
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d1ee      	bne.n	8003a54 <HAL_RCC_ClockConfig+0x158>
 8003a76:	e010      	b.n	8003a9a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a78:	f7fe f968 	bl	8001d4c <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	1ad3      	subs	r3, r2, r3
 8003a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d901      	bls.n	8003a8e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e05b      	b.n	8003b46 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a8e:	4b31      	ldr	r3, [pc, #196]	; (8003b54 <HAL_RCC_ClockConfig+0x258>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 030c 	and.w	r3, r3, #12
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1ee      	bne.n	8003a78 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a9a:	4b2d      	ldr	r3, [pc, #180]	; (8003b50 <HAL_RCC_ClockConfig+0x254>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d219      	bcs.n	8003adc <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d105      	bne.n	8003aba <HAL_RCC_ClockConfig+0x1be>
 8003aae:	4b28      	ldr	r3, [pc, #160]	; (8003b50 <HAL_RCC_ClockConfig+0x254>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a27      	ldr	r2, [pc, #156]	; (8003b50 <HAL_RCC_ClockConfig+0x254>)
 8003ab4:	f043 0304 	orr.w	r3, r3, #4
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	4b25      	ldr	r3, [pc, #148]	; (8003b50 <HAL_RCC_ClockConfig+0x254>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f023 0201 	bic.w	r2, r3, #1
 8003ac2:	4923      	ldr	r1, [pc, #140]	; (8003b50 <HAL_RCC_ClockConfig+0x254>)
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aca:	4b21      	ldr	r3, [pc, #132]	; (8003b50 <HAL_RCC_ClockConfig+0x254>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	683a      	ldr	r2, [r7, #0]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d001      	beq.n	8003adc <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e034      	b.n	8003b46 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d008      	beq.n	8003afa <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ae8:	4b1a      	ldr	r3, [pc, #104]	; (8003b54 <HAL_RCC_ClockConfig+0x258>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4917      	ldr	r1, [pc, #92]	; (8003b54 <HAL_RCC_ClockConfig+0x258>)
 8003af6:	4313      	orrs	r3, r2
 8003af8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d009      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b06:	4b13      	ldr	r3, [pc, #76]	; (8003b54 <HAL_RCC_ClockConfig+0x258>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	00db      	lsls	r3, r3, #3
 8003b14:	490f      	ldr	r1, [pc, #60]	; (8003b54 <HAL_RCC_ClockConfig+0x258>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b1a:	f000 f823 	bl	8003b64 <HAL_RCC_GetSysClockFreq>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	4b0c      	ldr	r3, [pc, #48]	; (8003b54 <HAL_RCC_ClockConfig+0x258>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	091b      	lsrs	r3, r3, #4
 8003b26:	f003 030f 	and.w	r3, r3, #15
 8003b2a:	490b      	ldr	r1, [pc, #44]	; (8003b58 <HAL_RCC_ClockConfig+0x25c>)
 8003b2c:	5ccb      	ldrb	r3, [r1, r3]
 8003b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b32:	4a0a      	ldr	r2, [pc, #40]	; (8003b5c <HAL_RCC_ClockConfig+0x260>)
 8003b34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b36:	4b0a      	ldr	r3, [pc, #40]	; (8003b60 <HAL_RCC_ClockConfig+0x264>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7fe f8ba 	bl	8001cb4 <HAL_InitTick>
 8003b40:	4603      	mov	r3, r0
 8003b42:	72fb      	strb	r3, [r7, #11]

  return status;
 8003b44:	7afb      	ldrb	r3, [r7, #11]
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40023c00 	.word	0x40023c00
 8003b54:	40023800 	.word	0x40023800
 8003b58:	080071b4 	.word	0x080071b4
 8003b5c:	20000010 	.word	0x20000010
 8003b60:	20000014 	.word	0x20000014

08003b64 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b64:	b5b0      	push	{r4, r5, r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003b6a:	4b4d      	ldr	r3, [pc, #308]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f003 030c 	and.w	r3, r3, #12
 8003b76:	2b0c      	cmp	r3, #12
 8003b78:	d00c      	beq.n	8003b94 <HAL_RCC_GetSysClockFreq+0x30>
 8003b7a:	2b0c      	cmp	r3, #12
 8003b7c:	d87c      	bhi.n	8003c78 <HAL_RCC_GetSysClockFreq+0x114>
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d002      	beq.n	8003b88 <HAL_RCC_GetSysClockFreq+0x24>
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	d003      	beq.n	8003b8e <HAL_RCC_GetSysClockFreq+0x2a>
 8003b86:	e077      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b88:	4b46      	ldr	r3, [pc, #280]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x140>)
 8003b8a:	613b      	str	r3, [r7, #16]
      break;
 8003b8c:	e082      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b8e:	4b46      	ldr	r3, [pc, #280]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x144>)
 8003b90:	613b      	str	r3, [r7, #16]
      break;
 8003b92:	e07f      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	0c9b      	lsrs	r3, r3, #18
 8003b98:	f003 030f 	and.w	r3, r3, #15
 8003b9c:	4a43      	ldr	r2, [pc, #268]	; (8003cac <HAL_RCC_GetSysClockFreq+0x148>)
 8003b9e:	5cd3      	ldrb	r3, [r2, r3]
 8003ba0:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	0d9b      	lsrs	r3, r3, #22
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	3301      	adds	r3, #1
 8003bac:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bae:	4b3c      	ldr	r3, [pc, #240]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01a      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	4939      	ldr	r1, [pc, #228]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x144>)
 8003bc4:	fb01 f003 	mul.w	r0, r1, r3
 8003bc8:	2100      	movs	r1, #0
 8003bca:	fb01 f102 	mul.w	r1, r1, r2
 8003bce:	1844      	adds	r4, r0, r1
 8003bd0:	4935      	ldr	r1, [pc, #212]	; (8003ca8 <HAL_RCC_GetSysClockFreq+0x144>)
 8003bd2:	fba2 0101 	umull	r0, r1, r2, r1
 8003bd6:	1863      	adds	r3, r4, r1
 8003bd8:	4619      	mov	r1, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	f7fc ffc9 	bl	8000b78 <__aeabi_uldivmod>
 8003be6:	4602      	mov	r2, r0
 8003be8:	460b      	mov	r3, r1
 8003bea:	4613      	mov	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	e040      	b.n	8003c72 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	461c      	mov	r4, r3
 8003bf4:	f04f 0500 	mov.w	r5, #0
 8003bf8:	4620      	mov	r0, r4
 8003bfa:	4629      	mov	r1, r5
 8003bfc:	f04f 0200 	mov.w	r2, #0
 8003c00:	f04f 0300 	mov.w	r3, #0
 8003c04:	014b      	lsls	r3, r1, #5
 8003c06:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c0a:	0142      	lsls	r2, r0, #5
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	4619      	mov	r1, r3
 8003c10:	1b00      	subs	r0, r0, r4
 8003c12:	eb61 0105 	sbc.w	r1, r1, r5
 8003c16:	f04f 0200 	mov.w	r2, #0
 8003c1a:	f04f 0300 	mov.w	r3, #0
 8003c1e:	018b      	lsls	r3, r1, #6
 8003c20:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c24:	0182      	lsls	r2, r0, #6
 8003c26:	1a12      	subs	r2, r2, r0
 8003c28:	eb63 0301 	sbc.w	r3, r3, r1
 8003c2c:	f04f 0000 	mov.w	r0, #0
 8003c30:	f04f 0100 	mov.w	r1, #0
 8003c34:	00d9      	lsls	r1, r3, #3
 8003c36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c3a:	00d0      	lsls	r0, r2, #3
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	1912      	adds	r2, r2, r4
 8003c42:	eb45 0303 	adc.w	r3, r5, r3
 8003c46:	f04f 0000 	mov.w	r0, #0
 8003c4a:	f04f 0100 	mov.w	r1, #0
 8003c4e:	0299      	lsls	r1, r3, #10
 8003c50:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c54:	0290      	lsls	r0, r2, #10
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4610      	mov	r0, r2
 8003c5c:	4619      	mov	r1, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	461a      	mov	r2, r3
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	f7fc ff87 	bl	8000b78 <__aeabi_uldivmod>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	4613      	mov	r3, r2
 8003c70:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	613b      	str	r3, [r7, #16]
      break;
 8003c76:	e00d      	b.n	8003c94 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003c78:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	0b5b      	lsrs	r3, r3, #13
 8003c7e:	f003 0307 	and.w	r3, r3, #7
 8003c82:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	3301      	adds	r3, #1
 8003c88:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	613b      	str	r3, [r7, #16]
      break;
 8003c92:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c94:	693b      	ldr	r3, [r7, #16]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	00f42400 	.word	0x00f42400
 8003ca8:	016e3600 	.word	0x016e3600
 8003cac:	080071a8 	.word	0x080071a8

08003cb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb4:	4b02      	ldr	r3, [pc, #8]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bc80      	pop	{r7}
 8003cbe:	4770      	bx	lr
 8003cc0:	20000010 	.word	0x20000010

08003cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cc8:	f7ff fff2 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	0a1b      	lsrs	r3, r3, #8
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4903      	ldr	r1, [pc, #12]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	080071c4 	.word	0x080071c4

08003cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cf0:	f7ff ffde 	bl	8003cb0 <HAL_RCC_GetHCLKFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	0adb      	lsrs	r3, r3, #11
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	4903      	ldr	r1, [pc, #12]	; (8003d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	080071c4 	.word	0x080071c4

08003d14 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b087      	sub	sp, #28
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003d20:	4b29      	ldr	r3, [pc, #164]	; (8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d12c      	bne.n	8003d86 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d2c:	4b26      	ldr	r3, [pc, #152]	; (8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d005      	beq.n	8003d44 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003d38:	4b24      	ldr	r3, [pc, #144]	; (8003dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	e016      	b.n	8003d72 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d44:	4b20      	ldr	r3, [pc, #128]	; (8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	4a1f      	ldr	r2, [pc, #124]	; (8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d4e:	6253      	str	r3, [r2, #36]	; 0x24
 8003d50:	4b1d      	ldr	r3, [pc, #116]	; (8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003d5c:	4b1b      	ldr	r3, [pc, #108]	; (8003dcc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003d64:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d66:	4b18      	ldr	r3, [pc, #96]	; (8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	4a17      	ldr	r2, [pc, #92]	; (8003dc8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003d6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d70:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003d78:	d105      	bne.n	8003d86 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d80:	d101      	bne.n	8003d86 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003d82:	2301      	movs	r3, #1
 8003d84:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d105      	bne.n	8003d98 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003d8c:	4b10      	ldr	r3, [pc, #64]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a0f      	ldr	r2, [pc, #60]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d92:	f043 0304 	orr.w	r3, r3, #4
 8003d96:	6013      	str	r3, [r2, #0]
 8003d98:	4b0d      	ldr	r3, [pc, #52]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f023 0201 	bic.w	r2, r3, #1
 8003da0:	490b      	ldr	r1, [pc, #44]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003da8:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d001      	beq.n	8003dba <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003dba:	2300      	movs	r3, #0
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	371c      	adds	r7, #28
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bc80      	pop	{r7}
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40023800 	.word	0x40023800
 8003dcc:	40007000 	.word	0x40007000
 8003dd0:	40023c00 	.word	0x40023c00

08003dd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e031      	b.n	8003e4a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fd fe32 	bl	8001a64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3304      	adds	r3, #4
 8003e10:	4619      	mov	r1, r3
 8003e12:	4610      	mov	r0, r2
 8003e14:	f000 fa5a 	bl	80042cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2201      	movs	r2, #1
 8003e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d001      	beq.n	8003e6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e03a      	b.n	8003ee2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f042 0201 	orr.w	r2, r2, #1
 8003e82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8c:	d00e      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x58>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a16      	ldr	r2, [pc, #88]	; (8003eec <HAL_TIM_Base_Start_IT+0x98>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d009      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x58>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a14      	ldr	r2, [pc, #80]	; (8003ef0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d004      	beq.n	8003eac <HAL_TIM_Base_Start_IT+0x58>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a13      	ldr	r2, [pc, #76]	; (8003ef4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d111      	bne.n	8003ed0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2b06      	cmp	r3, #6
 8003ebc:	d010      	beq.n	8003ee0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f042 0201 	orr.w	r2, r2, #1
 8003ecc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ece:	e007      	b.n	8003ee0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bc80      	pop	{r7}
 8003eea:	4770      	bx	lr
 8003eec:	40000400 	.word	0x40000400
 8003ef0:	40000800 	.word	0x40000800
 8003ef4:	40010800 	.word	0x40010800

08003ef8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68da      	ldr	r2, [r3, #12]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0201 	bic.w	r2, r2, #1
 8003f0e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6a1a      	ldr	r2, [r3, #32]
 8003f16:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d107      	bne.n	8003f30 <HAL_TIM_Base_Stop_IT+0x38>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 0201 	bic.w	r2, r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bc80      	pop	{r7}
 8003f42:	4770      	bx	lr

08003f44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d122      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f003 0302 	and.w	r3, r3, #2
 8003f64:	2b02      	cmp	r3, #2
 8003f66:	d11b      	bne.n	8003fa0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f06f 0202 	mvn.w	r2, #2
 8003f70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2201      	movs	r2, #1
 8003f76:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	f003 0303 	and.w	r3, r3, #3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f985 	bl	8004296 <HAL_TIM_IC_CaptureCallback>
 8003f8c:	e005      	b.n	8003f9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f8e:	6878      	ldr	r0, [r7, #4]
 8003f90:	f000 f978 	bl	8004284 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f000 f987 	bl	80042a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	691b      	ldr	r3, [r3, #16]
 8003fa6:	f003 0304 	and.w	r3, r3, #4
 8003faa:	2b04      	cmp	r3, #4
 8003fac:	d122      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d11b      	bne.n	8003ff4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0204 	mvn.w	r2, #4
 8003fc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 f95b 	bl	8004296 <HAL_TIM_IC_CaptureCallback>
 8003fe0:	e005      	b.n	8003fee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f94e 	bl	8004284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f95d 	bl	80042a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d122      	bne.n	8004048 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	68db      	ldr	r3, [r3, #12]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b08      	cmp	r3, #8
 800400e:	d11b      	bne.n	8004048 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f06f 0208 	mvn.w	r2, #8
 8004018:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2204      	movs	r2, #4
 800401e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	69db      	ldr	r3, [r3, #28]
 8004026:	f003 0303 	and.w	r3, r3, #3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f931 	bl	8004296 <HAL_TIM_IC_CaptureCallback>
 8004034:	e005      	b.n	8004042 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f000 f924 	bl	8004284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f000 f933 	bl	80042a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	f003 0310 	and.w	r3, r3, #16
 8004052:	2b10      	cmp	r3, #16
 8004054:	d122      	bne.n	800409c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	68db      	ldr	r3, [r3, #12]
 800405c:	f003 0310 	and.w	r3, r3, #16
 8004060:	2b10      	cmp	r3, #16
 8004062:	d11b      	bne.n	800409c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f06f 0210 	mvn.w	r2, #16
 800406c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2208      	movs	r2, #8
 8004072:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	69db      	ldr	r3, [r3, #28]
 800407a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f907 	bl	8004296 <HAL_TIM_IC_CaptureCallback>
 8004088:	e005      	b.n	8004096 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 f8fa 	bl	8004284 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004090:	6878      	ldr	r0, [r7, #4]
 8004092:	f000 f909 	bl	80042a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2200      	movs	r2, #0
 800409a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691b      	ldr	r3, [r3, #16]
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d10e      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68db      	ldr	r3, [r3, #12]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d107      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f06f 0201 	mvn.w	r2, #1
 80040c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f7fd f990 	bl	80013e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d2:	2b40      	cmp	r3, #64	; 0x40
 80040d4:	d10e      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e0:	2b40      	cmp	r3, #64	; 0x40
 80040e2:	d107      	bne.n	80040f4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f8e3 	bl	80042ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040f4:	bf00      	nop
 80040f6:	3708      	adds	r7, #8
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800410c:	2b01      	cmp	r3, #1
 800410e:	d101      	bne.n	8004114 <HAL_TIM_ConfigClockSource+0x18>
 8004110:	2302      	movs	r3, #2
 8004112:	e0b3      	b.n	800427c <HAL_TIM_ConfigClockSource+0x180>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004132:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800413a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800414c:	d03e      	beq.n	80041cc <HAL_TIM_ConfigClockSource+0xd0>
 800414e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004152:	f200 8087 	bhi.w	8004264 <HAL_TIM_ConfigClockSource+0x168>
 8004156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800415a:	f000 8085 	beq.w	8004268 <HAL_TIM_ConfigClockSource+0x16c>
 800415e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004162:	d87f      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
 8004164:	2b70      	cmp	r3, #112	; 0x70
 8004166:	d01a      	beq.n	800419e <HAL_TIM_ConfigClockSource+0xa2>
 8004168:	2b70      	cmp	r3, #112	; 0x70
 800416a:	d87b      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
 800416c:	2b60      	cmp	r3, #96	; 0x60
 800416e:	d050      	beq.n	8004212 <HAL_TIM_ConfigClockSource+0x116>
 8004170:	2b60      	cmp	r3, #96	; 0x60
 8004172:	d877      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
 8004174:	2b50      	cmp	r3, #80	; 0x50
 8004176:	d03c      	beq.n	80041f2 <HAL_TIM_ConfigClockSource+0xf6>
 8004178:	2b50      	cmp	r3, #80	; 0x50
 800417a:	d873      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
 800417c:	2b40      	cmp	r3, #64	; 0x40
 800417e:	d058      	beq.n	8004232 <HAL_TIM_ConfigClockSource+0x136>
 8004180:	2b40      	cmp	r3, #64	; 0x40
 8004182:	d86f      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
 8004184:	2b30      	cmp	r3, #48	; 0x30
 8004186:	d064      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x156>
 8004188:	2b30      	cmp	r3, #48	; 0x30
 800418a:	d86b      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
 800418c:	2b20      	cmp	r3, #32
 800418e:	d060      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x156>
 8004190:	2b20      	cmp	r3, #32
 8004192:	d867      	bhi.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
 8004194:	2b00      	cmp	r3, #0
 8004196:	d05c      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x156>
 8004198:	2b10      	cmp	r3, #16
 800419a:	d05a      	beq.n	8004252 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800419c:	e062      	b.n	8004264 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6818      	ldr	r0, [r3, #0]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	6899      	ldr	r1, [r3, #8]
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	68db      	ldr	r3, [r3, #12]
 80041ae:	f000 f974 	bl	800449a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041c0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	609a      	str	r2, [r3, #8]
      break;
 80041ca:	e04e      	b.n	800426a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6818      	ldr	r0, [r3, #0]
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	6899      	ldr	r1, [r3, #8]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f000 f95d 	bl	800449a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041ee:	609a      	str	r2, [r3, #8]
      break;
 80041f0:	e03b      	b.n	800426a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6818      	ldr	r0, [r3, #0]
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	6859      	ldr	r1, [r3, #4]
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	461a      	mov	r2, r3
 8004200:	f000 f8d4 	bl	80043ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2150      	movs	r1, #80	; 0x50
 800420a:	4618      	mov	r0, r3
 800420c:	f000 f92b 	bl	8004466 <TIM_ITRx_SetConfig>
      break;
 8004210:	e02b      	b.n	800426a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6818      	ldr	r0, [r3, #0]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	6859      	ldr	r1, [r3, #4]
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	461a      	mov	r2, r3
 8004220:	f000 f8f2 	bl	8004408 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2160      	movs	r1, #96	; 0x60
 800422a:	4618      	mov	r0, r3
 800422c:	f000 f91b 	bl	8004466 <TIM_ITRx_SetConfig>
      break;
 8004230:	e01b      	b.n	800426a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6818      	ldr	r0, [r3, #0]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	6859      	ldr	r1, [r3, #4]
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	461a      	mov	r2, r3
 8004240:	f000 f8b4 	bl	80043ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2140      	movs	r1, #64	; 0x40
 800424a:	4618      	mov	r0, r3
 800424c:	f000 f90b 	bl	8004466 <TIM_ITRx_SetConfig>
      break;
 8004250:	e00b      	b.n	800426a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4619      	mov	r1, r3
 800425c:	4610      	mov	r0, r2
 800425e:	f000 f902 	bl	8004466 <TIM_ITRx_SetConfig>
        break;
 8004262:	e002      	b.n	800426a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004264:	bf00      	nop
 8004266:	e000      	b.n	800426a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004268:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2201      	movs	r2, #1
 800426e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3710      	adds	r7, #16
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr

08004296 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004296:	b480      	push	{r7}
 8004298:	b083      	sub	sp, #12
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bc80      	pop	{r7}
 80042a6:	4770      	bx	lr

080042a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bc80      	pop	{r7}
 80042b8:	4770      	bx	lr

080042ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b083      	sub	sp, #12
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042c2:	bf00      	nop
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bc80      	pop	{r7}
 80042ca:	4770      	bx	lr

080042cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042e2:	d00f      	beq.n	8004304 <TIM_Base_SetConfig+0x38>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a2b      	ldr	r2, [pc, #172]	; (8004394 <TIM_Base_SetConfig+0xc8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d00b      	beq.n	8004304 <TIM_Base_SetConfig+0x38>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	4a2a      	ldr	r2, [pc, #168]	; (8004398 <TIM_Base_SetConfig+0xcc>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d007      	beq.n	8004304 <TIM_Base_SetConfig+0x38>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a29      	ldr	r2, [pc, #164]	; (800439c <TIM_Base_SetConfig+0xd0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d003      	beq.n	8004304 <TIM_Base_SetConfig+0x38>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a28      	ldr	r2, [pc, #160]	; (80043a0 <TIM_Base_SetConfig+0xd4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d108      	bne.n	8004316 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	68fa      	ldr	r2, [r7, #12]
 8004312:	4313      	orrs	r3, r2
 8004314:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431c:	d017      	beq.n	800434e <TIM_Base_SetConfig+0x82>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a1c      	ldr	r2, [pc, #112]	; (8004394 <TIM_Base_SetConfig+0xc8>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d013      	beq.n	800434e <TIM_Base_SetConfig+0x82>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a1b      	ldr	r2, [pc, #108]	; (8004398 <TIM_Base_SetConfig+0xcc>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d00f      	beq.n	800434e <TIM_Base_SetConfig+0x82>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a1a      	ldr	r2, [pc, #104]	; (800439c <TIM_Base_SetConfig+0xd0>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d00b      	beq.n	800434e <TIM_Base_SetConfig+0x82>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a19      	ldr	r2, [pc, #100]	; (80043a0 <TIM_Base_SetConfig+0xd4>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d007      	beq.n	800434e <TIM_Base_SetConfig+0x82>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a18      	ldr	r2, [pc, #96]	; (80043a4 <TIM_Base_SetConfig+0xd8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d003      	beq.n	800434e <TIM_Base_SetConfig+0x82>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a17      	ldr	r2, [pc, #92]	; (80043a8 <TIM_Base_SetConfig+0xdc>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d108      	bne.n	8004360 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004354:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	4313      	orrs	r3, r2
 800436c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	68fa      	ldr	r2, [r7, #12]
 8004372:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	689a      	ldr	r2, [r3, #8]
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	681a      	ldr	r2, [r3, #0]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	615a      	str	r2, [r3, #20]
}
 800438a:	bf00      	nop
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr
 8004394:	40000400 	.word	0x40000400
 8004398:	40000800 	.word	0x40000800
 800439c:	40000c00 	.word	0x40000c00
 80043a0:	40010800 	.word	0x40010800
 80043a4:	40010c00 	.word	0x40010c00
 80043a8:	40011000 	.word	0x40011000

080043ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b087      	sub	sp, #28
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	60f8      	str	r0, [r7, #12]
 80043b4:	60b9      	str	r1, [r7, #8]
 80043b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a1b      	ldr	r3, [r3, #32]
 80043bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	f023 0201 	bic.w	r2, r3, #1
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f023 030a 	bic.w	r3, r3, #10
 80043e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043ea:	697a      	ldr	r2, [r7, #20]
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	693a      	ldr	r2, [r7, #16]
 80043f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	697a      	ldr	r2, [r7, #20]
 80043fc:	621a      	str	r2, [r3, #32]
}
 80043fe:	bf00      	nop
 8004400:	371c      	adds	r7, #28
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr

08004408 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004408:	b480      	push	{r7}
 800440a:	b087      	sub	sp, #28
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a1b      	ldr	r3, [r3, #32]
 8004418:	f023 0210 	bic.w	r2, r3, #16
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	699b      	ldr	r3, [r3, #24]
 8004424:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004432:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	031b      	lsls	r3, r3, #12
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	4313      	orrs	r3, r2
 800443c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004444:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	011b      	lsls	r3, r3, #4
 800444a:	693a      	ldr	r2, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	621a      	str	r2, [r3, #32]
}
 800445c:	bf00      	nop
 800445e:	371c      	adds	r7, #28
 8004460:	46bd      	mov	sp, r7
 8004462:	bc80      	pop	{r7}
 8004464:	4770      	bx	lr

08004466 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004466:	b480      	push	{r7}
 8004468:	b085      	sub	sp, #20
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
 800446e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800447c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	f043 0307 	orr.w	r3, r3, #7
 8004488:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	609a      	str	r2, [r3, #8]
}
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	bc80      	pop	{r7}
 8004498:	4770      	bx	lr

0800449a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800449a:	b480      	push	{r7}
 800449c:	b087      	sub	sp, #28
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	60b9      	str	r1, [r7, #8]
 80044a4:	607a      	str	r2, [r7, #4]
 80044a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	021a      	lsls	r2, r3, #8
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	431a      	orrs	r2, r3
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	609a      	str	r2, [r3, #8]
}
 80044ce:	bf00      	nop
 80044d0:	371c      	adds	r7, #28
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bc80      	pop	{r7}
 80044d6:	4770      	bx	lr

080044d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044ec:	2302      	movs	r3, #2
 80044ee:	e046      	b.n	800457e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004516:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004532:	d00e      	beq.n	8004552 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a13      	ldr	r2, [pc, #76]	; (8004588 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d009      	beq.n	8004552 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a12      	ldr	r2, [pc, #72]	; (800458c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d004      	beq.n	8004552 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a10      	ldr	r2, [pc, #64]	; (8004590 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d10c      	bne.n	800456c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004558:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	68ba      	ldr	r2, [r7, #8]
 8004560:	4313      	orrs	r3, r2
 8004562:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800457c:	2300      	movs	r3, #0
}
 800457e:	4618      	mov	r0, r3
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr
 8004588:	40000400 	.word	0x40000400
 800458c:	40000800 	.word	0x40000800
 8004590:	40010800 	.word	0x40010800

08004594 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e03f      	b.n	8004626 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d106      	bne.n	80045c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7fd fa76 	bl	8001aac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2224      	movs	r2, #36	; 0x24
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	68da      	ldr	r2, [r3, #12]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f829 	bl	8004630 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	691a      	ldr	r2, [r3, #16]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695a      	ldr	r2, [r3, #20]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	68da      	ldr	r2, [r3, #12]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800460c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}
	...

08004630 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68da      	ldr	r2, [r3, #12]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	430a      	orrs	r2, r1
 800464c:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	431a      	orrs	r2, r3
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	69db      	ldr	r3, [r3, #28]
 8004662:	4313      	orrs	r3, r2
 8004664:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004670:	f023 030c 	bic.w	r3, r3, #12
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	6812      	ldr	r2, [r2, #0]
 8004678:	68b9      	ldr	r1, [r7, #8]
 800467a:	430b      	orrs	r3, r1
 800467c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	699a      	ldr	r2, [r3, #24]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a55      	ldr	r2, [pc, #340]	; (80047f0 <UART_SetConfig+0x1c0>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d103      	bne.n	80046a6 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800469e:	f7ff fb25 	bl	8003cec <HAL_RCC_GetPCLK2Freq>
 80046a2:	60f8      	str	r0, [r7, #12]
 80046a4:	e002      	b.n	80046ac <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80046a6:	f7ff fb0d 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 80046aa:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69db      	ldr	r3, [r3, #28]
 80046b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b4:	d14c      	bne.n	8004750 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	4613      	mov	r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	009a      	lsls	r2, r3, #2
 80046c0:	441a      	add	r2, r3
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046cc:	4a49      	ldr	r2, [pc, #292]	; (80047f4 <UART_SetConfig+0x1c4>)
 80046ce:	fba2 2303 	umull	r2, r3, r2, r3
 80046d2:	095b      	lsrs	r3, r3, #5
 80046d4:	0119      	lsls	r1, r3, #4
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4613      	mov	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	009a      	lsls	r2, r3, #2
 80046e0:	441a      	add	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80046ec:	4b41      	ldr	r3, [pc, #260]	; (80047f4 <UART_SetConfig+0x1c4>)
 80046ee:	fba3 0302 	umull	r0, r3, r3, r2
 80046f2:	095b      	lsrs	r3, r3, #5
 80046f4:	2064      	movs	r0, #100	; 0x64
 80046f6:	fb00 f303 	mul.w	r3, r0, r3
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	3332      	adds	r3, #50	; 0x32
 8004700:	4a3c      	ldr	r2, [pc, #240]	; (80047f4 <UART_SetConfig+0x1c4>)
 8004702:	fba2 2303 	umull	r2, r3, r2, r3
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	005b      	lsls	r3, r3, #1
 800470a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800470e:	4419      	add	r1, r3
 8004710:	68fa      	ldr	r2, [r7, #12]
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	009a      	lsls	r2, r3, #2
 800471a:	441a      	add	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	fbb2 f2f3 	udiv	r2, r2, r3
 8004726:	4b33      	ldr	r3, [pc, #204]	; (80047f4 <UART_SetConfig+0x1c4>)
 8004728:	fba3 0302 	umull	r0, r3, r3, r2
 800472c:	095b      	lsrs	r3, r3, #5
 800472e:	2064      	movs	r0, #100	; 0x64
 8004730:	fb00 f303 	mul.w	r3, r0, r3
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	3332      	adds	r3, #50	; 0x32
 800473a:	4a2e      	ldr	r2, [pc, #184]	; (80047f4 <UART_SetConfig+0x1c4>)
 800473c:	fba2 2303 	umull	r2, r3, r2, r3
 8004740:	095b      	lsrs	r3, r3, #5
 8004742:	f003 0207 	and.w	r2, r3, #7
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	440a      	add	r2, r1
 800474c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800474e:	e04a      	b.n	80047e6 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004750:	68fa      	ldr	r2, [r7, #12]
 8004752:	4613      	mov	r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	4413      	add	r3, r2
 8004758:	009a      	lsls	r2, r3, #2
 800475a:	441a      	add	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	fbb2 f3f3 	udiv	r3, r2, r3
 8004766:	4a23      	ldr	r2, [pc, #140]	; (80047f4 <UART_SetConfig+0x1c4>)
 8004768:	fba2 2303 	umull	r2, r3, r2, r3
 800476c:	095b      	lsrs	r3, r3, #5
 800476e:	0119      	lsls	r1, r3, #4
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	4613      	mov	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	4413      	add	r3, r2
 8004778:	009a      	lsls	r2, r3, #2
 800477a:	441a      	add	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	009b      	lsls	r3, r3, #2
 8004782:	fbb2 f2f3 	udiv	r2, r2, r3
 8004786:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <UART_SetConfig+0x1c4>)
 8004788:	fba3 0302 	umull	r0, r3, r3, r2
 800478c:	095b      	lsrs	r3, r3, #5
 800478e:	2064      	movs	r0, #100	; 0x64
 8004790:	fb00 f303 	mul.w	r3, r0, r3
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	3332      	adds	r3, #50	; 0x32
 800479a:	4a16      	ldr	r2, [pc, #88]	; (80047f4 <UART_SetConfig+0x1c4>)
 800479c:	fba2 2303 	umull	r2, r3, r2, r3
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047a6:	4419      	add	r1, r3
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	4613      	mov	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	009a      	lsls	r2, r3, #2
 80047b2:	441a      	add	r2, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80047be:	4b0d      	ldr	r3, [pc, #52]	; (80047f4 <UART_SetConfig+0x1c4>)
 80047c0:	fba3 0302 	umull	r0, r3, r3, r2
 80047c4:	095b      	lsrs	r3, r3, #5
 80047c6:	2064      	movs	r0, #100	; 0x64
 80047c8:	fb00 f303 	mul.w	r3, r0, r3
 80047cc:	1ad3      	subs	r3, r2, r3
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	3332      	adds	r3, #50	; 0x32
 80047d2:	4a08      	ldr	r2, [pc, #32]	; (80047f4 <UART_SetConfig+0x1c4>)
 80047d4:	fba2 2303 	umull	r2, r3, r2, r3
 80047d8:	095b      	lsrs	r3, r3, #5
 80047da:	f003 020f 	and.w	r2, r3, #15
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	440a      	add	r2, r1
 80047e4:	609a      	str	r2, [r3, #8]
}
 80047e6:	bf00      	nop
 80047e8:	3710      	adds	r7, #16
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	40013800 	.word	0x40013800
 80047f4:	51eb851f 	.word	0x51eb851f

080047f8 <__errno>:
 80047f8:	4b01      	ldr	r3, [pc, #4]	; (8004800 <__errno+0x8>)
 80047fa:	6818      	ldr	r0, [r3, #0]
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop
 8004800:	2000001c 	.word	0x2000001c

08004804 <__libc_init_array>:
 8004804:	b570      	push	{r4, r5, r6, lr}
 8004806:	2600      	movs	r6, #0
 8004808:	4d0c      	ldr	r5, [pc, #48]	; (800483c <__libc_init_array+0x38>)
 800480a:	4c0d      	ldr	r4, [pc, #52]	; (8004840 <__libc_init_array+0x3c>)
 800480c:	1b64      	subs	r4, r4, r5
 800480e:	10a4      	asrs	r4, r4, #2
 8004810:	42a6      	cmp	r6, r4
 8004812:	d109      	bne.n	8004828 <__libc_init_array+0x24>
 8004814:	f000 fc5c 	bl	80050d0 <_init>
 8004818:	2600      	movs	r6, #0
 800481a:	4d0a      	ldr	r5, [pc, #40]	; (8004844 <__libc_init_array+0x40>)
 800481c:	4c0a      	ldr	r4, [pc, #40]	; (8004848 <__libc_init_array+0x44>)
 800481e:	1b64      	subs	r4, r4, r5
 8004820:	10a4      	asrs	r4, r4, #2
 8004822:	42a6      	cmp	r6, r4
 8004824:	d105      	bne.n	8004832 <__libc_init_array+0x2e>
 8004826:	bd70      	pop	{r4, r5, r6, pc}
 8004828:	f855 3b04 	ldr.w	r3, [r5], #4
 800482c:	4798      	blx	r3
 800482e:	3601      	adds	r6, #1
 8004830:	e7ee      	b.n	8004810 <__libc_init_array+0xc>
 8004832:	f855 3b04 	ldr.w	r3, [r5], #4
 8004836:	4798      	blx	r3
 8004838:	3601      	adds	r6, #1
 800483a:	e7f2      	b.n	8004822 <__libc_init_array+0x1e>
 800483c:	08007208 	.word	0x08007208
 8004840:	08007208 	.word	0x08007208
 8004844:	08007208 	.word	0x08007208
 8004848:	0800720c 	.word	0x0800720c

0800484c <memcpy>:
 800484c:	440a      	add	r2, r1
 800484e:	4291      	cmp	r1, r2
 8004850:	f100 33ff 	add.w	r3, r0, #4294967295
 8004854:	d100      	bne.n	8004858 <memcpy+0xc>
 8004856:	4770      	bx	lr
 8004858:	b510      	push	{r4, lr}
 800485a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800485e:	4291      	cmp	r1, r2
 8004860:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004864:	d1f9      	bne.n	800485a <memcpy+0xe>
 8004866:	bd10      	pop	{r4, pc}

08004868 <memmove>:
 8004868:	4288      	cmp	r0, r1
 800486a:	b510      	push	{r4, lr}
 800486c:	eb01 0402 	add.w	r4, r1, r2
 8004870:	d902      	bls.n	8004878 <memmove+0x10>
 8004872:	4284      	cmp	r4, r0
 8004874:	4623      	mov	r3, r4
 8004876:	d807      	bhi.n	8004888 <memmove+0x20>
 8004878:	1e43      	subs	r3, r0, #1
 800487a:	42a1      	cmp	r1, r4
 800487c:	d008      	beq.n	8004890 <memmove+0x28>
 800487e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004882:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004886:	e7f8      	b.n	800487a <memmove+0x12>
 8004888:	4601      	mov	r1, r0
 800488a:	4402      	add	r2, r0
 800488c:	428a      	cmp	r2, r1
 800488e:	d100      	bne.n	8004892 <memmove+0x2a>
 8004890:	bd10      	pop	{r4, pc}
 8004892:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004896:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800489a:	e7f7      	b.n	800488c <memmove+0x24>

0800489c <memset>:
 800489c:	4603      	mov	r3, r0
 800489e:	4402      	add	r2, r0
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d100      	bne.n	80048a6 <memset+0xa>
 80048a4:	4770      	bx	lr
 80048a6:	f803 1b01 	strb.w	r1, [r3], #1
 80048aa:	e7f9      	b.n	80048a0 <memset+0x4>

080048ac <siprintf>:
 80048ac:	b40e      	push	{r1, r2, r3}
 80048ae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048b2:	b500      	push	{lr}
 80048b4:	b09c      	sub	sp, #112	; 0x70
 80048b6:	ab1d      	add	r3, sp, #116	; 0x74
 80048b8:	9002      	str	r0, [sp, #8]
 80048ba:	9006      	str	r0, [sp, #24]
 80048bc:	9107      	str	r1, [sp, #28]
 80048be:	9104      	str	r1, [sp, #16]
 80048c0:	4808      	ldr	r0, [pc, #32]	; (80048e4 <siprintf+0x38>)
 80048c2:	4909      	ldr	r1, [pc, #36]	; (80048e8 <siprintf+0x3c>)
 80048c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80048c8:	9105      	str	r1, [sp, #20]
 80048ca:	6800      	ldr	r0, [r0, #0]
 80048cc:	a902      	add	r1, sp, #8
 80048ce:	9301      	str	r3, [sp, #4]
 80048d0:	f000 f868 	bl	80049a4 <_svfiprintf_r>
 80048d4:	2200      	movs	r2, #0
 80048d6:	9b02      	ldr	r3, [sp, #8]
 80048d8:	701a      	strb	r2, [r3, #0]
 80048da:	b01c      	add	sp, #112	; 0x70
 80048dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80048e0:	b003      	add	sp, #12
 80048e2:	4770      	bx	lr
 80048e4:	2000001c 	.word	0x2000001c
 80048e8:	ffff0208 	.word	0xffff0208

080048ec <__ssputs_r>:
 80048ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048f0:	688e      	ldr	r6, [r1, #8]
 80048f2:	4682      	mov	sl, r0
 80048f4:	429e      	cmp	r6, r3
 80048f6:	460c      	mov	r4, r1
 80048f8:	4690      	mov	r8, r2
 80048fa:	461f      	mov	r7, r3
 80048fc:	d838      	bhi.n	8004970 <__ssputs_r+0x84>
 80048fe:	898a      	ldrh	r2, [r1, #12]
 8004900:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004904:	d032      	beq.n	800496c <__ssputs_r+0x80>
 8004906:	6825      	ldr	r5, [r4, #0]
 8004908:	6909      	ldr	r1, [r1, #16]
 800490a:	3301      	adds	r3, #1
 800490c:	eba5 0901 	sub.w	r9, r5, r1
 8004910:	6965      	ldr	r5, [r4, #20]
 8004912:	444b      	add	r3, r9
 8004914:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004918:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800491c:	106d      	asrs	r5, r5, #1
 800491e:	429d      	cmp	r5, r3
 8004920:	bf38      	it	cc
 8004922:	461d      	movcc	r5, r3
 8004924:	0553      	lsls	r3, r2, #21
 8004926:	d531      	bpl.n	800498c <__ssputs_r+0xa0>
 8004928:	4629      	mov	r1, r5
 800492a:	f000 fb2b 	bl	8004f84 <_malloc_r>
 800492e:	4606      	mov	r6, r0
 8004930:	b950      	cbnz	r0, 8004948 <__ssputs_r+0x5c>
 8004932:	230c      	movs	r3, #12
 8004934:	f04f 30ff 	mov.w	r0, #4294967295
 8004938:	f8ca 3000 	str.w	r3, [sl]
 800493c:	89a3      	ldrh	r3, [r4, #12]
 800493e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004942:	81a3      	strh	r3, [r4, #12]
 8004944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004948:	464a      	mov	r2, r9
 800494a:	6921      	ldr	r1, [r4, #16]
 800494c:	f7ff ff7e 	bl	800484c <memcpy>
 8004950:	89a3      	ldrh	r3, [r4, #12]
 8004952:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800495a:	81a3      	strh	r3, [r4, #12]
 800495c:	6126      	str	r6, [r4, #16]
 800495e:	444e      	add	r6, r9
 8004960:	6026      	str	r6, [r4, #0]
 8004962:	463e      	mov	r6, r7
 8004964:	6165      	str	r5, [r4, #20]
 8004966:	eba5 0509 	sub.w	r5, r5, r9
 800496a:	60a5      	str	r5, [r4, #8]
 800496c:	42be      	cmp	r6, r7
 800496e:	d900      	bls.n	8004972 <__ssputs_r+0x86>
 8004970:	463e      	mov	r6, r7
 8004972:	4632      	mov	r2, r6
 8004974:	4641      	mov	r1, r8
 8004976:	6820      	ldr	r0, [r4, #0]
 8004978:	f7ff ff76 	bl	8004868 <memmove>
 800497c:	68a3      	ldr	r3, [r4, #8]
 800497e:	6822      	ldr	r2, [r4, #0]
 8004980:	1b9b      	subs	r3, r3, r6
 8004982:	4432      	add	r2, r6
 8004984:	2000      	movs	r0, #0
 8004986:	60a3      	str	r3, [r4, #8]
 8004988:	6022      	str	r2, [r4, #0]
 800498a:	e7db      	b.n	8004944 <__ssputs_r+0x58>
 800498c:	462a      	mov	r2, r5
 800498e:	f000 fb53 	bl	8005038 <_realloc_r>
 8004992:	4606      	mov	r6, r0
 8004994:	2800      	cmp	r0, #0
 8004996:	d1e1      	bne.n	800495c <__ssputs_r+0x70>
 8004998:	4650      	mov	r0, sl
 800499a:	6921      	ldr	r1, [r4, #16]
 800499c:	f000 faa6 	bl	8004eec <_free_r>
 80049a0:	e7c7      	b.n	8004932 <__ssputs_r+0x46>
	...

080049a4 <_svfiprintf_r>:
 80049a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049a8:	4698      	mov	r8, r3
 80049aa:	898b      	ldrh	r3, [r1, #12]
 80049ac:	4607      	mov	r7, r0
 80049ae:	061b      	lsls	r3, r3, #24
 80049b0:	460d      	mov	r5, r1
 80049b2:	4614      	mov	r4, r2
 80049b4:	b09d      	sub	sp, #116	; 0x74
 80049b6:	d50e      	bpl.n	80049d6 <_svfiprintf_r+0x32>
 80049b8:	690b      	ldr	r3, [r1, #16]
 80049ba:	b963      	cbnz	r3, 80049d6 <_svfiprintf_r+0x32>
 80049bc:	2140      	movs	r1, #64	; 0x40
 80049be:	f000 fae1 	bl	8004f84 <_malloc_r>
 80049c2:	6028      	str	r0, [r5, #0]
 80049c4:	6128      	str	r0, [r5, #16]
 80049c6:	b920      	cbnz	r0, 80049d2 <_svfiprintf_r+0x2e>
 80049c8:	230c      	movs	r3, #12
 80049ca:	603b      	str	r3, [r7, #0]
 80049cc:	f04f 30ff 	mov.w	r0, #4294967295
 80049d0:	e0d1      	b.n	8004b76 <_svfiprintf_r+0x1d2>
 80049d2:	2340      	movs	r3, #64	; 0x40
 80049d4:	616b      	str	r3, [r5, #20]
 80049d6:	2300      	movs	r3, #0
 80049d8:	9309      	str	r3, [sp, #36]	; 0x24
 80049da:	2320      	movs	r3, #32
 80049dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049e0:	2330      	movs	r3, #48	; 0x30
 80049e2:	f04f 0901 	mov.w	r9, #1
 80049e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80049ea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004b90 <_svfiprintf_r+0x1ec>
 80049ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049f2:	4623      	mov	r3, r4
 80049f4:	469a      	mov	sl, r3
 80049f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80049fa:	b10a      	cbz	r2, 8004a00 <_svfiprintf_r+0x5c>
 80049fc:	2a25      	cmp	r2, #37	; 0x25
 80049fe:	d1f9      	bne.n	80049f4 <_svfiprintf_r+0x50>
 8004a00:	ebba 0b04 	subs.w	fp, sl, r4
 8004a04:	d00b      	beq.n	8004a1e <_svfiprintf_r+0x7a>
 8004a06:	465b      	mov	r3, fp
 8004a08:	4622      	mov	r2, r4
 8004a0a:	4629      	mov	r1, r5
 8004a0c:	4638      	mov	r0, r7
 8004a0e:	f7ff ff6d 	bl	80048ec <__ssputs_r>
 8004a12:	3001      	adds	r0, #1
 8004a14:	f000 80aa 	beq.w	8004b6c <_svfiprintf_r+0x1c8>
 8004a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a1a:	445a      	add	r2, fp
 8004a1c:	9209      	str	r2, [sp, #36]	; 0x24
 8004a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 80a2 	beq.w	8004b6c <_svfiprintf_r+0x1c8>
 8004a28:	2300      	movs	r3, #0
 8004a2a:	f04f 32ff 	mov.w	r2, #4294967295
 8004a2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a32:	f10a 0a01 	add.w	sl, sl, #1
 8004a36:	9304      	str	r3, [sp, #16]
 8004a38:	9307      	str	r3, [sp, #28]
 8004a3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a3e:	931a      	str	r3, [sp, #104]	; 0x68
 8004a40:	4654      	mov	r4, sl
 8004a42:	2205      	movs	r2, #5
 8004a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a48:	4851      	ldr	r0, [pc, #324]	; (8004b90 <_svfiprintf_r+0x1ec>)
 8004a4a:	f000 fa41 	bl	8004ed0 <memchr>
 8004a4e:	9a04      	ldr	r2, [sp, #16]
 8004a50:	b9d8      	cbnz	r0, 8004a8a <_svfiprintf_r+0xe6>
 8004a52:	06d0      	lsls	r0, r2, #27
 8004a54:	bf44      	itt	mi
 8004a56:	2320      	movmi	r3, #32
 8004a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a5c:	0711      	lsls	r1, r2, #28
 8004a5e:	bf44      	itt	mi
 8004a60:	232b      	movmi	r3, #43	; 0x2b
 8004a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004a66:	f89a 3000 	ldrb.w	r3, [sl]
 8004a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a6c:	d015      	beq.n	8004a9a <_svfiprintf_r+0xf6>
 8004a6e:	4654      	mov	r4, sl
 8004a70:	2000      	movs	r0, #0
 8004a72:	f04f 0c0a 	mov.w	ip, #10
 8004a76:	9a07      	ldr	r2, [sp, #28]
 8004a78:	4621      	mov	r1, r4
 8004a7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a7e:	3b30      	subs	r3, #48	; 0x30
 8004a80:	2b09      	cmp	r3, #9
 8004a82:	d94e      	bls.n	8004b22 <_svfiprintf_r+0x17e>
 8004a84:	b1b0      	cbz	r0, 8004ab4 <_svfiprintf_r+0x110>
 8004a86:	9207      	str	r2, [sp, #28]
 8004a88:	e014      	b.n	8004ab4 <_svfiprintf_r+0x110>
 8004a8a:	eba0 0308 	sub.w	r3, r0, r8
 8004a8e:	fa09 f303 	lsl.w	r3, r9, r3
 8004a92:	4313      	orrs	r3, r2
 8004a94:	46a2      	mov	sl, r4
 8004a96:	9304      	str	r3, [sp, #16]
 8004a98:	e7d2      	b.n	8004a40 <_svfiprintf_r+0x9c>
 8004a9a:	9b03      	ldr	r3, [sp, #12]
 8004a9c:	1d19      	adds	r1, r3, #4
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	9103      	str	r1, [sp, #12]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	bfbb      	ittet	lt
 8004aa6:	425b      	neglt	r3, r3
 8004aa8:	f042 0202 	orrlt.w	r2, r2, #2
 8004aac:	9307      	strge	r3, [sp, #28]
 8004aae:	9307      	strlt	r3, [sp, #28]
 8004ab0:	bfb8      	it	lt
 8004ab2:	9204      	strlt	r2, [sp, #16]
 8004ab4:	7823      	ldrb	r3, [r4, #0]
 8004ab6:	2b2e      	cmp	r3, #46	; 0x2e
 8004ab8:	d10c      	bne.n	8004ad4 <_svfiprintf_r+0x130>
 8004aba:	7863      	ldrb	r3, [r4, #1]
 8004abc:	2b2a      	cmp	r3, #42	; 0x2a
 8004abe:	d135      	bne.n	8004b2c <_svfiprintf_r+0x188>
 8004ac0:	9b03      	ldr	r3, [sp, #12]
 8004ac2:	3402      	adds	r4, #2
 8004ac4:	1d1a      	adds	r2, r3, #4
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	9203      	str	r2, [sp, #12]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	bfb8      	it	lt
 8004ace:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ad2:	9305      	str	r3, [sp, #20]
 8004ad4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004ba0 <_svfiprintf_r+0x1fc>
 8004ad8:	2203      	movs	r2, #3
 8004ada:	4650      	mov	r0, sl
 8004adc:	7821      	ldrb	r1, [r4, #0]
 8004ade:	f000 f9f7 	bl	8004ed0 <memchr>
 8004ae2:	b140      	cbz	r0, 8004af6 <_svfiprintf_r+0x152>
 8004ae4:	2340      	movs	r3, #64	; 0x40
 8004ae6:	eba0 000a 	sub.w	r0, r0, sl
 8004aea:	fa03 f000 	lsl.w	r0, r3, r0
 8004aee:	9b04      	ldr	r3, [sp, #16]
 8004af0:	3401      	adds	r4, #1
 8004af2:	4303      	orrs	r3, r0
 8004af4:	9304      	str	r3, [sp, #16]
 8004af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004afa:	2206      	movs	r2, #6
 8004afc:	4825      	ldr	r0, [pc, #148]	; (8004b94 <_svfiprintf_r+0x1f0>)
 8004afe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b02:	f000 f9e5 	bl	8004ed0 <memchr>
 8004b06:	2800      	cmp	r0, #0
 8004b08:	d038      	beq.n	8004b7c <_svfiprintf_r+0x1d8>
 8004b0a:	4b23      	ldr	r3, [pc, #140]	; (8004b98 <_svfiprintf_r+0x1f4>)
 8004b0c:	bb1b      	cbnz	r3, 8004b56 <_svfiprintf_r+0x1b2>
 8004b0e:	9b03      	ldr	r3, [sp, #12]
 8004b10:	3307      	adds	r3, #7
 8004b12:	f023 0307 	bic.w	r3, r3, #7
 8004b16:	3308      	adds	r3, #8
 8004b18:	9303      	str	r3, [sp, #12]
 8004b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b1c:	4433      	add	r3, r6
 8004b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b20:	e767      	b.n	80049f2 <_svfiprintf_r+0x4e>
 8004b22:	460c      	mov	r4, r1
 8004b24:	2001      	movs	r0, #1
 8004b26:	fb0c 3202 	mla	r2, ip, r2, r3
 8004b2a:	e7a5      	b.n	8004a78 <_svfiprintf_r+0xd4>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	f04f 0c0a 	mov.w	ip, #10
 8004b32:	4619      	mov	r1, r3
 8004b34:	3401      	adds	r4, #1
 8004b36:	9305      	str	r3, [sp, #20]
 8004b38:	4620      	mov	r0, r4
 8004b3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b3e:	3a30      	subs	r2, #48	; 0x30
 8004b40:	2a09      	cmp	r2, #9
 8004b42:	d903      	bls.n	8004b4c <_svfiprintf_r+0x1a8>
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0c5      	beq.n	8004ad4 <_svfiprintf_r+0x130>
 8004b48:	9105      	str	r1, [sp, #20]
 8004b4a:	e7c3      	b.n	8004ad4 <_svfiprintf_r+0x130>
 8004b4c:	4604      	mov	r4, r0
 8004b4e:	2301      	movs	r3, #1
 8004b50:	fb0c 2101 	mla	r1, ip, r1, r2
 8004b54:	e7f0      	b.n	8004b38 <_svfiprintf_r+0x194>
 8004b56:	ab03      	add	r3, sp, #12
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	462a      	mov	r2, r5
 8004b5c:	4638      	mov	r0, r7
 8004b5e:	4b0f      	ldr	r3, [pc, #60]	; (8004b9c <_svfiprintf_r+0x1f8>)
 8004b60:	a904      	add	r1, sp, #16
 8004b62:	f3af 8000 	nop.w
 8004b66:	1c42      	adds	r2, r0, #1
 8004b68:	4606      	mov	r6, r0
 8004b6a:	d1d6      	bne.n	8004b1a <_svfiprintf_r+0x176>
 8004b6c:	89ab      	ldrh	r3, [r5, #12]
 8004b6e:	065b      	lsls	r3, r3, #25
 8004b70:	f53f af2c 	bmi.w	80049cc <_svfiprintf_r+0x28>
 8004b74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b76:	b01d      	add	sp, #116	; 0x74
 8004b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b7c:	ab03      	add	r3, sp, #12
 8004b7e:	9300      	str	r3, [sp, #0]
 8004b80:	462a      	mov	r2, r5
 8004b82:	4638      	mov	r0, r7
 8004b84:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <_svfiprintf_r+0x1f8>)
 8004b86:	a904      	add	r1, sp, #16
 8004b88:	f000 f87c 	bl	8004c84 <_printf_i>
 8004b8c:	e7eb      	b.n	8004b66 <_svfiprintf_r+0x1c2>
 8004b8e:	bf00      	nop
 8004b90:	080071cc 	.word	0x080071cc
 8004b94:	080071d6 	.word	0x080071d6
 8004b98:	00000000 	.word	0x00000000
 8004b9c:	080048ed 	.word	0x080048ed
 8004ba0:	080071d2 	.word	0x080071d2

08004ba4 <_printf_common>:
 8004ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ba8:	4616      	mov	r6, r2
 8004baa:	4699      	mov	r9, r3
 8004bac:	688a      	ldr	r2, [r1, #8]
 8004bae:	690b      	ldr	r3, [r1, #16]
 8004bb0:	4607      	mov	r7, r0
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	bfb8      	it	lt
 8004bb6:	4613      	movlt	r3, r2
 8004bb8:	6033      	str	r3, [r6, #0]
 8004bba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004bbe:	460c      	mov	r4, r1
 8004bc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004bc4:	b10a      	cbz	r2, 8004bca <_printf_common+0x26>
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	6033      	str	r3, [r6, #0]
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	0699      	lsls	r1, r3, #26
 8004bce:	bf42      	ittt	mi
 8004bd0:	6833      	ldrmi	r3, [r6, #0]
 8004bd2:	3302      	addmi	r3, #2
 8004bd4:	6033      	strmi	r3, [r6, #0]
 8004bd6:	6825      	ldr	r5, [r4, #0]
 8004bd8:	f015 0506 	ands.w	r5, r5, #6
 8004bdc:	d106      	bne.n	8004bec <_printf_common+0x48>
 8004bde:	f104 0a19 	add.w	sl, r4, #25
 8004be2:	68e3      	ldr	r3, [r4, #12]
 8004be4:	6832      	ldr	r2, [r6, #0]
 8004be6:	1a9b      	subs	r3, r3, r2
 8004be8:	42ab      	cmp	r3, r5
 8004bea:	dc28      	bgt.n	8004c3e <_printf_common+0x9a>
 8004bec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004bf0:	1e13      	subs	r3, r2, #0
 8004bf2:	6822      	ldr	r2, [r4, #0]
 8004bf4:	bf18      	it	ne
 8004bf6:	2301      	movne	r3, #1
 8004bf8:	0692      	lsls	r2, r2, #26
 8004bfa:	d42d      	bmi.n	8004c58 <_printf_common+0xb4>
 8004bfc:	4649      	mov	r1, r9
 8004bfe:	4638      	mov	r0, r7
 8004c00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c04:	47c0      	blx	r8
 8004c06:	3001      	adds	r0, #1
 8004c08:	d020      	beq.n	8004c4c <_printf_common+0xa8>
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	68e5      	ldr	r5, [r4, #12]
 8004c0e:	f003 0306 	and.w	r3, r3, #6
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	bf18      	it	ne
 8004c16:	2500      	movne	r5, #0
 8004c18:	6832      	ldr	r2, [r6, #0]
 8004c1a:	f04f 0600 	mov.w	r6, #0
 8004c1e:	68a3      	ldr	r3, [r4, #8]
 8004c20:	bf08      	it	eq
 8004c22:	1aad      	subeq	r5, r5, r2
 8004c24:	6922      	ldr	r2, [r4, #16]
 8004c26:	bf08      	it	eq
 8004c28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	bfc4      	itt	gt
 8004c30:	1a9b      	subgt	r3, r3, r2
 8004c32:	18ed      	addgt	r5, r5, r3
 8004c34:	341a      	adds	r4, #26
 8004c36:	42b5      	cmp	r5, r6
 8004c38:	d11a      	bne.n	8004c70 <_printf_common+0xcc>
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	e008      	b.n	8004c50 <_printf_common+0xac>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	4652      	mov	r2, sl
 8004c42:	4649      	mov	r1, r9
 8004c44:	4638      	mov	r0, r7
 8004c46:	47c0      	blx	r8
 8004c48:	3001      	adds	r0, #1
 8004c4a:	d103      	bne.n	8004c54 <_printf_common+0xb0>
 8004c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c54:	3501      	adds	r5, #1
 8004c56:	e7c4      	b.n	8004be2 <_printf_common+0x3e>
 8004c58:	2030      	movs	r0, #48	; 0x30
 8004c5a:	18e1      	adds	r1, r4, r3
 8004c5c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c60:	1c5a      	adds	r2, r3, #1
 8004c62:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c66:	4422      	add	r2, r4
 8004c68:	3302      	adds	r3, #2
 8004c6a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c6e:	e7c5      	b.n	8004bfc <_printf_common+0x58>
 8004c70:	2301      	movs	r3, #1
 8004c72:	4622      	mov	r2, r4
 8004c74:	4649      	mov	r1, r9
 8004c76:	4638      	mov	r0, r7
 8004c78:	47c0      	blx	r8
 8004c7a:	3001      	adds	r0, #1
 8004c7c:	d0e6      	beq.n	8004c4c <_printf_common+0xa8>
 8004c7e:	3601      	adds	r6, #1
 8004c80:	e7d9      	b.n	8004c36 <_printf_common+0x92>
	...

08004c84 <_printf_i>:
 8004c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c88:	460c      	mov	r4, r1
 8004c8a:	7e27      	ldrb	r7, [r4, #24]
 8004c8c:	4691      	mov	r9, r2
 8004c8e:	2f78      	cmp	r7, #120	; 0x78
 8004c90:	4680      	mov	r8, r0
 8004c92:	469a      	mov	sl, r3
 8004c94:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004c96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c9a:	d807      	bhi.n	8004cac <_printf_i+0x28>
 8004c9c:	2f62      	cmp	r7, #98	; 0x62
 8004c9e:	d80a      	bhi.n	8004cb6 <_printf_i+0x32>
 8004ca0:	2f00      	cmp	r7, #0
 8004ca2:	f000 80d9 	beq.w	8004e58 <_printf_i+0x1d4>
 8004ca6:	2f58      	cmp	r7, #88	; 0x58
 8004ca8:	f000 80a4 	beq.w	8004df4 <_printf_i+0x170>
 8004cac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004cb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004cb4:	e03a      	b.n	8004d2c <_printf_i+0xa8>
 8004cb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004cba:	2b15      	cmp	r3, #21
 8004cbc:	d8f6      	bhi.n	8004cac <_printf_i+0x28>
 8004cbe:	a001      	add	r0, pc, #4	; (adr r0, 8004cc4 <_printf_i+0x40>)
 8004cc0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004cc4:	08004d1d 	.word	0x08004d1d
 8004cc8:	08004d31 	.word	0x08004d31
 8004ccc:	08004cad 	.word	0x08004cad
 8004cd0:	08004cad 	.word	0x08004cad
 8004cd4:	08004cad 	.word	0x08004cad
 8004cd8:	08004cad 	.word	0x08004cad
 8004cdc:	08004d31 	.word	0x08004d31
 8004ce0:	08004cad 	.word	0x08004cad
 8004ce4:	08004cad 	.word	0x08004cad
 8004ce8:	08004cad 	.word	0x08004cad
 8004cec:	08004cad 	.word	0x08004cad
 8004cf0:	08004e3f 	.word	0x08004e3f
 8004cf4:	08004d61 	.word	0x08004d61
 8004cf8:	08004e21 	.word	0x08004e21
 8004cfc:	08004cad 	.word	0x08004cad
 8004d00:	08004cad 	.word	0x08004cad
 8004d04:	08004e61 	.word	0x08004e61
 8004d08:	08004cad 	.word	0x08004cad
 8004d0c:	08004d61 	.word	0x08004d61
 8004d10:	08004cad 	.word	0x08004cad
 8004d14:	08004cad 	.word	0x08004cad
 8004d18:	08004e29 	.word	0x08004e29
 8004d1c:	680b      	ldr	r3, [r1, #0]
 8004d1e:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004d22:	1d1a      	adds	r2, r3, #4
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	600a      	str	r2, [r1, #0]
 8004d28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e0a4      	b.n	8004e7a <_printf_i+0x1f6>
 8004d30:	6825      	ldr	r5, [r4, #0]
 8004d32:	6808      	ldr	r0, [r1, #0]
 8004d34:	062e      	lsls	r6, r5, #24
 8004d36:	f100 0304 	add.w	r3, r0, #4
 8004d3a:	d50a      	bpl.n	8004d52 <_printf_i+0xce>
 8004d3c:	6805      	ldr	r5, [r0, #0]
 8004d3e:	600b      	str	r3, [r1, #0]
 8004d40:	2d00      	cmp	r5, #0
 8004d42:	da03      	bge.n	8004d4c <_printf_i+0xc8>
 8004d44:	232d      	movs	r3, #45	; 0x2d
 8004d46:	426d      	negs	r5, r5
 8004d48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d4c:	230a      	movs	r3, #10
 8004d4e:	485e      	ldr	r0, [pc, #376]	; (8004ec8 <_printf_i+0x244>)
 8004d50:	e019      	b.n	8004d86 <_printf_i+0x102>
 8004d52:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004d56:	6805      	ldr	r5, [r0, #0]
 8004d58:	600b      	str	r3, [r1, #0]
 8004d5a:	bf18      	it	ne
 8004d5c:	b22d      	sxthne	r5, r5
 8004d5e:	e7ef      	b.n	8004d40 <_printf_i+0xbc>
 8004d60:	680b      	ldr	r3, [r1, #0]
 8004d62:	6825      	ldr	r5, [r4, #0]
 8004d64:	1d18      	adds	r0, r3, #4
 8004d66:	6008      	str	r0, [r1, #0]
 8004d68:	0628      	lsls	r0, r5, #24
 8004d6a:	d501      	bpl.n	8004d70 <_printf_i+0xec>
 8004d6c:	681d      	ldr	r5, [r3, #0]
 8004d6e:	e002      	b.n	8004d76 <_printf_i+0xf2>
 8004d70:	0669      	lsls	r1, r5, #25
 8004d72:	d5fb      	bpl.n	8004d6c <_printf_i+0xe8>
 8004d74:	881d      	ldrh	r5, [r3, #0]
 8004d76:	2f6f      	cmp	r7, #111	; 0x6f
 8004d78:	bf0c      	ite	eq
 8004d7a:	2308      	moveq	r3, #8
 8004d7c:	230a      	movne	r3, #10
 8004d7e:	4852      	ldr	r0, [pc, #328]	; (8004ec8 <_printf_i+0x244>)
 8004d80:	2100      	movs	r1, #0
 8004d82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d86:	6866      	ldr	r6, [r4, #4]
 8004d88:	2e00      	cmp	r6, #0
 8004d8a:	bfa8      	it	ge
 8004d8c:	6821      	ldrge	r1, [r4, #0]
 8004d8e:	60a6      	str	r6, [r4, #8]
 8004d90:	bfa4      	itt	ge
 8004d92:	f021 0104 	bicge.w	r1, r1, #4
 8004d96:	6021      	strge	r1, [r4, #0]
 8004d98:	b90d      	cbnz	r5, 8004d9e <_printf_i+0x11a>
 8004d9a:	2e00      	cmp	r6, #0
 8004d9c:	d04d      	beq.n	8004e3a <_printf_i+0x1b6>
 8004d9e:	4616      	mov	r6, r2
 8004da0:	fbb5 f1f3 	udiv	r1, r5, r3
 8004da4:	fb03 5711 	mls	r7, r3, r1, r5
 8004da8:	5dc7      	ldrb	r7, [r0, r7]
 8004daa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004dae:	462f      	mov	r7, r5
 8004db0:	42bb      	cmp	r3, r7
 8004db2:	460d      	mov	r5, r1
 8004db4:	d9f4      	bls.n	8004da0 <_printf_i+0x11c>
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d10b      	bne.n	8004dd2 <_printf_i+0x14e>
 8004dba:	6823      	ldr	r3, [r4, #0]
 8004dbc:	07df      	lsls	r7, r3, #31
 8004dbe:	d508      	bpl.n	8004dd2 <_printf_i+0x14e>
 8004dc0:	6923      	ldr	r3, [r4, #16]
 8004dc2:	6861      	ldr	r1, [r4, #4]
 8004dc4:	4299      	cmp	r1, r3
 8004dc6:	bfde      	ittt	le
 8004dc8:	2330      	movle	r3, #48	; 0x30
 8004dca:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004dce:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004dd2:	1b92      	subs	r2, r2, r6
 8004dd4:	6122      	str	r2, [r4, #16]
 8004dd6:	464b      	mov	r3, r9
 8004dd8:	4621      	mov	r1, r4
 8004dda:	4640      	mov	r0, r8
 8004ddc:	f8cd a000 	str.w	sl, [sp]
 8004de0:	aa03      	add	r2, sp, #12
 8004de2:	f7ff fedf 	bl	8004ba4 <_printf_common>
 8004de6:	3001      	adds	r0, #1
 8004de8:	d14c      	bne.n	8004e84 <_printf_i+0x200>
 8004dea:	f04f 30ff 	mov.w	r0, #4294967295
 8004dee:	b004      	add	sp, #16
 8004df0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004df4:	4834      	ldr	r0, [pc, #208]	; (8004ec8 <_printf_i+0x244>)
 8004df6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004dfa:	680e      	ldr	r6, [r1, #0]
 8004dfc:	6823      	ldr	r3, [r4, #0]
 8004dfe:	f856 5b04 	ldr.w	r5, [r6], #4
 8004e02:	061f      	lsls	r7, r3, #24
 8004e04:	600e      	str	r6, [r1, #0]
 8004e06:	d514      	bpl.n	8004e32 <_printf_i+0x1ae>
 8004e08:	07d9      	lsls	r1, r3, #31
 8004e0a:	bf44      	itt	mi
 8004e0c:	f043 0320 	orrmi.w	r3, r3, #32
 8004e10:	6023      	strmi	r3, [r4, #0]
 8004e12:	b91d      	cbnz	r5, 8004e1c <_printf_i+0x198>
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	f023 0320 	bic.w	r3, r3, #32
 8004e1a:	6023      	str	r3, [r4, #0]
 8004e1c:	2310      	movs	r3, #16
 8004e1e:	e7af      	b.n	8004d80 <_printf_i+0xfc>
 8004e20:	6823      	ldr	r3, [r4, #0]
 8004e22:	f043 0320 	orr.w	r3, r3, #32
 8004e26:	6023      	str	r3, [r4, #0]
 8004e28:	2378      	movs	r3, #120	; 0x78
 8004e2a:	4828      	ldr	r0, [pc, #160]	; (8004ecc <_printf_i+0x248>)
 8004e2c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004e30:	e7e3      	b.n	8004dfa <_printf_i+0x176>
 8004e32:	065e      	lsls	r6, r3, #25
 8004e34:	bf48      	it	mi
 8004e36:	b2ad      	uxthmi	r5, r5
 8004e38:	e7e6      	b.n	8004e08 <_printf_i+0x184>
 8004e3a:	4616      	mov	r6, r2
 8004e3c:	e7bb      	b.n	8004db6 <_printf_i+0x132>
 8004e3e:	680b      	ldr	r3, [r1, #0]
 8004e40:	6826      	ldr	r6, [r4, #0]
 8004e42:	1d1d      	adds	r5, r3, #4
 8004e44:	6960      	ldr	r0, [r4, #20]
 8004e46:	600d      	str	r5, [r1, #0]
 8004e48:	0635      	lsls	r5, r6, #24
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	d501      	bpl.n	8004e52 <_printf_i+0x1ce>
 8004e4e:	6018      	str	r0, [r3, #0]
 8004e50:	e002      	b.n	8004e58 <_printf_i+0x1d4>
 8004e52:	0671      	lsls	r1, r6, #25
 8004e54:	d5fb      	bpl.n	8004e4e <_printf_i+0x1ca>
 8004e56:	8018      	strh	r0, [r3, #0]
 8004e58:	2300      	movs	r3, #0
 8004e5a:	4616      	mov	r6, r2
 8004e5c:	6123      	str	r3, [r4, #16]
 8004e5e:	e7ba      	b.n	8004dd6 <_printf_i+0x152>
 8004e60:	680b      	ldr	r3, [r1, #0]
 8004e62:	1d1a      	adds	r2, r3, #4
 8004e64:	600a      	str	r2, [r1, #0]
 8004e66:	681e      	ldr	r6, [r3, #0]
 8004e68:	2100      	movs	r1, #0
 8004e6a:	4630      	mov	r0, r6
 8004e6c:	6862      	ldr	r2, [r4, #4]
 8004e6e:	f000 f82f 	bl	8004ed0 <memchr>
 8004e72:	b108      	cbz	r0, 8004e78 <_printf_i+0x1f4>
 8004e74:	1b80      	subs	r0, r0, r6
 8004e76:	6060      	str	r0, [r4, #4]
 8004e78:	6863      	ldr	r3, [r4, #4]
 8004e7a:	6123      	str	r3, [r4, #16]
 8004e7c:	2300      	movs	r3, #0
 8004e7e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e82:	e7a8      	b.n	8004dd6 <_printf_i+0x152>
 8004e84:	4632      	mov	r2, r6
 8004e86:	4649      	mov	r1, r9
 8004e88:	4640      	mov	r0, r8
 8004e8a:	6923      	ldr	r3, [r4, #16]
 8004e8c:	47d0      	blx	sl
 8004e8e:	3001      	adds	r0, #1
 8004e90:	d0ab      	beq.n	8004dea <_printf_i+0x166>
 8004e92:	6823      	ldr	r3, [r4, #0]
 8004e94:	079b      	lsls	r3, r3, #30
 8004e96:	d413      	bmi.n	8004ec0 <_printf_i+0x23c>
 8004e98:	68e0      	ldr	r0, [r4, #12]
 8004e9a:	9b03      	ldr	r3, [sp, #12]
 8004e9c:	4298      	cmp	r0, r3
 8004e9e:	bfb8      	it	lt
 8004ea0:	4618      	movlt	r0, r3
 8004ea2:	e7a4      	b.n	8004dee <_printf_i+0x16a>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	4632      	mov	r2, r6
 8004ea8:	4649      	mov	r1, r9
 8004eaa:	4640      	mov	r0, r8
 8004eac:	47d0      	blx	sl
 8004eae:	3001      	adds	r0, #1
 8004eb0:	d09b      	beq.n	8004dea <_printf_i+0x166>
 8004eb2:	3501      	adds	r5, #1
 8004eb4:	68e3      	ldr	r3, [r4, #12]
 8004eb6:	9903      	ldr	r1, [sp, #12]
 8004eb8:	1a5b      	subs	r3, r3, r1
 8004eba:	42ab      	cmp	r3, r5
 8004ebc:	dcf2      	bgt.n	8004ea4 <_printf_i+0x220>
 8004ebe:	e7eb      	b.n	8004e98 <_printf_i+0x214>
 8004ec0:	2500      	movs	r5, #0
 8004ec2:	f104 0619 	add.w	r6, r4, #25
 8004ec6:	e7f5      	b.n	8004eb4 <_printf_i+0x230>
 8004ec8:	080071dd 	.word	0x080071dd
 8004ecc:	080071ee 	.word	0x080071ee

08004ed0 <memchr>:
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	b510      	push	{r4, lr}
 8004ed4:	b2c9      	uxtb	r1, r1
 8004ed6:	4402      	add	r2, r0
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	4618      	mov	r0, r3
 8004edc:	d101      	bne.n	8004ee2 <memchr+0x12>
 8004ede:	2000      	movs	r0, #0
 8004ee0:	e003      	b.n	8004eea <memchr+0x1a>
 8004ee2:	7804      	ldrb	r4, [r0, #0]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	428c      	cmp	r4, r1
 8004ee8:	d1f6      	bne.n	8004ed8 <memchr+0x8>
 8004eea:	bd10      	pop	{r4, pc}

08004eec <_free_r>:
 8004eec:	b538      	push	{r3, r4, r5, lr}
 8004eee:	4605      	mov	r5, r0
 8004ef0:	2900      	cmp	r1, #0
 8004ef2:	d043      	beq.n	8004f7c <_free_r+0x90>
 8004ef4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ef8:	1f0c      	subs	r4, r1, #4
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	bfb8      	it	lt
 8004efe:	18e4      	addlt	r4, r4, r3
 8004f00:	f000 f8d0 	bl	80050a4 <__malloc_lock>
 8004f04:	4a1e      	ldr	r2, [pc, #120]	; (8004f80 <_free_r+0x94>)
 8004f06:	6813      	ldr	r3, [r2, #0]
 8004f08:	4610      	mov	r0, r2
 8004f0a:	b933      	cbnz	r3, 8004f1a <_free_r+0x2e>
 8004f0c:	6063      	str	r3, [r4, #4]
 8004f0e:	6014      	str	r4, [r2, #0]
 8004f10:	4628      	mov	r0, r5
 8004f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f16:	f000 b8cb 	b.w	80050b0 <__malloc_unlock>
 8004f1a:	42a3      	cmp	r3, r4
 8004f1c:	d90a      	bls.n	8004f34 <_free_r+0x48>
 8004f1e:	6821      	ldr	r1, [r4, #0]
 8004f20:	1862      	adds	r2, r4, r1
 8004f22:	4293      	cmp	r3, r2
 8004f24:	bf01      	itttt	eq
 8004f26:	681a      	ldreq	r2, [r3, #0]
 8004f28:	685b      	ldreq	r3, [r3, #4]
 8004f2a:	1852      	addeq	r2, r2, r1
 8004f2c:	6022      	streq	r2, [r4, #0]
 8004f2e:	6063      	str	r3, [r4, #4]
 8004f30:	6004      	str	r4, [r0, #0]
 8004f32:	e7ed      	b.n	8004f10 <_free_r+0x24>
 8004f34:	461a      	mov	r2, r3
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	b10b      	cbz	r3, 8004f3e <_free_r+0x52>
 8004f3a:	42a3      	cmp	r3, r4
 8004f3c:	d9fa      	bls.n	8004f34 <_free_r+0x48>
 8004f3e:	6811      	ldr	r1, [r2, #0]
 8004f40:	1850      	adds	r0, r2, r1
 8004f42:	42a0      	cmp	r0, r4
 8004f44:	d10b      	bne.n	8004f5e <_free_r+0x72>
 8004f46:	6820      	ldr	r0, [r4, #0]
 8004f48:	4401      	add	r1, r0
 8004f4a:	1850      	adds	r0, r2, r1
 8004f4c:	4283      	cmp	r3, r0
 8004f4e:	6011      	str	r1, [r2, #0]
 8004f50:	d1de      	bne.n	8004f10 <_free_r+0x24>
 8004f52:	6818      	ldr	r0, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	4401      	add	r1, r0
 8004f58:	6011      	str	r1, [r2, #0]
 8004f5a:	6053      	str	r3, [r2, #4]
 8004f5c:	e7d8      	b.n	8004f10 <_free_r+0x24>
 8004f5e:	d902      	bls.n	8004f66 <_free_r+0x7a>
 8004f60:	230c      	movs	r3, #12
 8004f62:	602b      	str	r3, [r5, #0]
 8004f64:	e7d4      	b.n	8004f10 <_free_r+0x24>
 8004f66:	6820      	ldr	r0, [r4, #0]
 8004f68:	1821      	adds	r1, r4, r0
 8004f6a:	428b      	cmp	r3, r1
 8004f6c:	bf01      	itttt	eq
 8004f6e:	6819      	ldreq	r1, [r3, #0]
 8004f70:	685b      	ldreq	r3, [r3, #4]
 8004f72:	1809      	addeq	r1, r1, r0
 8004f74:	6021      	streq	r1, [r4, #0]
 8004f76:	6063      	str	r3, [r4, #4]
 8004f78:	6054      	str	r4, [r2, #4]
 8004f7a:	e7c9      	b.n	8004f10 <_free_r+0x24>
 8004f7c:	bd38      	pop	{r3, r4, r5, pc}
 8004f7e:	bf00      	nop
 8004f80:	200002b0 	.word	0x200002b0

08004f84 <_malloc_r>:
 8004f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f86:	1ccd      	adds	r5, r1, #3
 8004f88:	f025 0503 	bic.w	r5, r5, #3
 8004f8c:	3508      	adds	r5, #8
 8004f8e:	2d0c      	cmp	r5, #12
 8004f90:	bf38      	it	cc
 8004f92:	250c      	movcc	r5, #12
 8004f94:	2d00      	cmp	r5, #0
 8004f96:	4606      	mov	r6, r0
 8004f98:	db01      	blt.n	8004f9e <_malloc_r+0x1a>
 8004f9a:	42a9      	cmp	r1, r5
 8004f9c:	d903      	bls.n	8004fa6 <_malloc_r+0x22>
 8004f9e:	230c      	movs	r3, #12
 8004fa0:	6033      	str	r3, [r6, #0]
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004fa6:	f000 f87d 	bl	80050a4 <__malloc_lock>
 8004faa:	4921      	ldr	r1, [pc, #132]	; (8005030 <_malloc_r+0xac>)
 8004fac:	680a      	ldr	r2, [r1, #0]
 8004fae:	4614      	mov	r4, r2
 8004fb0:	b99c      	cbnz	r4, 8004fda <_malloc_r+0x56>
 8004fb2:	4f20      	ldr	r7, [pc, #128]	; (8005034 <_malloc_r+0xb0>)
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	b923      	cbnz	r3, 8004fc2 <_malloc_r+0x3e>
 8004fb8:	4621      	mov	r1, r4
 8004fba:	4630      	mov	r0, r6
 8004fbc:	f000 f862 	bl	8005084 <_sbrk_r>
 8004fc0:	6038      	str	r0, [r7, #0]
 8004fc2:	4629      	mov	r1, r5
 8004fc4:	4630      	mov	r0, r6
 8004fc6:	f000 f85d 	bl	8005084 <_sbrk_r>
 8004fca:	1c43      	adds	r3, r0, #1
 8004fcc:	d123      	bne.n	8005016 <_malloc_r+0x92>
 8004fce:	230c      	movs	r3, #12
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	6033      	str	r3, [r6, #0]
 8004fd4:	f000 f86c 	bl	80050b0 <__malloc_unlock>
 8004fd8:	e7e3      	b.n	8004fa2 <_malloc_r+0x1e>
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	1b5b      	subs	r3, r3, r5
 8004fde:	d417      	bmi.n	8005010 <_malloc_r+0x8c>
 8004fe0:	2b0b      	cmp	r3, #11
 8004fe2:	d903      	bls.n	8004fec <_malloc_r+0x68>
 8004fe4:	6023      	str	r3, [r4, #0]
 8004fe6:	441c      	add	r4, r3
 8004fe8:	6025      	str	r5, [r4, #0]
 8004fea:	e004      	b.n	8004ff6 <_malloc_r+0x72>
 8004fec:	6863      	ldr	r3, [r4, #4]
 8004fee:	42a2      	cmp	r2, r4
 8004ff0:	bf0c      	ite	eq
 8004ff2:	600b      	streq	r3, [r1, #0]
 8004ff4:	6053      	strne	r3, [r2, #4]
 8004ff6:	4630      	mov	r0, r6
 8004ff8:	f000 f85a 	bl	80050b0 <__malloc_unlock>
 8004ffc:	f104 000b 	add.w	r0, r4, #11
 8005000:	1d23      	adds	r3, r4, #4
 8005002:	f020 0007 	bic.w	r0, r0, #7
 8005006:	1ac2      	subs	r2, r0, r3
 8005008:	d0cc      	beq.n	8004fa4 <_malloc_r+0x20>
 800500a:	1a1b      	subs	r3, r3, r0
 800500c:	50a3      	str	r3, [r4, r2]
 800500e:	e7c9      	b.n	8004fa4 <_malloc_r+0x20>
 8005010:	4622      	mov	r2, r4
 8005012:	6864      	ldr	r4, [r4, #4]
 8005014:	e7cc      	b.n	8004fb0 <_malloc_r+0x2c>
 8005016:	1cc4      	adds	r4, r0, #3
 8005018:	f024 0403 	bic.w	r4, r4, #3
 800501c:	42a0      	cmp	r0, r4
 800501e:	d0e3      	beq.n	8004fe8 <_malloc_r+0x64>
 8005020:	1a21      	subs	r1, r4, r0
 8005022:	4630      	mov	r0, r6
 8005024:	f000 f82e 	bl	8005084 <_sbrk_r>
 8005028:	3001      	adds	r0, #1
 800502a:	d1dd      	bne.n	8004fe8 <_malloc_r+0x64>
 800502c:	e7cf      	b.n	8004fce <_malloc_r+0x4a>
 800502e:	bf00      	nop
 8005030:	200002b0 	.word	0x200002b0
 8005034:	200002b4 	.word	0x200002b4

08005038 <_realloc_r>:
 8005038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503a:	4607      	mov	r7, r0
 800503c:	4614      	mov	r4, r2
 800503e:	460e      	mov	r6, r1
 8005040:	b921      	cbnz	r1, 800504c <_realloc_r+0x14>
 8005042:	4611      	mov	r1, r2
 8005044:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005048:	f7ff bf9c 	b.w	8004f84 <_malloc_r>
 800504c:	b922      	cbnz	r2, 8005058 <_realloc_r+0x20>
 800504e:	f7ff ff4d 	bl	8004eec <_free_r>
 8005052:	4625      	mov	r5, r4
 8005054:	4628      	mov	r0, r5
 8005056:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005058:	f000 f830 	bl	80050bc <_malloc_usable_size_r>
 800505c:	42a0      	cmp	r0, r4
 800505e:	d20f      	bcs.n	8005080 <_realloc_r+0x48>
 8005060:	4621      	mov	r1, r4
 8005062:	4638      	mov	r0, r7
 8005064:	f7ff ff8e 	bl	8004f84 <_malloc_r>
 8005068:	4605      	mov	r5, r0
 800506a:	2800      	cmp	r0, #0
 800506c:	d0f2      	beq.n	8005054 <_realloc_r+0x1c>
 800506e:	4631      	mov	r1, r6
 8005070:	4622      	mov	r2, r4
 8005072:	f7ff fbeb 	bl	800484c <memcpy>
 8005076:	4631      	mov	r1, r6
 8005078:	4638      	mov	r0, r7
 800507a:	f7ff ff37 	bl	8004eec <_free_r>
 800507e:	e7e9      	b.n	8005054 <_realloc_r+0x1c>
 8005080:	4635      	mov	r5, r6
 8005082:	e7e7      	b.n	8005054 <_realloc_r+0x1c>

08005084 <_sbrk_r>:
 8005084:	b538      	push	{r3, r4, r5, lr}
 8005086:	2300      	movs	r3, #0
 8005088:	4d05      	ldr	r5, [pc, #20]	; (80050a0 <_sbrk_r+0x1c>)
 800508a:	4604      	mov	r4, r0
 800508c:	4608      	mov	r0, r1
 800508e:	602b      	str	r3, [r5, #0]
 8005090:	f7fc fd96 	bl	8001bc0 <_sbrk>
 8005094:	1c43      	adds	r3, r0, #1
 8005096:	d102      	bne.n	800509e <_sbrk_r+0x1a>
 8005098:	682b      	ldr	r3, [r5, #0]
 800509a:	b103      	cbz	r3, 800509e <_sbrk_r+0x1a>
 800509c:	6023      	str	r3, [r4, #0]
 800509e:	bd38      	pop	{r3, r4, r5, pc}
 80050a0:	200003ac 	.word	0x200003ac

080050a4 <__malloc_lock>:
 80050a4:	4801      	ldr	r0, [pc, #4]	; (80050ac <__malloc_lock+0x8>)
 80050a6:	f000 b811 	b.w	80050cc <__retarget_lock_acquire_recursive>
 80050aa:	bf00      	nop
 80050ac:	200003b4 	.word	0x200003b4

080050b0 <__malloc_unlock>:
 80050b0:	4801      	ldr	r0, [pc, #4]	; (80050b8 <__malloc_unlock+0x8>)
 80050b2:	f000 b80c 	b.w	80050ce <__retarget_lock_release_recursive>
 80050b6:	bf00      	nop
 80050b8:	200003b4 	.word	0x200003b4

080050bc <_malloc_usable_size_r>:
 80050bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050c0:	1f18      	subs	r0, r3, #4
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	bfbc      	itt	lt
 80050c6:	580b      	ldrlt	r3, [r1, r0]
 80050c8:	18c0      	addlt	r0, r0, r3
 80050ca:	4770      	bx	lr

080050cc <__retarget_lock_acquire_recursive>:
 80050cc:	4770      	bx	lr

080050ce <__retarget_lock_release_recursive>:
 80050ce:	4770      	bx	lr

080050d0 <_init>:
 80050d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d2:	bf00      	nop
 80050d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d6:	bc08      	pop	{r3}
 80050d8:	469e      	mov	lr, r3
 80050da:	4770      	bx	lr

080050dc <_fini>:
 80050dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050de:	bf00      	nop
 80050e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050e2:	bc08      	pop	{r3}
 80050e4:	469e      	mov	lr, r3
 80050e6:	4770      	bx	lr
