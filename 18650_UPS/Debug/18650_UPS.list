
18650_UPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005160  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013f4  080052a0  080052a0  000152a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006694  08006694  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08006694  08006694  00016694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800669c  0800669c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800669c  0800669c  0001669c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066a0  080066a0  000166a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080066a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000078  0800671c  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003b4  0800671c  000203b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef8c  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020a3  00000000  00000000  0002f02d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  000310d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00031eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199c2  00000000  00000000  00032be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001023f  00000000  00000000  0004c5aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b446  00000000  00000000  0005c7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7c2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004024  00000000  00000000  000e7c84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000078 	.word	0x20000078
 800015c:	00000000 	.word	0x00000000
 8000160:	08005288 	.word	0x08005288

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000007c 	.word	0x2000007c
 800017c:	08005288 	.word	0x08005288

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_d2uiz>:
 800091c:	004a      	lsls	r2, r1, #1
 800091e:	d211      	bcs.n	8000944 <__aeabi_d2uiz+0x28>
 8000920:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000924:	d211      	bcs.n	800094a <__aeabi_d2uiz+0x2e>
 8000926:	d50d      	bpl.n	8000944 <__aeabi_d2uiz+0x28>
 8000928:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800092c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000930:	d40e      	bmi.n	8000950 <__aeabi_d2uiz+0x34>
 8000932:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800093a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800093e:	fa23 f002 	lsr.w	r0, r3, r2
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800094e:	d102      	bne.n	8000956 <__aeabi_d2uiz+0x3a>
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	4770      	bx	lr
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	4770      	bx	lr

0800095c <__aeabi_frsub>:
 800095c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000960:	e002      	b.n	8000968 <__addsf3>
 8000962:	bf00      	nop

08000964 <__aeabi_fsub>:
 8000964:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000968 <__addsf3>:
 8000968:	0042      	lsls	r2, r0, #1
 800096a:	bf1f      	itttt	ne
 800096c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000970:	ea92 0f03 	teqne	r2, r3
 8000974:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000978:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800097c:	d06a      	beq.n	8000a54 <__addsf3+0xec>
 800097e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000982:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000986:	bfc1      	itttt	gt
 8000988:	18d2      	addgt	r2, r2, r3
 800098a:	4041      	eorgt	r1, r0
 800098c:	4048      	eorgt	r0, r1
 800098e:	4041      	eorgt	r1, r0
 8000990:	bfb8      	it	lt
 8000992:	425b      	neglt	r3, r3
 8000994:	2b19      	cmp	r3, #25
 8000996:	bf88      	it	hi
 8000998:	4770      	bxhi	lr
 800099a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800099e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009a6:	bf18      	it	ne
 80009a8:	4240      	negne	r0, r0
 80009aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009b6:	bf18      	it	ne
 80009b8:	4249      	negne	r1, r1
 80009ba:	ea92 0f03 	teq	r2, r3
 80009be:	d03f      	beq.n	8000a40 <__addsf3+0xd8>
 80009c0:	f1a2 0201 	sub.w	r2, r2, #1
 80009c4:	fa41 fc03 	asr.w	ip, r1, r3
 80009c8:	eb10 000c 	adds.w	r0, r0, ip
 80009cc:	f1c3 0320 	rsb	r3, r3, #32
 80009d0:	fa01 f103 	lsl.w	r1, r1, r3
 80009d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009d8:	d502      	bpl.n	80009e0 <__addsf3+0x78>
 80009da:	4249      	negs	r1, r1
 80009dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009e4:	d313      	bcc.n	8000a0e <__addsf3+0xa6>
 80009e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ea:	d306      	bcc.n	80009fa <__addsf3+0x92>
 80009ec:	0840      	lsrs	r0, r0, #1
 80009ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80009f2:	f102 0201 	add.w	r2, r2, #1
 80009f6:	2afe      	cmp	r2, #254	; 0xfe
 80009f8:	d251      	bcs.n	8000a9e <__addsf3+0x136>
 80009fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a02:	bf08      	it	eq
 8000a04:	f020 0001 	biceq.w	r0, r0, #1
 8000a08:	ea40 0003 	orr.w	r0, r0, r3
 8000a0c:	4770      	bx	lr
 8000a0e:	0049      	lsls	r1, r1, #1
 8000a10:	eb40 0000 	adc.w	r0, r0, r0
 8000a14:	3a01      	subs	r2, #1
 8000a16:	bf28      	it	cs
 8000a18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a1c:	d2ed      	bcs.n	80009fa <__addsf3+0x92>
 8000a1e:	fab0 fc80 	clz	ip, r0
 8000a22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a26:	ebb2 020c 	subs.w	r2, r2, ip
 8000a2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a2e:	bfaa      	itet	ge
 8000a30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a34:	4252      	neglt	r2, r2
 8000a36:	4318      	orrge	r0, r3
 8000a38:	bfbc      	itt	lt
 8000a3a:	40d0      	lsrlt	r0, r2
 8000a3c:	4318      	orrlt	r0, r3
 8000a3e:	4770      	bx	lr
 8000a40:	f092 0f00 	teq	r2, #0
 8000a44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a48:	bf06      	itte	eq
 8000a4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a4e:	3201      	addeq	r2, #1
 8000a50:	3b01      	subne	r3, #1
 8000a52:	e7b5      	b.n	80009c0 <__addsf3+0x58>
 8000a54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a5c:	bf18      	it	ne
 8000a5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a62:	d021      	beq.n	8000aa8 <__addsf3+0x140>
 8000a64:	ea92 0f03 	teq	r2, r3
 8000a68:	d004      	beq.n	8000a74 <__addsf3+0x10c>
 8000a6a:	f092 0f00 	teq	r2, #0
 8000a6e:	bf08      	it	eq
 8000a70:	4608      	moveq	r0, r1
 8000a72:	4770      	bx	lr
 8000a74:	ea90 0f01 	teq	r0, r1
 8000a78:	bf1c      	itt	ne
 8000a7a:	2000      	movne	r0, #0
 8000a7c:	4770      	bxne	lr
 8000a7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a82:	d104      	bne.n	8000a8e <__addsf3+0x126>
 8000a84:	0040      	lsls	r0, r0, #1
 8000a86:	bf28      	it	cs
 8000a88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	4770      	bx	lr
 8000a8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a92:	bf3c      	itt	cc
 8000a94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bxcc	lr
 8000a9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000aa2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa6:	4770      	bx	lr
 8000aa8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aac:	bf16      	itet	ne
 8000aae:	4608      	movne	r0, r1
 8000ab0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ab4:	4601      	movne	r1, r0
 8000ab6:	0242      	lsls	r2, r0, #9
 8000ab8:	bf06      	itte	eq
 8000aba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000abe:	ea90 0f01 	teqeq	r0, r1
 8000ac2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_ui2f>:
 8000ac8:	f04f 0300 	mov.w	r3, #0
 8000acc:	e004      	b.n	8000ad8 <__aeabi_i2f+0x8>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_i2f>:
 8000ad0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ad4:	bf48      	it	mi
 8000ad6:	4240      	negmi	r0, r0
 8000ad8:	ea5f 0c00 	movs.w	ip, r0
 8000adc:	bf08      	it	eq
 8000ade:	4770      	bxeq	lr
 8000ae0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ae4:	4601      	mov	r1, r0
 8000ae6:	f04f 0000 	mov.w	r0, #0
 8000aea:	e01c      	b.n	8000b26 <__aeabi_l2f+0x2a>

08000aec <__aeabi_ul2f>:
 8000aec:	ea50 0201 	orrs.w	r2, r0, r1
 8000af0:	bf08      	it	eq
 8000af2:	4770      	bxeq	lr
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e00a      	b.n	8000b10 <__aeabi_l2f+0x14>
 8000afa:	bf00      	nop

08000afc <__aeabi_l2f>:
 8000afc:	ea50 0201 	orrs.w	r2, r0, r1
 8000b00:	bf08      	it	eq
 8000b02:	4770      	bxeq	lr
 8000b04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b08:	d502      	bpl.n	8000b10 <__aeabi_l2f+0x14>
 8000b0a:	4240      	negs	r0, r0
 8000b0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b10:	ea5f 0c01 	movs.w	ip, r1
 8000b14:	bf02      	ittt	eq
 8000b16:	4684      	moveq	ip, r0
 8000b18:	4601      	moveq	r1, r0
 8000b1a:	2000      	moveq	r0, #0
 8000b1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b20:	bf08      	it	eq
 8000b22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b2a:	fabc f28c 	clz	r2, ip
 8000b2e:	3a08      	subs	r2, #8
 8000b30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b34:	db10      	blt.n	8000b58 <__aeabi_l2f+0x5c>
 8000b36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b40:	f1c2 0220 	rsb	r2, r2, #32
 8000b44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b48:	fa20 f202 	lsr.w	r2, r0, r2
 8000b4c:	eb43 0002 	adc.w	r0, r3, r2
 8000b50:	bf08      	it	eq
 8000b52:	f020 0001 	biceq.w	r0, r0, #1
 8000b56:	4770      	bx	lr
 8000b58:	f102 0220 	add.w	r2, r2, #32
 8000b5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b60:	f1c2 0220 	rsb	r2, r2, #32
 8000b64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b68:	fa21 f202 	lsr.w	r2, r1, r2
 8000b6c:	eb43 0002 	adc.w	r0, r3, r2
 8000b70:	bf08      	it	eq
 8000b72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b96e 	b.w	8000e6c <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9e08      	ldr	r6, [sp, #32]
 8000bae:	460d      	mov	r5, r1
 8000bb0:	4604      	mov	r4, r0
 8000bb2:	468e      	mov	lr, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f040 8083 	bne.w	8000cc0 <__udivmoddi4+0x118>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4617      	mov	r7, r2
 8000bbe:	d947      	bls.n	8000c50 <__udivmoddi4+0xa8>
 8000bc0:	fab2 f382 	clz	r3, r2
 8000bc4:	b14b      	cbz	r3, 8000bda <__udivmoddi4+0x32>
 8000bc6:	f1c3 0120 	rsb	r1, r3, #32
 8000bca:	fa05 fe03 	lsl.w	lr, r5, r3
 8000bce:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd2:	409f      	lsls	r7, r3
 8000bd4:	ea41 0e0e 	orr.w	lr, r1, lr
 8000bd8:	409c      	lsls	r4, r3
 8000bda:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bde:	fbbe fcf8 	udiv	ip, lr, r8
 8000be2:	fa1f f987 	uxth.w	r9, r7
 8000be6:	fb08 e21c 	mls	r2, r8, ip, lr
 8000bea:	fb0c f009 	mul.w	r0, ip, r9
 8000bee:	0c21      	lsrs	r1, r4, #16
 8000bf0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000bf4:	4290      	cmp	r0, r2
 8000bf6:	d90a      	bls.n	8000c0e <__udivmoddi4+0x66>
 8000bf8:	18ba      	adds	r2, r7, r2
 8000bfa:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000bfe:	f080 8118 	bcs.w	8000e32 <__udivmoddi4+0x28a>
 8000c02:	4290      	cmp	r0, r2
 8000c04:	f240 8115 	bls.w	8000e32 <__udivmoddi4+0x28a>
 8000c08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c0c:	443a      	add	r2, r7
 8000c0e:	1a12      	subs	r2, r2, r0
 8000c10:	fbb2 f0f8 	udiv	r0, r2, r8
 8000c14:	fb08 2210 	mls	r2, r8, r0, r2
 8000c18:	fb00 f109 	mul.w	r1, r0, r9
 8000c1c:	b2a4      	uxth	r4, r4
 8000c1e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c22:	42a1      	cmp	r1, r4
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x92>
 8000c26:	193c      	adds	r4, r7, r4
 8000c28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2c:	f080 8103 	bcs.w	8000e36 <__udivmoddi4+0x28e>
 8000c30:	42a1      	cmp	r1, r4
 8000c32:	f240 8100 	bls.w	8000e36 <__udivmoddi4+0x28e>
 8000c36:	3802      	subs	r0, #2
 8000c38:	443c      	add	r4, r7
 8000c3a:	1a64      	subs	r4, r4, r1
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c42:	b11e      	cbz	r6, 8000c4c <__udivmoddi4+0xa4>
 8000c44:	2200      	movs	r2, #0
 8000c46:	40dc      	lsrs	r4, r3
 8000c48:	e9c6 4200 	strd	r4, r2, [r6]
 8000c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c50:	b902      	cbnz	r2, 8000c54 <__udivmoddi4+0xac>
 8000c52:	deff      	udf	#255	; 0xff
 8000c54:	fab2 f382 	clz	r3, r2
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d14f      	bne.n	8000cfc <__udivmoddi4+0x154>
 8000c5c:	1a8d      	subs	r5, r1, r2
 8000c5e:	2101      	movs	r1, #1
 8000c60:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000c64:	fa1f f882 	uxth.w	r8, r2
 8000c68:	fbb5 fcfe 	udiv	ip, r5, lr
 8000c6c:	fb0e 551c 	mls	r5, lr, ip, r5
 8000c70:	fb08 f00c 	mul.w	r0, r8, ip
 8000c74:	0c22      	lsrs	r2, r4, #16
 8000c76:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000c7a:	42a8      	cmp	r0, r5
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0xe6>
 8000c7e:	197d      	adds	r5, r7, r5
 8000c80:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000c84:	d202      	bcs.n	8000c8c <__udivmoddi4+0xe4>
 8000c86:	42a8      	cmp	r0, r5
 8000c88:	f200 80e9 	bhi.w	8000e5e <__udivmoddi4+0x2b6>
 8000c8c:	4694      	mov	ip, r2
 8000c8e:	1a2d      	subs	r5, r5, r0
 8000c90:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c94:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c98:	fb08 f800 	mul.w	r8, r8, r0
 8000c9c:	b2a4      	uxth	r4, r4
 8000c9e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca2:	45a0      	cmp	r8, r4
 8000ca4:	d907      	bls.n	8000cb6 <__udivmoddi4+0x10e>
 8000ca6:	193c      	adds	r4, r7, r4
 8000ca8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cac:	d202      	bcs.n	8000cb4 <__udivmoddi4+0x10c>
 8000cae:	45a0      	cmp	r8, r4
 8000cb0:	f200 80d9 	bhi.w	8000e66 <__udivmoddi4+0x2be>
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	eba4 0408 	sub.w	r4, r4, r8
 8000cba:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cbe:	e7c0      	b.n	8000c42 <__udivmoddi4+0x9a>
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x12e>
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	f000 80b1 	beq.w	8000e2c <__udivmoddi4+0x284>
 8000cca:	2100      	movs	r1, #0
 8000ccc:	e9c6 0500 	strd	r0, r5, [r6]
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f183 	clz	r1, r3
 8000cda:	2900      	cmp	r1, #0
 8000cdc:	d14b      	bne.n	8000d76 <__udivmoddi4+0x1ce>
 8000cde:	42ab      	cmp	r3, r5
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0x140>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80b9 	bhi.w	8000e5a <__udivmoddi4+0x2b2>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb65 0303 	sbc.w	r3, r5, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	469e      	mov	lr, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0aa      	beq.n	8000c4c <__udivmoddi4+0xa4>
 8000cf6:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cfa:	e7a7      	b.n	8000c4c <__udivmoddi4+0xa4>
 8000cfc:	409f      	lsls	r7, r3
 8000cfe:	f1c3 0220 	rsb	r2, r3, #32
 8000d02:	40d1      	lsrs	r1, r2
 8000d04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d08:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d14:	fa24 f202 	lsr.w	r2, r4, r2
 8000d18:	409d      	lsls	r5, r3
 8000d1a:	fb00 fc08 	mul.w	ip, r0, r8
 8000d1e:	432a      	orrs	r2, r5
 8000d20:	0c15      	lsrs	r5, r2, #16
 8000d22:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000d26:	45ac      	cmp	ip, r5
 8000d28:	fa04 f403 	lsl.w	r4, r4, r3
 8000d2c:	d909      	bls.n	8000d42 <__udivmoddi4+0x19a>
 8000d2e:	197d      	adds	r5, r7, r5
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	f080 808f 	bcs.w	8000e56 <__udivmoddi4+0x2ae>
 8000d38:	45ac      	cmp	ip, r5
 8000d3a:	f240 808c 	bls.w	8000e56 <__udivmoddi4+0x2ae>
 8000d3e:	3802      	subs	r0, #2
 8000d40:	443d      	add	r5, r7
 8000d42:	eba5 050c 	sub.w	r5, r5, ip
 8000d46:	fbb5 f1fe 	udiv	r1, r5, lr
 8000d4a:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000d4e:	fb01 f908 	mul.w	r9, r1, r8
 8000d52:	b295      	uxth	r5, r2
 8000d54:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d58:	45a9      	cmp	r9, r5
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x1c4>
 8000d5c:	197d      	adds	r5, r7, r5
 8000d5e:	f101 32ff 	add.w	r2, r1, #4294967295
 8000d62:	d274      	bcs.n	8000e4e <__udivmoddi4+0x2a6>
 8000d64:	45a9      	cmp	r9, r5
 8000d66:	d972      	bls.n	8000e4e <__udivmoddi4+0x2a6>
 8000d68:	3902      	subs	r1, #2
 8000d6a:	443d      	add	r5, r7
 8000d6c:	eba5 0509 	sub.w	r5, r5, r9
 8000d70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d74:	e778      	b.n	8000c68 <__udivmoddi4+0xc0>
 8000d76:	f1c1 0720 	rsb	r7, r1, #32
 8000d7a:	408b      	lsls	r3, r1
 8000d7c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d80:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d84:	fa25 f407 	lsr.w	r4, r5, r7
 8000d88:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d8c:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d90:	fa1f f88c 	uxth.w	r8, ip
 8000d94:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d98:	fa20 f307 	lsr.w	r3, r0, r7
 8000d9c:	fb09 fa08 	mul.w	sl, r9, r8
 8000da0:	408d      	lsls	r5, r1
 8000da2:	431d      	orrs	r5, r3
 8000da4:	0c2b      	lsrs	r3, r5, #16
 8000da6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	fa02 f201 	lsl.w	r2, r2, r1
 8000db0:	fa00 f301 	lsl.w	r3, r0, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0x222>
 8000db6:	eb1c 0404 	adds.w	r4, ip, r4
 8000dba:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dbe:	d248      	bcs.n	8000e52 <__udivmoddi4+0x2aa>
 8000dc0:	45a2      	cmp	sl, r4
 8000dc2:	d946      	bls.n	8000e52 <__udivmoddi4+0x2aa>
 8000dc4:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc8:	4464      	add	r4, ip
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	fbb4 f0fe 	udiv	r0, r4, lr
 8000dd2:	fb0e 4410 	mls	r4, lr, r0, r4
 8000dd6:	fb00 fa08 	mul.w	sl, r0, r8
 8000dda:	b2ad      	uxth	r5, r5
 8000ddc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de0:	45a2      	cmp	sl, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x24e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dec:	d22d      	bcs.n	8000e4a <__udivmoddi4+0x2a2>
 8000dee:	45a2      	cmp	sl, r4
 8000df0:	d92b      	bls.n	8000e4a <__udivmoddi4+0x2a2>
 8000df2:	3802      	subs	r0, #2
 8000df4:	4464      	add	r4, ip
 8000df6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfe:	eba4 040a 	sub.w	r4, r4, sl
 8000e02:	454c      	cmp	r4, r9
 8000e04:	46c6      	mov	lr, r8
 8000e06:	464d      	mov	r5, r9
 8000e08:	d319      	bcc.n	8000e3e <__udivmoddi4+0x296>
 8000e0a:	d016      	beq.n	8000e3a <__udivmoddi4+0x292>
 8000e0c:	b15e      	cbz	r6, 8000e26 <__udivmoddi4+0x27e>
 8000e0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e12:	eb64 0405 	sbc.w	r4, r4, r5
 8000e16:	fa04 f707 	lsl.w	r7, r4, r7
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431f      	orrs	r7, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c6 7400 	strd	r7, r4, [r6]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	4630      	mov	r0, r6
 8000e30:	e70c      	b.n	8000c4c <__udivmoddi4+0xa4>
 8000e32:	468c      	mov	ip, r1
 8000e34:	e6eb      	b.n	8000c0e <__udivmoddi4+0x66>
 8000e36:	4610      	mov	r0, r2
 8000e38:	e6ff      	b.n	8000c3a <__udivmoddi4+0x92>
 8000e3a:	4543      	cmp	r3, r8
 8000e3c:	d2e6      	bcs.n	8000e0c <__udivmoddi4+0x264>
 8000e3e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e42:	eb69 050c 	sbc.w	r5, r9, ip
 8000e46:	3801      	subs	r0, #1
 8000e48:	e7e0      	b.n	8000e0c <__udivmoddi4+0x264>
 8000e4a:	4628      	mov	r0, r5
 8000e4c:	e7d3      	b.n	8000df6 <__udivmoddi4+0x24e>
 8000e4e:	4611      	mov	r1, r2
 8000e50:	e78c      	b.n	8000d6c <__udivmoddi4+0x1c4>
 8000e52:	4681      	mov	r9, r0
 8000e54:	e7b9      	b.n	8000dca <__udivmoddi4+0x222>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e773      	b.n	8000d42 <__udivmoddi4+0x19a>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e749      	b.n	8000cf2 <__udivmoddi4+0x14a>
 8000e5e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e62:	443d      	add	r5, r7
 8000e64:	e713      	b.n	8000c8e <__udivmoddi4+0xe6>
 8000e66:	3802      	subs	r0, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	e724      	b.n	8000cb6 <__udivmoddi4+0x10e>

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e76:	f000 ffe0 	bl	8001e3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7a:	f000 fa1f 	bl	80012bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7e:	f000 fb09 	bl	8001494 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e82:	f000 fadd 	bl	8001440 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000e86:	f000 fa61 	bl	800134c <MX_I2C1_Init>
  MX_TIM2_Init();
 8000e8a:	f000 fa8d 	bl	80013a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000e8e:	f000 fc47 	bl	8001720 <ssd1306_Init>
  //ssd1306_SetContrast(0x05); //enable to save 3mA

  //resetting ina237
  TxBuffer[0] = 0x80;
 8000e92:	4ba7      	ldr	r3, [pc, #668]	; (8001130 <main+0x2c0>)
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	701a      	strb	r2, [r3, #0]
  TxBuffer[1] = 0x00;
 8000e98:	4ba5      	ldr	r3, [pc, #660]	; (8001130 <main+0x2c0>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Mem_Write(&hi2c1, 0x45<<1, 0x00, 1, TxBuffer, sizeof(TxBuffer), 1000);
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	9302      	str	r3, [sp, #8]
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	4ba1      	ldr	r3, [pc, #644]	; (8001130 <main+0x2c0>)
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	2301      	movs	r3, #1
 8000eae:	2200      	movs	r2, #0
 8000eb0:	218a      	movs	r1, #138	; 0x8a
 8000eb2:	48a0      	ldr	r0, [pc, #640]	; (8001134 <main+0x2c4>)
 8000eb4:	f001 fc54 	bl	8002760 <HAL_I2C_Mem_Write>

  //setting adc range
  TxBuffer[0] = 0x00;
 8000eb8:	4b9d      	ldr	r3, [pc, #628]	; (8001130 <main+0x2c0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
  TxBuffer[1] = 0x10;
 8000ebe:	4b9c      	ldr	r3, [pc, #624]	; (8001130 <main+0x2c0>)
 8000ec0:	2210      	movs	r2, #16
 8000ec2:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Mem_Write(&hi2c1, 0x45<<1, 0x00, 1, TxBuffer, sizeof(TxBuffer), 1000);
 8000ec4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec8:	9302      	str	r3, [sp, #8]
 8000eca:	2302      	movs	r3, #2
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	4b98      	ldr	r3, [pc, #608]	; (8001130 <main+0x2c0>)
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	218a      	movs	r1, #138	; 0x8a
 8000ed8:	4896      	ldr	r0, [pc, #600]	; (8001134 <main+0x2c4>)
 8000eda:	f001 fc41 	bl	8002760 <HAL_I2C_Mem_Write>

  //calibrating shunt register
  TxBuffer[0] = 0x07;
 8000ede:	4b94      	ldr	r3, [pc, #592]	; (8001130 <main+0x2c0>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	701a      	strb	r2, [r3, #0]
  TxBuffer[1] = 0xD0;
 8000ee4:	4b92      	ldr	r3, [pc, #584]	; (8001130 <main+0x2c0>)
 8000ee6:	22d0      	movs	r2, #208	; 0xd0
 8000ee8:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Mem_Write(&hi2c1, 0x45<<1, 0x02, 1, TxBuffer, sizeof(TxBuffer), 1000);
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	9302      	str	r3, [sp, #8]
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	4b8e      	ldr	r3, [pc, #568]	; (8001130 <main+0x2c0>)
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	2202      	movs	r2, #2
 8000efc:	218a      	movs	r1, #138	; 0x8a
 8000efe:	488d      	ldr	r0, [pc, #564]	; (8001134 <main+0x2c4>)
 8000f00:	f001 fc2e 	bl	8002760 <HAL_I2C_Mem_Write>

  //read adc_config
  HAL_I2C_Mem_Read(&hi2c1, 0x45<<1, 0x01, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 8000f04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f08:	9302      	str	r3, [sp, #8]
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	4b8a      	ldr	r3, [pc, #552]	; (8001138 <main+0x2c8>)
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2301      	movs	r3, #1
 8000f14:	2201      	movs	r2, #1
 8000f16:	218a      	movs	r1, #138	; 0x8a
 8000f18:	4886      	ldr	r0, [pc, #536]	; (8001134 <main+0x2c4>)
 8000f1a:	f001 fd1b 	bl	8002954 <HAL_I2C_Mem_Read>
  temp = (aRxBuffer[0]<<8) | aRxBuffer[1];
 8000f1e:	4b86      	ldr	r3, [pc, #536]	; (8001138 <main+0x2c8>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	021b      	lsls	r3, r3, #8
 8000f24:	b21a      	sxth	r2, r3
 8000f26:	4b84      	ldr	r3, [pc, #528]	; (8001138 <main+0x2c8>)
 8000f28:	785b      	ldrb	r3, [r3, #1]
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4b82      	ldr	r3, [pc, #520]	; (800113c <main+0x2cc>)
 8000f34:	801a      	strh	r2, [r3, #0]
  TxBuffer[0] = aRxBuffer[0];
 8000f36:	4b80      	ldr	r3, [pc, #512]	; (8001138 <main+0x2c8>)
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	4b7d      	ldr	r3, [pc, #500]	; (8001130 <main+0x2c0>)
 8000f3c:	701a      	strb	r2, [r3, #0]
  TxBuffer[1] = aRxBuffer[1] | 0x05;
 8000f3e:	4b7e      	ldr	r3, [pc, #504]	; (8001138 <main+0x2c8>)
 8000f40:	785b      	ldrb	r3, [r3, #1]
 8000f42:	f043 0305 	orr.w	r3, r3, #5
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b79      	ldr	r3, [pc, #484]	; (8001130 <main+0x2c0>)
 8000f4a:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Mem_Write(&hi2c1, 0x45<<1, 0x01, 1, TxBuffer, sizeof(TxBuffer), 1000);
 8000f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f50:	9302      	str	r3, [sp, #8]
 8000f52:	2302      	movs	r3, #2
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	4b76      	ldr	r3, [pc, #472]	; (8001130 <main+0x2c0>)
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	218a      	movs	r1, #138	; 0x8a
 8000f60:	4874      	ldr	r0, [pc, #464]	; (8001134 <main+0x2c4>)
 8000f62:	f001 fbfd 	bl	8002760 <HAL_I2C_Mem_Write>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  switch (read_state) {
 8000f66:	4b76      	ldr	r3, [pc, #472]	; (8001140 <main+0x2d0>)
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	2b05      	cmp	r3, #5
 8000f6e:	f200 8173 	bhi.w	8001258 <main+0x3e8>
 8000f72:	a201      	add	r2, pc, #4	; (adr r2, 8000f78 <main+0x108>)
 8000f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f78:	08000f91 	.word	0x08000f91
 8000f7c:	08000ff3 	.word	0x08000ff3
 8000f80:	08001055 	.word	0x08001055
 8000f84:	080010b7 	.word	0x080010b7
 8000f88:	08001161 	.word	0x08001161
 8000f8c:	080011cb 	.word	0x080011cb
	  	  case 0:
			  //current
			  HAL_I2C_Mem_Read(&hi2c1, 0x45<<1, 0x07, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 8000f90:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f94:	9302      	str	r3, [sp, #8]
 8000f96:	2303      	movs	r3, #3
 8000f98:	9301      	str	r3, [sp, #4]
 8000f9a:	4b67      	ldr	r3, [pc, #412]	; (8001138 <main+0x2c8>)
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	2207      	movs	r2, #7
 8000fa2:	218a      	movs	r1, #138	; 0x8a
 8000fa4:	4863      	ldr	r0, [pc, #396]	; (8001134 <main+0x2c4>)
 8000fa6:	f001 fcd5 	bl	8002954 <HAL_I2C_Mem_Read>
			  temp = 0.0610352*(float)((aRxBuffer[0]<<8) | aRxBuffer[1]);
 8000faa:	4b63      	ldr	r3, [pc, #396]	; (8001138 <main+0x2c8>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	021b      	lsls	r3, r3, #8
 8000fb0:	4a61      	ldr	r2, [pc, #388]	; (8001138 <main+0x2c8>)
 8000fb2:	7852      	ldrb	r2, [r2, #1]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f7ff fd8a 	bl	8000ad0 <__aeabi_i2f>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fa42 	bl	8000448 <__aeabi_f2d>
 8000fc4:	a358      	add	r3, pc, #352	; (adr r3, 8001128 <main+0x2b8>)
 8000fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fca:	f7ff fa95 	bl	80004f8 <__aeabi_dmul>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	4610      	mov	r0, r2
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	f7ff fca1 	bl	800091c <__aeabi_d2uiz>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	b29a      	uxth	r2, r3
 8000fde:	4b57      	ldr	r3, [pc, #348]	; (800113c <main+0x2cc>)
 8000fe0:	801a      	strh	r2, [r3, #0]
			  sprintf(charBuffer, "%u mA\r\n", temp);
 8000fe2:	4b56      	ldr	r3, [pc, #344]	; (800113c <main+0x2cc>)
 8000fe4:	881b      	ldrh	r3, [r3, #0]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	4956      	ldr	r1, [pc, #344]	; (8001144 <main+0x2d4>)
 8000fea:	4857      	ldr	r0, [pc, #348]	; (8001148 <main+0x2d8>)
 8000fec:	f003 fd3a 	bl	8004a64 <siprintf>
	  		  break;
 8000ff0:	e136      	b.n	8001260 <main+0x3f0>
	  	  case 1:
			  //vshunt
			  HAL_I2C_Mem_Read(&hi2c1, 0x45<<1, 0x04, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	9302      	str	r3, [sp, #8]
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	4b4e      	ldr	r3, [pc, #312]	; (8001138 <main+0x2c8>)
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2204      	movs	r2, #4
 8001004:	218a      	movs	r1, #138	; 0x8a
 8001006:	484b      	ldr	r0, [pc, #300]	; (8001134 <main+0x2c4>)
 8001008:	f001 fca4 	bl	8002954 <HAL_I2C_Mem_Read>
			  temp = 1.25*(float)((aRxBuffer[0]<<8) | aRxBuffer[1]);
 800100c:	4b4a      	ldr	r3, [pc, #296]	; (8001138 <main+0x2c8>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	4a49      	ldr	r2, [pc, #292]	; (8001138 <main+0x2c8>)
 8001014:	7852      	ldrb	r2, [r2, #1]
 8001016:	4313      	orrs	r3, r2
 8001018:	4618      	mov	r0, r3
 800101a:	f7ff fd59 	bl	8000ad0 <__aeabi_i2f>
 800101e:	4603      	mov	r3, r0
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fa11 	bl	8000448 <__aeabi_f2d>
 8001026:	f04f 0200 	mov.w	r2, #0
 800102a:	4b48      	ldr	r3, [pc, #288]	; (800114c <main+0x2dc>)
 800102c:	f7ff fa64 	bl	80004f8 <__aeabi_dmul>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4610      	mov	r0, r2
 8001036:	4619      	mov	r1, r3
 8001038:	f7ff fc70 	bl	800091c <__aeabi_d2uiz>
 800103c:	4603      	mov	r3, r0
 800103e:	b29a      	uxth	r2, r3
 8001040:	4b3e      	ldr	r3, [pc, #248]	; (800113c <main+0x2cc>)
 8001042:	801a      	strh	r2, [r3, #0]
			  sprintf(charBuffer, "%u uV\r\n", temp);
 8001044:	4b3d      	ldr	r3, [pc, #244]	; (800113c <main+0x2cc>)
 8001046:	881b      	ldrh	r3, [r3, #0]
 8001048:	461a      	mov	r2, r3
 800104a:	4941      	ldr	r1, [pc, #260]	; (8001150 <main+0x2e0>)
 800104c:	483e      	ldr	r0, [pc, #248]	; (8001148 <main+0x2d8>)
 800104e:	f003 fd09 	bl	8004a64 <siprintf>
	  		  break;
 8001052:	e105      	b.n	8001260 <main+0x3f0>
	  	  case 2:
	  		  //vbus
			  HAL_I2C_Mem_Read(&hi2c1, 0x45<<1, 0x05, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 8001054:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001058:	9302      	str	r3, [sp, #8]
 800105a:	2303      	movs	r3, #3
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	4b36      	ldr	r3, [pc, #216]	; (8001138 <main+0x2c8>)
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2301      	movs	r3, #1
 8001064:	2205      	movs	r2, #5
 8001066:	218a      	movs	r1, #138	; 0x8a
 8001068:	4832      	ldr	r0, [pc, #200]	; (8001134 <main+0x2c4>)
 800106a:	f001 fc73 	bl	8002954 <HAL_I2C_Mem_Read>
			  temp = 3.125*(float)((aRxBuffer[0]<<8) | aRxBuffer[1]);
 800106e:	4b32      	ldr	r3, [pc, #200]	; (8001138 <main+0x2c8>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	021b      	lsls	r3, r3, #8
 8001074:	4a30      	ldr	r2, [pc, #192]	; (8001138 <main+0x2c8>)
 8001076:	7852      	ldrb	r2, [r2, #1]
 8001078:	4313      	orrs	r3, r2
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fd28 	bl	8000ad0 <__aeabi_i2f>
 8001080:	4603      	mov	r3, r0
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff f9e0 	bl	8000448 <__aeabi_f2d>
 8001088:	f04f 0200 	mov.w	r2, #0
 800108c:	4b31      	ldr	r3, [pc, #196]	; (8001154 <main+0x2e4>)
 800108e:	f7ff fa33 	bl	80004f8 <__aeabi_dmul>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f7ff fc3f 	bl	800091c <__aeabi_d2uiz>
 800109e:	4603      	mov	r3, r0
 80010a0:	b29a      	uxth	r2, r3
 80010a2:	4b26      	ldr	r3, [pc, #152]	; (800113c <main+0x2cc>)
 80010a4:	801a      	strh	r2, [r3, #0]
			  sprintf(charBuffer, "%u mV\r\n", temp);
 80010a6:	4b25      	ldr	r3, [pc, #148]	; (800113c <main+0x2cc>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	492a      	ldr	r1, [pc, #168]	; (8001158 <main+0x2e8>)
 80010ae:	4826      	ldr	r0, [pc, #152]	; (8001148 <main+0x2d8>)
 80010b0:	f003 fcd8 	bl	8004a64 <siprintf>
	  		  break;
 80010b4:	e0d4      	b.n	8001260 <main+0x3f0>
	  	  case 3:
			  //dietemp
			  HAL_I2C_Mem_Read(&hi2c1, 0x45<<1, 0x06, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 80010b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	2303      	movs	r3, #3
 80010be:	9301      	str	r3, [sp, #4]
 80010c0:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <main+0x2c8>)
 80010c2:	9300      	str	r3, [sp, #0]
 80010c4:	2301      	movs	r3, #1
 80010c6:	2206      	movs	r2, #6
 80010c8:	218a      	movs	r1, #138	; 0x8a
 80010ca:	481a      	ldr	r0, [pc, #104]	; (8001134 <main+0x2c4>)
 80010cc:	f001 fc42 	bl	8002954 <HAL_I2C_Mem_Read>
			  temp = 0.125*(float)((aRxBuffer[0]<<8) | aRxBuffer[1]);
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <main+0x2c8>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	021b      	lsls	r3, r3, #8
 80010d6:	4a18      	ldr	r2, [pc, #96]	; (8001138 <main+0x2c8>)
 80010d8:	7852      	ldrb	r2, [r2, #1]
 80010da:	4313      	orrs	r3, r2
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fcf7 	bl	8000ad0 <__aeabi_i2f>
 80010e2:	4603      	mov	r3, r0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f9af 	bl	8000448 <__aeabi_f2d>
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80010f2:	f7ff fa01 	bl	80004f8 <__aeabi_dmul>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f7ff fc0d 	bl	800091c <__aeabi_d2uiz>
 8001102:	4603      	mov	r3, r0
 8001104:	b29a      	uxth	r2, r3
 8001106:	4b0d      	ldr	r3, [pc, #52]	; (800113c <main+0x2cc>)
 8001108:	801a      	strh	r2, [r3, #0]
			  temp = temp>>4;
 800110a:	4b0c      	ldr	r3, [pc, #48]	; (800113c <main+0x2cc>)
 800110c:	881b      	ldrh	r3, [r3, #0]
 800110e:	091b      	lsrs	r3, r3, #4
 8001110:	b29a      	uxth	r2, r3
 8001112:	4b0a      	ldr	r3, [pc, #40]	; (800113c <main+0x2cc>)
 8001114:	801a      	strh	r2, [r3, #0]
			  sprintf(charBuffer, "%u C\r\n", temp);
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <main+0x2cc>)
 8001118:	881b      	ldrh	r3, [r3, #0]
 800111a:	461a      	mov	r2, r3
 800111c:	490f      	ldr	r1, [pc, #60]	; (800115c <main+0x2ec>)
 800111e:	480a      	ldr	r0, [pc, #40]	; (8001148 <main+0x2d8>)
 8001120:	f003 fca0 	bl	8004a64 <siprintf>
			  break;
 8001124:	e09c      	b.n	8001260 <main+0x3f0>
 8001126:	bf00      	nop
 8001128:	77cf4476 	.word	0x77cf4476
 800112c:	3faf4001 	.word	0x3faf4001
 8001130:	20000358 	.word	0x20000358
 8001134:	200002b0 	.word	0x200002b0
 8001138:	2000035c 	.word	0x2000035c
 800113c:	20000304 	.word	0x20000304
 8001140:	20000094 	.word	0x20000094
 8001144:	080052a0 	.word	0x080052a0
 8001148:	2000034c 	.word	0x2000034c
 800114c:	3ff40000 	.word	0x3ff40000
 8001150:	080052a8 	.word	0x080052a8
 8001154:	40090000 	.word	0x40090000
 8001158:	080052b0 	.word	0x080052b0
 800115c:	080052b8 	.word	0x080052b8
	  	  case 4:
			  //power
			  HAL_I2C_Mem_Read(&hi2c1, 0x45<<1, 0x08, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 8001160:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001164:	9302      	str	r3, [sp, #8]
 8001166:	2303      	movs	r3, #3
 8001168:	9301      	str	r3, [sp, #4]
 800116a:	4b49      	ldr	r3, [pc, #292]	; (8001290 <main+0x420>)
 800116c:	9300      	str	r3, [sp, #0]
 800116e:	2301      	movs	r3, #1
 8001170:	2208      	movs	r2, #8
 8001172:	218a      	movs	r1, #138	; 0x8a
 8001174:	4847      	ldr	r0, [pc, #284]	; (8001294 <main+0x424>)
 8001176:	f001 fbed 	bl	8002954 <HAL_I2C_Mem_Read>
			  temp = 0.2*0.0610352*(float)((aRxBuffer[0]<<16) | aRxBuffer[1]<<8 | aRxBuffer[0]);
 800117a:	4b45      	ldr	r3, [pc, #276]	; (8001290 <main+0x420>)
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	041a      	lsls	r2, r3, #16
 8001180:	4b43      	ldr	r3, [pc, #268]	; (8001290 <main+0x420>)
 8001182:	785b      	ldrb	r3, [r3, #1]
 8001184:	021b      	lsls	r3, r3, #8
 8001186:	4313      	orrs	r3, r2
 8001188:	4a41      	ldr	r2, [pc, #260]	; (8001290 <main+0x420>)
 800118a:	7812      	ldrb	r2, [r2, #0]
 800118c:	4313      	orrs	r3, r2
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fc9e 	bl	8000ad0 <__aeabi_i2f>
 8001194:	4603      	mov	r3, r0
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f956 	bl	8000448 <__aeabi_f2d>
 800119c:	a33a      	add	r3, pc, #232	; (adr r3, 8001288 <main+0x418>)
 800119e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a2:	f7ff f9a9 	bl	80004f8 <__aeabi_dmul>
 80011a6:	4602      	mov	r2, r0
 80011a8:	460b      	mov	r3, r1
 80011aa:	4610      	mov	r0, r2
 80011ac:	4619      	mov	r1, r3
 80011ae:	f7ff fbb5 	bl	800091c <__aeabi_d2uiz>
 80011b2:	4603      	mov	r3, r0
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	4b38      	ldr	r3, [pc, #224]	; (8001298 <main+0x428>)
 80011b8:	801a      	strh	r2, [r3, #0]
			  sprintf(charBuffer, "%u mW\r\n", temp);
 80011ba:	4b37      	ldr	r3, [pc, #220]	; (8001298 <main+0x428>)
 80011bc:	881b      	ldrh	r3, [r3, #0]
 80011be:	461a      	mov	r2, r3
 80011c0:	4936      	ldr	r1, [pc, #216]	; (800129c <main+0x42c>)
 80011c2:	4837      	ldr	r0, [pc, #220]	; (80012a0 <main+0x430>)
 80011c4:	f003 fc4e 	bl	8004a64 <siprintf>
			  break;
 80011c8:	e04a      	b.n	8001260 <main+0x3f0>
	  	  case 5:
			  //charge status
			  HAL_I2C_Mem_Read(&hi2c1, 0x09<<1, 0x07, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 80011ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ce:	9302      	str	r3, [sp, #8]
 80011d0:	2303      	movs	r3, #3
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	4b2e      	ldr	r3, [pc, #184]	; (8001290 <main+0x420>)
 80011d6:	9300      	str	r3, [sp, #0]
 80011d8:	2301      	movs	r3, #1
 80011da:	2207      	movs	r2, #7
 80011dc:	2112      	movs	r1, #18
 80011de:	482d      	ldr	r0, [pc, #180]	; (8001294 <main+0x424>)
 80011e0:	f001 fbb8 	bl	8002954 <HAL_I2C_Mem_Read>
			  temp = (aRxBuffer[0] & 0b00011000)>>3;
 80011e4:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <main+0x420>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	10db      	asrs	r3, r3, #3
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	b29a      	uxth	r2, r3
 80011f2:	4b29      	ldr	r3, [pc, #164]	; (8001298 <main+0x428>)
 80011f4:	801a      	strh	r2, [r3, #0]
			  switch (temp) {
 80011f6:	4b28      	ldr	r3, [pc, #160]	; (8001298 <main+0x428>)
 80011f8:	881b      	ldrh	r3, [r3, #0]
 80011fa:	2b03      	cmp	r3, #3
 80011fc:	d82a      	bhi.n	8001254 <main+0x3e4>
 80011fe:	a201      	add	r2, pc, #4	; (adr r2, 8001204 <main+0x394>)
 8001200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001204:	08001215 	.word	0x08001215
 8001208:	08001225 	.word	0x08001225
 800120c:	08001235 	.word	0x08001235
 8001210:	08001245 	.word	0x08001245
				  case 0:
					  sprintf(charBuffer, "No Chrg", temp);
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <main+0x428>)
 8001216:	881b      	ldrh	r3, [r3, #0]
 8001218:	461a      	mov	r2, r3
 800121a:	4922      	ldr	r1, [pc, #136]	; (80012a4 <main+0x434>)
 800121c:	4820      	ldr	r0, [pc, #128]	; (80012a0 <main+0x430>)
 800121e:	f003 fc21 	bl	8004a64 <siprintf>
					  break;
 8001222:	e018      	b.n	8001256 <main+0x3e6>
				  case 1:
					  sprintf(charBuffer, "Pre Chrg", temp);
 8001224:	4b1c      	ldr	r3, [pc, #112]	; (8001298 <main+0x428>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	491f      	ldr	r1, [pc, #124]	; (80012a8 <main+0x438>)
 800122c:	481c      	ldr	r0, [pc, #112]	; (80012a0 <main+0x430>)
 800122e:	f003 fc19 	bl	8004a64 <siprintf>
					  break;
 8001232:	e010      	b.n	8001256 <main+0x3e6>
				  case 2:
					  sprintf(charBuffer, "Charging", temp);
 8001234:	4b18      	ldr	r3, [pc, #96]	; (8001298 <main+0x428>)
 8001236:	881b      	ldrh	r3, [r3, #0]
 8001238:	461a      	mov	r2, r3
 800123a:	491c      	ldr	r1, [pc, #112]	; (80012ac <main+0x43c>)
 800123c:	4818      	ldr	r0, [pc, #96]	; (80012a0 <main+0x430>)
 800123e:	f003 fc11 	bl	8004a64 <siprintf>
					  break;
 8001242:	e008      	b.n	8001256 <main+0x3e6>
				  case 3:
					  sprintf(charBuffer, "Done!", temp);
 8001244:	4b14      	ldr	r3, [pc, #80]	; (8001298 <main+0x428>)
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4919      	ldr	r1, [pc, #100]	; (80012b0 <main+0x440>)
 800124c:	4814      	ldr	r0, [pc, #80]	; (80012a0 <main+0x430>)
 800124e:	f003 fc09 	bl	8004a64 <siprintf>
					  break;
 8001252:	e000      	b.n	8001256 <main+0x3e6>
				  default:
					  break;
 8001254:	bf00      	nop
			  }
			  break;
 8001256:	e003      	b.n	8001260 <main+0x3f0>
	  	  default:
		  	  read_state = 0;
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <main+0x444>)
 800125a:	2200      	movs	r2, #0
 800125c:	701a      	strb	r2, [r3, #0]
		  	  break;
 800125e:	bf00      	nop
	  }



	  ssd1306_Fill(Black);
 8001260:	2000      	movs	r0, #0
 8001262:	f000 fac7 	bl	80017f4 <ssd1306_Fill>
	  ssd1306_SetCursor(0, 0);
 8001266:	2100      	movs	r1, #0
 8001268:	2000      	movs	r0, #0
 800126a:	f000 fc1b 	bl	8001aa4 <ssd1306_SetCursor>
	  ssd1306_WriteString(&charBuffer, Font_16x26, White);
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <main+0x448>)
 8001270:	2301      	movs	r3, #1
 8001272:	ca06      	ldmia	r2, {r1, r2}
 8001274:	480a      	ldr	r0, [pc, #40]	; (80012a0 <main+0x430>)
 8001276:	f000 fbef 	bl	8001a58 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 800127a:	f000 fadd 	bl	8001838 <ssd1306_UpdateScreen>
	  //ssd1306_Fill(Black);
	  //ssd1306_SetCursor(96, 0);
	  //ssd1306_WriteString(&charBuffer, Font_11x18, White);
	  //ssd1306_UpdateScreen();

	  HAL_Delay(100);
 800127e:	2064      	movs	r0, #100	; 0x64
 8001280:	f000 fe4a 	bl	8001f18 <HAL_Delay>
	  switch (read_state) {
 8001284:	e66f      	b.n	8000f66 <main+0xf6>
 8001286:	bf00      	nop
 8001288:	2ca5d05f 	.word	0x2ca5d05f
 800128c:	3f890001 	.word	0x3f890001
 8001290:	2000035c 	.word	0x2000035c
 8001294:	200002b0 	.word	0x200002b0
 8001298:	20000304 	.word	0x20000304
 800129c:	080052c0 	.word	0x080052c0
 80012a0:	2000034c 	.word	0x2000034c
 80012a4:	080052c8 	.word	0x080052c8
 80012a8:	080052d0 	.word	0x080052d0
 80012ac:	080052dc 	.word	0x080052dc
 80012b0:	080052e8 	.word	0x080052e8
 80012b4:	20000094 	.word	0x20000094
 80012b8:	20000000 	.word	0x20000000

080012bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b092      	sub	sp, #72	; 0x48
 80012c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	2234      	movs	r2, #52	; 0x34
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f003 fbc2 	bl	8004a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d0:	463b      	mov	r3, r7
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
 80012dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012de:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <SystemClock_Config+0x8c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80012e6:	4a18      	ldr	r2, [pc, #96]	; (8001348 <SystemClock_Config+0x8c>)
 80012e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80012ec:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80012ee:	2310      	movs	r3, #16
 80012f0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80012f2:	2301      	movs	r3, #1
 80012f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80012fa:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 80012fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001300:	2300      	movs	r3, #0
 8001302:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001304:	f107 0314 	add.w	r3, r7, #20
 8001308:	4618      	mov	r0, r3
 800130a:	f002 f8a3 	bl	8003454 <HAL_RCC_OscConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001314:	f000 f9c6 	bl	80016a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001318:	230f      	movs	r3, #15
 800131a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800131c:	2300      	movs	r3, #0
 800131e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001320:	2300      	movs	r3, #0
 8001322:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001328:	2300      	movs	r3, #0
 800132a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800132c:	463b      	mov	r3, r7
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f002 fbbf 	bl	8003ab4 <HAL_RCC_ClockConfig>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800133c:	f000 f9b2 	bl	80016a4 <Error_Handler>
  }
}
 8001340:	bf00      	nop
 8001342:	3748      	adds	r7, #72	; 0x48
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40007000 	.word	0x40007000

0800134c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <MX_I2C1_Init+0x50>)
 8001352:	4a13      	ldr	r2, [pc, #76]	; (80013a0 <MX_I2C1_Init+0x54>)
 8001354:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <MX_I2C1_Init+0x50>)
 8001358:	4a12      	ldr	r2, [pc, #72]	; (80013a4 <MX_I2C1_Init+0x58>)
 800135a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <MX_I2C1_Init+0x50>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <MX_I2C1_Init+0x50>)
 8001364:	2200      	movs	r2, #0
 8001366:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <MX_I2C1_Init+0x50>)
 800136a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800136e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <MX_I2C1_Init+0x50>)
 8001372:	2200      	movs	r2, #0
 8001374:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <MX_I2C1_Init+0x50>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <MX_I2C1_Init+0x50>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <MX_I2C1_Init+0x50>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001388:	4804      	ldr	r0, [pc, #16]	; (800139c <MX_I2C1_Init+0x50>)
 800138a:	f001 f8a5 	bl	80024d8 <HAL_I2C_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001394:	f000 f986 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200002b0 	.word	0x200002b0
 80013a0:	40005400 	.word	0x40005400
 80013a4:	000186a0 	.word	0x000186a0

080013a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b086      	sub	sp, #24
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013bc:	463b      	mov	r3, r7
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013c4:	4b1d      	ldr	r3, [pc, #116]	; (800143c <MX_TIM2_Init+0x94>)
 80013c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2097;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_TIM2_Init+0x94>)
 80013ce:	f640 0231 	movw	r2, #2097	; 0x831
 80013d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <MX_TIM2_Init+0x94>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 80013da:	4b18      	ldr	r3, [pc, #96]	; (800143c <MX_TIM2_Init+0x94>)
 80013dc:	2232      	movs	r2, #50	; 0x32
 80013de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e0:	4b16      	ldr	r3, [pc, #88]	; (800143c <MX_TIM2_Init+0x94>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <MX_TIM2_Init+0x94>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013ec:	4813      	ldr	r0, [pc, #76]	; (800143c <MX_TIM2_Init+0x94>)
 80013ee:	f002 fdcd 	bl	8003f8c <HAL_TIM_Base_Init>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013f8:	f000 f954 	bl	80016a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001400:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001402:	f107 0308 	add.w	r3, r7, #8
 8001406:	4619      	mov	r1, r3
 8001408:	480c      	ldr	r0, [pc, #48]	; (800143c <MX_TIM2_Init+0x94>)
 800140a:	f002 ff53 	bl	80042b4 <HAL_TIM_ConfigClockSource>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001414:	f000 f946 	bl	80016a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001418:	2300      	movs	r3, #0
 800141a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001420:	463b      	mov	r3, r7
 8001422:	4619      	mov	r1, r3
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_TIM2_Init+0x94>)
 8001426:	f003 f933 	bl	8004690 <HAL_TIMEx_MasterConfigSynchronization>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001430:	f000 f938 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001434:	bf00      	nop
 8001436:	3718      	adds	r7, #24
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000360 	.word	0x20000360

08001440 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <MX_USART1_UART_Init+0x4c>)
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <MX_USART1_UART_Init+0x50>)
 8001448:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <MX_USART1_UART_Init+0x4c>)
 800144c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001450:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_USART1_UART_Init+0x4c>)
 8001454:	2200      	movs	r2, #0
 8001456:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MX_USART1_UART_Init+0x4c>)
 800145a:	2200      	movs	r2, #0
 800145c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <MX_USART1_UART_Init+0x4c>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <MX_USART1_UART_Init+0x4c>)
 8001466:	220c      	movs	r2, #12
 8001468:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800146a:	4b08      	ldr	r3, [pc, #32]	; (800148c <MX_USART1_UART_Init+0x4c>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <MX_USART1_UART_Init+0x4c>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001476:	4805      	ldr	r0, [pc, #20]	; (800148c <MX_USART1_UART_Init+0x4c>)
 8001478:	f003 f968 	bl	800474c <HAL_UART_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001482:	f000 f90f 	bl	80016a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000308 	.word	0x20000308
 8001490:	40013800 	.word	0x40013800

08001494 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b088      	sub	sp, #32
 8001498:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149a:	f107 030c 	add.w	r3, r7, #12
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014aa:	4b19      	ldr	r3, [pc, #100]	; (8001510 <MX_GPIO_Init+0x7c>)
 80014ac:	69db      	ldr	r3, [r3, #28]
 80014ae:	4a18      	ldr	r2, [pc, #96]	; (8001510 <MX_GPIO_Init+0x7c>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	61d3      	str	r3, [r2, #28]
 80014b6:	4b16      	ldr	r3, [pc, #88]	; (8001510 <MX_GPIO_Init+0x7c>)
 80014b8:	69db      	ldr	r3, [r3, #28]
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c2:	4b13      	ldr	r3, [pc, #76]	; (8001510 <MX_GPIO_Init+0x7c>)
 80014c4:	69db      	ldr	r3, [r3, #28]
 80014c6:	4a12      	ldr	r2, [pc, #72]	; (8001510 <MX_GPIO_Init+0x7c>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	61d3      	str	r3, [r2, #28]
 80014ce:	4b10      	ldr	r3, [pc, #64]	; (8001510 <MX_GPIO_Init+0x7c>)
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : SW_R_Pin SW_D_Pin SW_L_Pin SW_U_Pin */
  GPIO_InitStruct.Pin = SW_R_Pin|SW_D_Pin|SW_L_Pin|SW_U_Pin;
 80014da:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80014de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014e6:	2301      	movs	r3, #1
 80014e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	4619      	mov	r1, r3
 80014f0:	4808      	ldr	r0, [pc, #32]	; (8001514 <MX_GPIO_Init+0x80>)
 80014f2:	f000 fe41 	bl	8002178 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	2028      	movs	r0, #40	; 0x28
 80014fc:	f000 fe05 	bl	800210a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001500:	2028      	movs	r0, #40	; 0x28
 8001502:	f000 fe1e 	bl	8002142 <HAL_NVIC_EnableIRQ>

}
 8001506:	bf00      	nop
 8001508:	3720      	adds	r7, #32
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	40020400 	.word	0x40020400

08001518 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001528:	d00f      	beq.n	800154a <HAL_GPIO_EXTI_Callback+0x32>
 800152a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800152e:	dc28      	bgt.n	8001582 <HAL_GPIO_EXTI_Callback+0x6a>
 8001530:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001534:	d017      	beq.n	8001566 <HAL_GPIO_EXTI_Callback+0x4e>
 8001536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800153a:	dc22      	bgt.n	8001582 <HAL_GPIO_EXTI_Callback+0x6a>
 800153c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001540:	d018      	beq.n	8001574 <HAL_GPIO_EXTI_Callback+0x5c>
 8001542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001546:	d007      	beq.n	8001558 <HAL_GPIO_EXTI_Callback+0x40>
		case SW_R_Pin:
			state_SW_R = 1;
			HAL_TIM_Base_Start_IT(&htim2);
			break;
		default:
			break;
 8001548:	e01b      	b.n	8001582 <HAL_GPIO_EXTI_Callback+0x6a>
			state_SW_U = 1;
 800154a:	4b10      	ldr	r3, [pc, #64]	; (800158c <HAL_GPIO_EXTI_Callback+0x74>)
 800154c:	2201      	movs	r2, #1
 800154e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 8001550:	480f      	ldr	r0, [pc, #60]	; (8001590 <HAL_GPIO_EXTI_Callback+0x78>)
 8001552:	f002 fd5b 	bl	800400c <HAL_TIM_Base_Start_IT>
			break;
 8001556:	e015      	b.n	8001584 <HAL_GPIO_EXTI_Callback+0x6c>
			state_SW_D = 1;
 8001558:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <HAL_GPIO_EXTI_Callback+0x7c>)
 800155a:	2201      	movs	r2, #1
 800155c:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 800155e:	480c      	ldr	r0, [pc, #48]	; (8001590 <HAL_GPIO_EXTI_Callback+0x78>)
 8001560:	f002 fd54 	bl	800400c <HAL_TIM_Base_Start_IT>
			break;
 8001564:	e00e      	b.n	8001584 <HAL_GPIO_EXTI_Callback+0x6c>
			state_SW_L = 1;
 8001566:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <HAL_GPIO_EXTI_Callback+0x80>)
 8001568:	2201      	movs	r2, #1
 800156a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 800156c:	4808      	ldr	r0, [pc, #32]	; (8001590 <HAL_GPIO_EXTI_Callback+0x78>)
 800156e:	f002 fd4d 	bl	800400c <HAL_TIM_Base_Start_IT>
			break;
 8001572:	e007      	b.n	8001584 <HAL_GPIO_EXTI_Callback+0x6c>
			state_SW_R = 1;
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_GPIO_EXTI_Callback+0x84>)
 8001576:	2201      	movs	r2, #1
 8001578:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 800157a:	4805      	ldr	r0, [pc, #20]	; (8001590 <HAL_GPIO_EXTI_Callback+0x78>)
 800157c:	f002 fd46 	bl	800400c <HAL_TIM_Base_Start_IT>
			break;
 8001580:	e000      	b.n	8001584 <HAL_GPIO_EXTI_Callback+0x6c>
			break;
 8001582:	bf00      	nop
	}
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	20000095 	.word	0x20000095
 8001590:	20000360 	.word	0x20000360
 8001594:	20000096 	.word	0x20000096
 8001598:	20000097 	.word	0x20000097
 800159c:	20000098 	.word	0x20000098

080015a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if (htim == &htim2) {
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a37      	ldr	r2, [pc, #220]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d167      	bne.n	8001680 <HAL_TIM_PeriodElapsedCallback+0xe0>
	 if (state_SW_U == 1 && HAL_GPIO_ReadPin(SW_U_GPIO_Port, SW_U_Pin) == GPIO_PIN_RESET) {
 80015b0:	4b36      	ldr	r3, [pc, #216]	; (800168c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d11d      	bne.n	80015f4 <HAL_TIM_PeriodElapsedCallback+0x54>
 80015b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015bc:	4834      	ldr	r0, [pc, #208]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80015be:	f000 ff5b 	bl	8002478 <HAL_GPIO_ReadPin>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d115      	bne.n	80015f4 <HAL_TIM_PeriodElapsedCallback+0x54>
		 state_SW_U = 0;
 80015c8:	4b30      	ldr	r3, [pc, #192]	; (800168c <HAL_TIM_PeriodElapsedCallback+0xec>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	701a      	strb	r2, [r3, #0]
		 HAL_TIM_Base_Stop_IT(&htim2);
 80015ce:	482e      	ldr	r0, [pc, #184]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80015d0:	f002 fd6e 	bl	80040b0 <HAL_TIM_Base_Stop_IT>

		 if (read_state == 5) {
 80015d4:	4b2f      	ldr	r3, [pc, #188]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b05      	cmp	r3, #5
 80015dc:	d103      	bne.n	80015e6 <HAL_TIM_PeriodElapsedCallback+0x46>
			 read_state = 0;
 80015de:	4b2d      	ldr	r3, [pc, #180]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
 80015e4:	e006      	b.n	80015f4 <HAL_TIM_PeriodElapsedCallback+0x54>
		 } else {
			 read_state++;
 80015e6:	4b2b      	ldr	r3, [pc, #172]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	3301      	adds	r3, #1
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	4b28      	ldr	r3, [pc, #160]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80015f2:	701a      	strb	r2, [r3, #0]
		 }
	 }
	 if (state_SW_D == 1 && HAL_GPIO_ReadPin(SW_D_GPIO_Port, SW_D_Pin) == GPIO_PIN_RESET) {
 80015f4:	4b28      	ldr	r3, [pc, #160]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d11d      	bne.n	8001638 <HAL_TIM_PeriodElapsedCallback+0x98>
 80015fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001600:	4823      	ldr	r0, [pc, #140]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001602:	f000 ff39 	bl	8002478 <HAL_GPIO_ReadPin>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d115      	bne.n	8001638 <HAL_TIM_PeriodElapsedCallback+0x98>
		 state_SW_D = 0;
 800160c:	4b22      	ldr	r3, [pc, #136]	; (8001698 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
		 HAL_TIM_Base_Stop_IT(&htim2);
 8001612:	481d      	ldr	r0, [pc, #116]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001614:	f002 fd4c 	bl	80040b0 <HAL_TIM_Base_Stop_IT>

		 if (read_state == 0) {
 8001618:	4b1e      	ldr	r3, [pc, #120]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d103      	bne.n	800162a <HAL_TIM_PeriodElapsedCallback+0x8a>
			 read_state = 5;
 8001622:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001624:	2205      	movs	r2, #5
 8001626:	701a      	strb	r2, [r3, #0]
 8001628:	e006      	b.n	8001638 <HAL_TIM_PeriodElapsedCallback+0x98>
		 } else {
			 read_state--;
 800162a:	4b1a      	ldr	r3, [pc, #104]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	3b01      	subs	r3, #1
 8001632:	b2da      	uxtb	r2, r3
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001636:	701a      	strb	r2, [r3, #0]
		 }
	 }
	 if (state_SW_L == 1 && HAL_GPIO_ReadPin(SW_L_GPIO_Port, SW_L_Pin) == GPIO_PIN_RESET) {
 8001638:	4b18      	ldr	r3, [pc, #96]	; (800169c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d10d      	bne.n	800165c <HAL_TIM_PeriodElapsedCallback+0xbc>
 8001640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001644:	4812      	ldr	r0, [pc, #72]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001646:	f000 ff17 	bl	8002478 <HAL_GPIO_ReadPin>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d105      	bne.n	800165c <HAL_TIM_PeriodElapsedCallback+0xbc>
		 state_SW_L = 0;
 8001650:	4b12      	ldr	r3, [pc, #72]	; (800169c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001652:	2200      	movs	r2, #0
 8001654:	701a      	strb	r2, [r3, #0]
		 HAL_TIM_Base_Stop_IT(&htim2);
 8001656:	480c      	ldr	r0, [pc, #48]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001658:	f002 fd2a 	bl	80040b0 <HAL_TIM_Base_Stop_IT>
	 }
	 if (state_SW_R == 1 && HAL_GPIO_ReadPin(SW_R_GPIO_Port, SW_R_Pin) == GPIO_PIN_RESET) {
 800165c:	4b10      	ldr	r3, [pc, #64]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d10d      	bne.n	8001680 <HAL_TIM_PeriodElapsedCallback+0xe0>
 8001664:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001668:	4809      	ldr	r0, [pc, #36]	; (8001690 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 800166a:	f000 ff05 	bl	8002478 <HAL_GPIO_ReadPin>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d105      	bne.n	8001680 <HAL_TIM_PeriodElapsedCallback+0xe0>
		 state_SW_R = 0;
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001676:	2200      	movs	r2, #0
 8001678:	701a      	strb	r2, [r3, #0]
		 HAL_TIM_Base_Stop_IT(&htim2);
 800167a:	4803      	ldr	r0, [pc, #12]	; (8001688 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800167c:	f002 fd18 	bl	80040b0 <HAL_TIM_Base_Stop_IT>
	 }
  }
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	20000360 	.word	0x20000360
 800168c:	20000095 	.word	0x20000095
 8001690:	40020400 	.word	0x40020400
 8001694:	20000094 	.word	0x20000094
 8001698:	20000096 	.word	0x20000096
 800169c:	20000097 	.word	0x20000097
 80016a0:	20000098 	.word	0x20000098

080016a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016a8:	b672      	cpsid	i
}
 80016aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016ac:	e7fe      	b.n	80016ac <Error_Handler+0x8>

080016ae <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bc80      	pop	{r7}
 80016b8:	4770      	bx	lr
	...

080016bc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af04      	add	r7, sp, #16
 80016c2:	4603      	mov	r3, r0
 80016c4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295
 80016ca:	9302      	str	r3, [sp, #8]
 80016cc:	2301      	movs	r3, #1
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	1dfb      	adds	r3, r7, #7
 80016d2:	9300      	str	r3, [sp, #0]
 80016d4:	2301      	movs	r3, #1
 80016d6:	2200      	movs	r2, #0
 80016d8:	2178      	movs	r1, #120	; 0x78
 80016da:	4803      	ldr	r0, [pc, #12]	; (80016e8 <ssd1306_WriteCommand+0x2c>)
 80016dc:	f001 f840 	bl	8002760 <HAL_I2C_Mem_Write>
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	200002b0 	.word	0x200002b0

080016ec <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af04      	add	r7, sp, #16
 80016f2:	6078      	str	r0, [r7, #4]
 80016f4:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	f04f 32ff 	mov.w	r2, #4294967295
 80016fe:	9202      	str	r2, [sp, #8]
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2301      	movs	r3, #1
 8001708:	2240      	movs	r2, #64	; 0x40
 800170a:	2178      	movs	r1, #120	; 0x78
 800170c:	4803      	ldr	r0, [pc, #12]	; (800171c <ssd1306_WriteData+0x30>)
 800170e:	f001 f827 	bl	8002760 <HAL_I2C_Mem_Write>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	200002b0 	.word	0x200002b0

08001720 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001724:	f7ff ffc3 	bl	80016ae <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001728:	2064      	movs	r0, #100	; 0x64
 800172a:	f000 fbf5 	bl	8001f18 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800172e:	2000      	movs	r0, #0
 8001730:	f000 f9e4 	bl	8001afc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001734:	2020      	movs	r0, #32
 8001736:	f7ff ffc1 	bl	80016bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800173a:	2000      	movs	r0, #0
 800173c:	f7ff ffbe 	bl	80016bc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001740:	20b0      	movs	r0, #176	; 0xb0
 8001742:	f7ff ffbb 	bl	80016bc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001746:	20c8      	movs	r0, #200	; 0xc8
 8001748:	f7ff ffb8 	bl	80016bc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800174c:	2000      	movs	r0, #0
 800174e:	f7ff ffb5 	bl	80016bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001752:	2010      	movs	r0, #16
 8001754:	f7ff ffb2 	bl	80016bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001758:	2040      	movs	r0, #64	; 0x40
 800175a:	f7ff ffaf 	bl	80016bc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800175e:	20ff      	movs	r0, #255	; 0xff
 8001760:	f000 f9b8 	bl	8001ad4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001764:	20a1      	movs	r0, #161	; 0xa1
 8001766:	f7ff ffa9 	bl	80016bc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800176a:	20a6      	movs	r0, #166	; 0xa6
 800176c:	f7ff ffa6 	bl	80016bc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001770:	20a8      	movs	r0, #168	; 0xa8
 8001772:	f7ff ffa3 	bl	80016bc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8001776:	201f      	movs	r0, #31
 8001778:	f7ff ffa0 	bl	80016bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800177c:	20a4      	movs	r0, #164	; 0xa4
 800177e:	f7ff ff9d 	bl	80016bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001782:	20d3      	movs	r0, #211	; 0xd3
 8001784:	f7ff ff9a 	bl	80016bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001788:	2000      	movs	r0, #0
 800178a:	f7ff ff97 	bl	80016bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800178e:	20d5      	movs	r0, #213	; 0xd5
 8001790:	f7ff ff94 	bl	80016bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001794:	20f0      	movs	r0, #240	; 0xf0
 8001796:	f7ff ff91 	bl	80016bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800179a:	20d9      	movs	r0, #217	; 0xd9
 800179c:	f7ff ff8e 	bl	80016bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80017a0:	2022      	movs	r0, #34	; 0x22
 80017a2:	f7ff ff8b 	bl	80016bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80017a6:	20da      	movs	r0, #218	; 0xda
 80017a8:	f7ff ff88 	bl	80016bc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80017ac:	2002      	movs	r0, #2
 80017ae:	f7ff ff85 	bl	80016bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80017b2:	20db      	movs	r0, #219	; 0xdb
 80017b4:	f7ff ff82 	bl	80016bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80017b8:	2020      	movs	r0, #32
 80017ba:	f7ff ff7f 	bl	80016bc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80017be:	208d      	movs	r0, #141	; 0x8d
 80017c0:	f7ff ff7c 	bl	80016bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80017c4:	2014      	movs	r0, #20
 80017c6:	f7ff ff79 	bl	80016bc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80017ca:	2001      	movs	r0, #1
 80017cc:	f000 f996 	bl	8001afc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80017d0:	2000      	movs	r0, #0
 80017d2:	f000 f80f 	bl	80017f4 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80017d6:	f000 f82f 	bl	8001838 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <ssd1306_Init+0xd0>)
 80017dc:	2200      	movs	r2, #0
 80017de:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80017e0:	4b03      	ldr	r3, [pc, #12]	; (80017f0 <ssd1306_Init+0xd0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80017e6:	4b02      	ldr	r3, [pc, #8]	; (80017f0 <ssd1306_Init+0xd0>)
 80017e8:	2201      	movs	r2, #1
 80017ea:	715a      	strb	r2, [r3, #5]
}
 80017ec:	bf00      	nop
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	2000029c 	.word	0x2000029c

080017f4 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4603      	mov	r3, r0
 80017fc:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 80017fe:	2300      	movs	r3, #0
 8001800:	60fb      	str	r3, [r7, #12]
 8001802:	e00d      	b.n	8001820 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <ssd1306_Fill+0x1a>
 800180a:	2100      	movs	r1, #0
 800180c:	e000      	b.n	8001810 <ssd1306_Fill+0x1c>
 800180e:	21ff      	movs	r1, #255	; 0xff
 8001810:	4a08      	ldr	r2, [pc, #32]	; (8001834 <ssd1306_Fill+0x40>)
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	4413      	add	r3, r2
 8001816:	460a      	mov	r2, r1
 8001818:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3301      	adds	r3, #1
 800181e:	60fb      	str	r3, [r7, #12]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001826:	d3ed      	bcc.n	8001804 <ssd1306_Fill+0x10>
    }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3714      	adds	r7, #20
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr
 8001834:	2000009c 	.word	0x2000009c

08001838 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800183e:	2300      	movs	r3, #0
 8001840:	71fb      	strb	r3, [r7, #7]
 8001842:	e016      	b.n	8001872 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	3b50      	subs	r3, #80	; 0x50
 8001848:	b2db      	uxtb	r3, r3
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff ff36 	bl	80016bc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001850:	2000      	movs	r0, #0
 8001852:	f7ff ff33 	bl	80016bc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001856:	2010      	movs	r0, #16
 8001858:	f7ff ff30 	bl	80016bc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800185c:	79fb      	ldrb	r3, [r7, #7]
 800185e:	01db      	lsls	r3, r3, #7
 8001860:	4a08      	ldr	r2, [pc, #32]	; (8001884 <ssd1306_UpdateScreen+0x4c>)
 8001862:	4413      	add	r3, r2
 8001864:	2180      	movs	r1, #128	; 0x80
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff ff40 	bl	80016ec <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	3301      	adds	r3, #1
 8001870:	71fb      	strb	r3, [r7, #7]
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	2b03      	cmp	r3, #3
 8001876:	d9e5      	bls.n	8001844 <ssd1306_UpdateScreen+0xc>
    }
}
 8001878:	bf00      	nop
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	2000009c 	.word	0x2000009c

08001888 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
 8001892:	460b      	mov	r3, r1
 8001894:	71bb      	strb	r3, [r7, #6]
 8001896:	4613      	mov	r3, r2
 8001898:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	db48      	blt.n	8001934 <ssd1306_DrawPixel+0xac>
 80018a2:	79bb      	ldrb	r3, [r7, #6]
 80018a4:	2b1f      	cmp	r3, #31
 80018a6:	d845      	bhi.n	8001934 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80018a8:	4b25      	ldr	r3, [pc, #148]	; (8001940 <ssd1306_DrawPixel+0xb8>)
 80018aa:	791b      	ldrb	r3, [r3, #4]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d006      	beq.n	80018be <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80018b0:	797b      	ldrb	r3, [r7, #5]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	bf0c      	ite	eq
 80018b6:	2301      	moveq	r3, #1
 80018b8:	2300      	movne	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80018be:	797b      	ldrb	r3, [r7, #5]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d11a      	bne.n	80018fa <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80018c4:	79fa      	ldrb	r2, [r7, #7]
 80018c6:	79bb      	ldrb	r3, [r7, #6]
 80018c8:	08db      	lsrs	r3, r3, #3
 80018ca:	b2d8      	uxtb	r0, r3
 80018cc:	4603      	mov	r3, r0
 80018ce:	01db      	lsls	r3, r3, #7
 80018d0:	4413      	add	r3, r2
 80018d2:	4a1c      	ldr	r2, [pc, #112]	; (8001944 <ssd1306_DrawPixel+0xbc>)
 80018d4:	5cd3      	ldrb	r3, [r2, r3]
 80018d6:	b25a      	sxtb	r2, r3
 80018d8:	79bb      	ldrb	r3, [r7, #6]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	2101      	movs	r1, #1
 80018e0:	fa01 f303 	lsl.w	r3, r1, r3
 80018e4:	b25b      	sxtb	r3, r3
 80018e6:	4313      	orrs	r3, r2
 80018e8:	b259      	sxtb	r1, r3
 80018ea:	79fa      	ldrb	r2, [r7, #7]
 80018ec:	4603      	mov	r3, r0
 80018ee:	01db      	lsls	r3, r3, #7
 80018f0:	4413      	add	r3, r2
 80018f2:	b2c9      	uxtb	r1, r1
 80018f4:	4a13      	ldr	r2, [pc, #76]	; (8001944 <ssd1306_DrawPixel+0xbc>)
 80018f6:	54d1      	strb	r1, [r2, r3]
 80018f8:	e01d      	b.n	8001936 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80018fa:	79fa      	ldrb	r2, [r7, #7]
 80018fc:	79bb      	ldrb	r3, [r7, #6]
 80018fe:	08db      	lsrs	r3, r3, #3
 8001900:	b2d8      	uxtb	r0, r3
 8001902:	4603      	mov	r3, r0
 8001904:	01db      	lsls	r3, r3, #7
 8001906:	4413      	add	r3, r2
 8001908:	4a0e      	ldr	r2, [pc, #56]	; (8001944 <ssd1306_DrawPixel+0xbc>)
 800190a:	5cd3      	ldrb	r3, [r2, r3]
 800190c:	b25a      	sxtb	r2, r3
 800190e:	79bb      	ldrb	r3, [r7, #6]
 8001910:	f003 0307 	and.w	r3, r3, #7
 8001914:	2101      	movs	r1, #1
 8001916:	fa01 f303 	lsl.w	r3, r1, r3
 800191a:	b25b      	sxtb	r3, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	b25b      	sxtb	r3, r3
 8001920:	4013      	ands	r3, r2
 8001922:	b259      	sxtb	r1, r3
 8001924:	79fa      	ldrb	r2, [r7, #7]
 8001926:	4603      	mov	r3, r0
 8001928:	01db      	lsls	r3, r3, #7
 800192a:	4413      	add	r3, r2
 800192c:	b2c9      	uxtb	r1, r1
 800192e:	4a05      	ldr	r2, [pc, #20]	; (8001944 <ssd1306_DrawPixel+0xbc>)
 8001930:	54d1      	strb	r1, [r2, r3]
 8001932:	e000      	b.n	8001936 <ssd1306_DrawPixel+0xae>
        return;
 8001934:	bf00      	nop
    }
}
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	2000029c 	.word	0x2000029c
 8001944:	2000009c 	.word	0x2000009c

08001948 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001948:	b590      	push	{r4, r7, lr}
 800194a:	b089      	sub	sp, #36	; 0x24
 800194c:	af00      	add	r7, sp, #0
 800194e:	4604      	mov	r4, r0
 8001950:	1d38      	adds	r0, r7, #4
 8001952:	e880 0006 	stmia.w	r0, {r1, r2}
 8001956:	461a      	mov	r2, r3
 8001958:	4623      	mov	r3, r4
 800195a:	73fb      	strb	r3, [r7, #15]
 800195c:	4613      	mov	r3, r2
 800195e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001960:	7bfb      	ldrb	r3, [r7, #15]
 8001962:	2b1f      	cmp	r3, #31
 8001964:	d902      	bls.n	800196c <ssd1306_WriteChar+0x24>
 8001966:	7bfb      	ldrb	r3, [r7, #15]
 8001968:	2b7e      	cmp	r3, #126	; 0x7e
 800196a:	d901      	bls.n	8001970 <ssd1306_WriteChar+0x28>
        return 0;
 800196c:	2300      	movs	r3, #0
 800196e:	e06d      	b.n	8001a4c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001970:	4b38      	ldr	r3, [pc, #224]	; (8001a54 <ssd1306_WriteChar+0x10c>)
 8001972:	881b      	ldrh	r3, [r3, #0]
 8001974:	461a      	mov	r2, r3
 8001976:	793b      	ldrb	r3, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	2b80      	cmp	r3, #128	; 0x80
 800197c:	dc06      	bgt.n	800198c <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800197e:	4b35      	ldr	r3, [pc, #212]	; (8001a54 <ssd1306_WriteChar+0x10c>)
 8001980:	885b      	ldrh	r3, [r3, #2]
 8001982:	461a      	mov	r2, r3
 8001984:	797b      	ldrb	r3, [r7, #5]
 8001986:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001988:	2b20      	cmp	r3, #32
 800198a:	dd01      	ble.n	8001990 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 800198c:	2300      	movs	r3, #0
 800198e:	e05d      	b.n	8001a4c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	e04c      	b.n	8001a30 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	7bfb      	ldrb	r3, [r7, #15]
 800199a:	3b20      	subs	r3, #32
 800199c:	7979      	ldrb	r1, [r7, #5]
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	4619      	mov	r1, r3
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	440b      	add	r3, r1
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80019b0:	2300      	movs	r3, #0
 80019b2:	61bb      	str	r3, [r7, #24]
 80019b4:	e034      	b.n	8001a20 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d012      	beq.n	80019ec <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80019c6:	4b23      	ldr	r3, [pc, #140]	; (8001a54 <ssd1306_WriteChar+0x10c>)
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	b2db      	uxtb	r3, r3
 80019d0:	4413      	add	r3, r2
 80019d2:	b2d8      	uxtb	r0, r3
 80019d4:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <ssd1306_WriteChar+0x10c>)
 80019d6:	885b      	ldrh	r3, [r3, #2]
 80019d8:	b2da      	uxtb	r2, r3
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	4413      	add	r3, r2
 80019e0:	b2db      	uxtb	r3, r3
 80019e2:	7bba      	ldrb	r2, [r7, #14]
 80019e4:	4619      	mov	r1, r3
 80019e6:	f7ff ff4f 	bl	8001888 <ssd1306_DrawPixel>
 80019ea:	e016      	b.n	8001a1a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80019ec:	4b19      	ldr	r3, [pc, #100]	; (8001a54 <ssd1306_WriteChar+0x10c>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	b2da      	uxtb	r2, r3
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	4413      	add	r3, r2
 80019f8:	b2d8      	uxtb	r0, r3
 80019fa:	4b16      	ldr	r3, [pc, #88]	; (8001a54 <ssd1306_WriteChar+0x10c>)
 80019fc:	885b      	ldrh	r3, [r3, #2]
 80019fe:	b2da      	uxtb	r2, r3
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	b2db      	uxtb	r3, r3
 8001a04:	4413      	add	r3, r2
 8001a06:	b2d9      	uxtb	r1, r3
 8001a08:	7bbb      	ldrb	r3, [r7, #14]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	bf0c      	ite	eq
 8001a0e:	2301      	moveq	r3, #1
 8001a10:	2300      	movne	r3, #0
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	461a      	mov	r2, r3
 8001a16:	f7ff ff37 	bl	8001888 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	61bb      	str	r3, [r7, #24]
 8001a20:	793b      	ldrb	r3, [r7, #4]
 8001a22:	461a      	mov	r2, r3
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d3c5      	bcc.n	80019b6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	61fb      	str	r3, [r7, #28]
 8001a30:	797b      	ldrb	r3, [r7, #5]
 8001a32:	461a      	mov	r2, r3
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d3ad      	bcc.n	8001996 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <ssd1306_WriteChar+0x10c>)
 8001a3c:	881a      	ldrh	r2, [r3, #0]
 8001a3e:	793b      	ldrb	r3, [r7, #4]
 8001a40:	b29b      	uxth	r3, r3
 8001a42:	4413      	add	r3, r2
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	4b03      	ldr	r3, [pc, #12]	; (8001a54 <ssd1306_WriteChar+0x10c>)
 8001a48:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3724      	adds	r7, #36	; 0x24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd90      	pop	{r4, r7, pc}
 8001a54:	2000029c 	.word	0x2000029c

08001a58 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	1d38      	adds	r0, r7, #4
 8001a62:	e880 0006 	stmia.w	r0, {r1, r2}
 8001a66:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001a68:	e012      	b.n	8001a90 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	7818      	ldrb	r0, [r3, #0]
 8001a6e:	78fb      	ldrb	r3, [r7, #3]
 8001a70:	1d3a      	adds	r2, r7, #4
 8001a72:	ca06      	ldmia	r2, {r1, r2}
 8001a74:	f7ff ff68 	bl	8001948 <ssd1306_WriteChar>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d002      	beq.n	8001a8a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	e008      	b.n	8001a9c <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1e8      	bne.n	8001a6a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3710      	adds	r7, #16
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001aa4:	b480      	push	{r7}
 8001aa6:	b083      	sub	sp, #12
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	460a      	mov	r2, r1
 8001aae:	71fb      	strb	r3, [r7, #7]
 8001ab0:	4613      	mov	r3, r2
 8001ab2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <ssd1306_SetCursor+0x2c>)
 8001aba:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001abc:	79bb      	ldrb	r3, [r7, #6]
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	4b03      	ldr	r3, [pc, #12]	; (8001ad0 <ssd1306_SetCursor+0x2c>)
 8001ac2:	805a      	strh	r2, [r3, #2]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr
 8001ace:	bf00      	nop
 8001ad0:	2000029c 	.word	0x2000029c

08001ad4 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001ade:	2381      	movs	r3, #129	; 0x81
 8001ae0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001ae2:	7bfb      	ldrb	r3, [r7, #15]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f7ff fde9 	bl	80016bc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff fde5 	bl	80016bc <ssd1306_WriteCommand>
}
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d005      	beq.n	8001b18 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001b0c:	23af      	movs	r3, #175	; 0xaf
 8001b0e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <ssd1306_SetDisplayOn+0x38>)
 8001b12:	2201      	movs	r2, #1
 8001b14:	719a      	strb	r2, [r3, #6]
 8001b16:	e004      	b.n	8001b22 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001b18:	23ae      	movs	r3, #174	; 0xae
 8001b1a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001b1c:	4b05      	ldr	r3, [pc, #20]	; (8001b34 <ssd1306_SetDisplayOn+0x38>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fdc9 	bl	80016bc <ssd1306_WriteCommand>
}
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	2000029c 	.word	0x2000029c

08001b38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001b3e:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <HAL_MspInit+0x58>)
 8001b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b42:	4a13      	ldr	r2, [pc, #76]	; (8001b90 <HAL_MspInit+0x58>)
 8001b44:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001b48:	6253      	str	r3, [r2, #36]	; 0x24
 8001b4a:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_MspInit+0x58>)
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <HAL_MspInit+0x58>)
 8001b58:	6a1b      	ldr	r3, [r3, #32]
 8001b5a:	4a0d      	ldr	r2, [pc, #52]	; (8001b90 <HAL_MspInit+0x58>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6213      	str	r3, [r2, #32]
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_MspInit+0x58>)
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	60bb      	str	r3, [r7, #8]
 8001b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <HAL_MspInit+0x58>)
 8001b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b72:	4a07      	ldr	r2, [pc, #28]	; (8001b90 <HAL_MspInit+0x58>)
 8001b74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b78:	6253      	str	r3, [r2, #36]	; 0x24
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_MspInit+0x58>)
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	40023800 	.word	0x40023800

08001b94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b08a      	sub	sp, #40	; 0x28
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9c:	f107 0314 	add.w	r3, r7, #20
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	605a      	str	r2, [r3, #4]
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	60da      	str	r2, [r3, #12]
 8001baa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a17      	ldr	r2, [pc, #92]	; (8001c10 <HAL_I2C_MspInit+0x7c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d128      	bne.n	8001c08 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bb6:	4b17      	ldr	r3, [pc, #92]	; (8001c14 <HAL_I2C_MspInit+0x80>)
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	4a16      	ldr	r2, [pc, #88]	; (8001c14 <HAL_I2C_MspInit+0x80>)
 8001bbc:	f043 0302 	orr.w	r3, r3, #2
 8001bc0:	61d3      	str	r3, [r2, #28]
 8001bc2:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <HAL_I2C_MspInit+0x80>)
 8001bc4:	69db      	ldr	r3, [r3, #28]
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	613b      	str	r3, [r7, #16]
 8001bcc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001bce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001bd4:	2312      	movs	r3, #18
 8001bd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001be0:	2304      	movs	r3, #4
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001be4:	f107 0314 	add.w	r3, r7, #20
 8001be8:	4619      	mov	r1, r3
 8001bea:	480b      	ldr	r0, [pc, #44]	; (8001c18 <HAL_I2C_MspInit+0x84>)
 8001bec:	f000 fac4 	bl	8002178 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <HAL_I2C_MspInit+0x80>)
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	4a07      	ldr	r2, [pc, #28]	; (8001c14 <HAL_I2C_MspInit+0x80>)
 8001bf6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001bfa:	6253      	str	r3, [r2, #36]	; 0x24
 8001bfc:	4b05      	ldr	r3, [pc, #20]	; (8001c14 <HAL_I2C_MspInit+0x80>)
 8001bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001c08:	bf00      	nop
 8001c0a:	3728      	adds	r7, #40	; 0x28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40005400 	.word	0x40005400
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40020400 	.word	0x40020400

08001c1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c2c:	d113      	bne.n	8001c56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c2e:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <HAL_TIM_Base_MspInit+0x44>)
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	4a0b      	ldr	r2, [pc, #44]	; (8001c60 <HAL_TIM_Base_MspInit+0x44>)
 8001c34:	f043 0301 	orr.w	r3, r3, #1
 8001c38:	6253      	str	r3, [r2, #36]	; 0x24
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <HAL_TIM_Base_MspInit+0x44>)
 8001c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2100      	movs	r1, #0
 8001c4a:	201c      	movs	r0, #28
 8001c4c:	f000 fa5d 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c50:	201c      	movs	r0, #28
 8001c52:	f000 fa76 	bl	8002142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c56:	bf00      	nop
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800

08001c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0314 	add.w	r3, r7, #20
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a17      	ldr	r2, [pc, #92]	; (8001ce0 <HAL_UART_MspInit+0x7c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d127      	bne.n	8001cd6 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c86:	4b17      	ldr	r3, [pc, #92]	; (8001ce4 <HAL_UART_MspInit+0x80>)
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	4a16      	ldr	r2, [pc, #88]	; (8001ce4 <HAL_UART_MspInit+0x80>)
 8001c8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c90:	6213      	str	r3, [r2, #32]
 8001c92:	4b14      	ldr	r3, [pc, #80]	; (8001ce4 <HAL_UART_MspInit+0x80>)
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9e:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <HAL_UART_MspInit+0x80>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	4a10      	ldr	r2, [pc, #64]	; (8001ce4 <HAL_UART_MspInit+0x80>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	61d3      	str	r3, [r2, #28]
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <HAL_UART_MspInit+0x80>)
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cb6:	23c0      	movs	r3, #192	; 0xc0
 8001cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001cc6:	2307      	movs	r3, #7
 8001cc8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cca:	f107 0314 	add.w	r3, r7, #20
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4805      	ldr	r0, [pc, #20]	; (8001ce8 <HAL_UART_MspInit+0x84>)
 8001cd2:	f000 fa51 	bl	8002178 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001cd6:	bf00      	nop
 8001cd8:	3728      	adds	r7, #40	; 0x28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40013800 	.word	0x40013800
 8001ce4:	40023800 	.word	0x40023800
 8001ce8:	40020400 	.word	0x40020400

08001cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cf0:	e7fe      	b.n	8001cf0 <NMI_Handler+0x4>

08001cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cf6:	e7fe      	b.n	8001cf6 <HardFault_Handler+0x4>

08001cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cfc:	e7fe      	b.n	8001cfc <MemManage_Handler+0x4>

08001cfe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d02:	e7fe      	b.n	8001d02 <BusFault_Handler+0x4>

08001d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d08:	e7fe      	b.n	8001d08 <UsageFault_Handler+0x4>

08001d0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001d0e:	bf00      	nop
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bc80      	pop	{r7}
 8001d14:	4770      	bx	lr

08001d16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr

08001d22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bc80      	pop	{r7}
 8001d2c:	4770      	bx	lr

08001d2e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d2e:	b580      	push	{r7, lr}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d32:	f000 f8d5 	bl	8001ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
	...

08001d3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d40:	4802      	ldr	r0, [pc, #8]	; (8001d4c <TIM2_IRQHandler+0x10>)
 8001d42:	f002 f9db 	bl	80040fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d46:	bf00      	nop
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	20000360 	.word	0x20000360

08001d50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8001d54:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001d58:	f000 fba6 	bl	80024a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d5c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d60:	f000 fba2 	bl	80024a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001d64:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001d68:	f000 fb9e 	bl	80024a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8001d6c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001d70:	f000 fb9a 	bl	80024a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001d74:	bf00      	nop
 8001d76:	bd80      	pop	{r7, pc}

08001d78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d80:	4a14      	ldr	r2, [pc, #80]	; (8001dd4 <_sbrk+0x5c>)
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <_sbrk+0x60>)
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d8c:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d102      	bne.n	8001d9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <_sbrk+0x64>)
 8001d96:	4a12      	ldr	r2, [pc, #72]	; (8001de0 <_sbrk+0x68>)
 8001d98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d9a:	4b10      	ldr	r3, [pc, #64]	; (8001ddc <_sbrk+0x64>)
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d207      	bcs.n	8001db8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da8:	f002 fe02 	bl	80049b0 <__errno>
 8001dac:	4603      	mov	r3, r0
 8001dae:	220c      	movs	r2, #12
 8001db0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	e009      	b.n	8001dcc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <_sbrk+0x64>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <_sbrk+0x64>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4413      	add	r3, r2
 8001dc6:	4a05      	ldr	r2, [pc, #20]	; (8001ddc <_sbrk+0x64>)
 8001dc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dca:	68fb      	ldr	r3, [r7, #12]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	20008000 	.word	0x20008000
 8001dd8:	00000400 	.word	0x00000400
 8001ddc:	200002a4 	.word	0x200002a4
 8001de0:	200003b8 	.word	0x200003b8

08001de4 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bc80      	pop	{r7}
 8001dee:	4770      	bx	lr

08001df0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001df0:	480c      	ldr	r0, [pc, #48]	; (8001e24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001df2:	490d      	ldr	r1, [pc, #52]	; (8001e28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001df4:	4a0d      	ldr	r2, [pc, #52]	; (8001e2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df8:	e002      	b.n	8001e00 <LoopCopyDataInit>

08001dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfe:	3304      	adds	r3, #4

08001e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e04:	d3f9      	bcc.n	8001dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e06:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e08:	4c0a      	ldr	r4, [pc, #40]	; (8001e34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e0c:	e001      	b.n	8001e12 <LoopFillZerobss>

08001e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e10:	3204      	adds	r2, #4

08001e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e14:	d3fb      	bcc.n	8001e0e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e16:	f7ff ffe5 	bl	8001de4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e1a:	f002 fdcf 	bl	80049bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e1e:	f7ff f827 	bl	8000e70 <main>
  bx lr
 8001e22:	4770      	bx	lr
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001e2c:	080066a4 	.word	0x080066a4
  ldr r2, =_sbss
 8001e30:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001e34:	200003b4 	.word	0x200003b4

08001e38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC1_IRQHandler>

08001e3a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e44:	2003      	movs	r0, #3
 8001e46:	f000 f955 	bl	80020f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e4a:	200f      	movs	r0, #15
 8001e4c:	f000 f80e 	bl	8001e6c <HAL_InitTick>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	71fb      	strb	r3, [r7, #7]
 8001e5a:	e001      	b.n	8001e60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e5c:	f7ff fe6c 	bl	8001b38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e60:	79fb      	ldrb	r3, [r7, #7]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
	...

08001e6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e78:	4b16      	ldr	r3, [pc, #88]	; (8001ed4 <HAL_InitTick+0x68>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d022      	beq.n	8001ec6 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e80:	4b15      	ldr	r3, [pc, #84]	; (8001ed8 <HAL_InitTick+0x6c>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b13      	ldr	r3, [pc, #76]	; (8001ed4 <HAL_InitTick+0x68>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e94:	4618      	mov	r0, r3
 8001e96:	f000 f962 	bl	800215e <HAL_SYSTICK_Config>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d10f      	bne.n	8001ec0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2b0f      	cmp	r3, #15
 8001ea4:	d809      	bhi.n	8001eba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	f04f 30ff 	mov.w	r0, #4294967295
 8001eae:	f000 f92c 	bl	800210a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eb2:	4a0a      	ldr	r2, [pc, #40]	; (8001edc <HAL_InitTick+0x70>)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6013      	str	r3, [r2, #0]
 8001eb8:	e007      	b.n	8001eca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	73fb      	strb	r3, [r7, #15]
 8001ebe:	e004      	b.n	8001eca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	73fb      	strb	r3, [r7, #15]
 8001ec4:	e001      	b.n	8001eca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000010 	.word	0x20000010
 8001ed8:	20000008 	.word	0x20000008
 8001edc:	2000000c 	.word	0x2000000c

08001ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <HAL_IncTick+0x1c>)
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <HAL_IncTick+0x20>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4413      	add	r3, r2
 8001eee:	4a03      	ldr	r2, [pc, #12]	; (8001efc <HAL_IncTick+0x1c>)
 8001ef0:	6013      	str	r3, [r2, #0]
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	200003a0 	.word	0x200003a0
 8001f00:	20000010 	.word	0x20000010

08001f04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return uwTick;
 8001f08:	4b02      	ldr	r3, [pc, #8]	; (8001f14 <HAL_GetTick+0x10>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr
 8001f14:	200003a0 	.word	0x200003a0

08001f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b084      	sub	sp, #16
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f20:	f7ff fff0 	bl	8001f04 <HAL_GetTick>
 8001f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f30:	d004      	beq.n	8001f3c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <HAL_Delay+0x40>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4413      	add	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f3c:	bf00      	nop
 8001f3e:	f7ff ffe1 	bl	8001f04 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	68fa      	ldr	r2, [r7, #12]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d8f7      	bhi.n	8001f3e <HAL_Delay+0x26>
  {
  }
}
 8001f4e:	bf00      	nop
 8001f50:	bf00      	nop
 8001f52:	3710      	adds	r7, #16
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	20000010 	.word	0x20000010

08001f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	; (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8e:	4a04      	ldr	r2, [pc, #16]	; (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	60d3      	str	r3, [r2, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <__NVIC_GetPriorityGrouping+0x18>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	f003 0307 	and.w	r3, r3, #7
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	db0b      	blt.n	8001fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	f003 021f 	and.w	r2, r3, #31
 8001fd8:	4906      	ldr	r1, [pc, #24]	; (8001ff4 <__NVIC_EnableIRQ+0x34>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	e000e100 	.word	0xe000e100

08001ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	6039      	str	r1, [r7, #0]
 8002002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002008:	2b00      	cmp	r3, #0
 800200a:	db0a      	blt.n	8002022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	b2da      	uxtb	r2, r3
 8002010:	490c      	ldr	r1, [pc, #48]	; (8002044 <__NVIC_SetPriority+0x4c>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	0112      	lsls	r2, r2, #4
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	440b      	add	r3, r1
 800201c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002020:	e00a      	b.n	8002038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4908      	ldr	r1, [pc, #32]	; (8002048 <__NVIC_SetPriority+0x50>)
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	3b04      	subs	r3, #4
 8002030:	0112      	lsls	r2, r2, #4
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	440b      	add	r3, r1
 8002036:	761a      	strb	r2, [r3, #24]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000e100 	.word	0xe000e100
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800204c:	b480      	push	{r7}
 800204e:	b089      	sub	sp, #36	; 0x24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f1c3 0307 	rsb	r3, r3, #7
 8002066:	2b04      	cmp	r3, #4
 8002068:	bf28      	it	cs
 800206a:	2304      	movcs	r3, #4
 800206c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3304      	adds	r3, #4
 8002072:	2b06      	cmp	r3, #6
 8002074:	d902      	bls.n	800207c <NVIC_EncodePriority+0x30>
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3b03      	subs	r3, #3
 800207a:	e000      	b.n	800207e <NVIC_EncodePriority+0x32>
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	f04f 32ff 	mov.w	r2, #4294967295
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43da      	mvns	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	401a      	ands	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002094:	f04f 31ff 	mov.w	r1, #4294967295
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43d9      	mvns	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	4313      	orrs	r3, r2
         );
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3724      	adds	r7, #36	; 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c0:	d301      	bcc.n	80020c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c2:	2301      	movs	r3, #1
 80020c4:	e00f      	b.n	80020e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c6:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <SysTick_Config+0x40>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ce:	210f      	movs	r1, #15
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295
 80020d4:	f7ff ff90 	bl	8001ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <SysTick_Config+0x40>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020de:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <SysTick_Config+0x40>)
 80020e0:	2207      	movs	r2, #7
 80020e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	e000e010 	.word	0xe000e010

080020f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ff2d 	bl	8001f5c <__NVIC_SetPriorityGrouping>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800211c:	f7ff ff42 	bl	8001fa4 <__NVIC_GetPriorityGrouping>
 8002120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	6978      	ldr	r0, [r7, #20]
 8002128:	f7ff ff90 	bl	800204c <NVIC_EncodePriority>
 800212c:	4602      	mov	r2, r0
 800212e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff5f 	bl	8001ff8 <__NVIC_SetPriority>
}
 800213a:	bf00      	nop
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800214c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff35 	bl	8001fc0 <__NVIC_EnableIRQ>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ffa2 	bl	80020b0 <SysTick_Config>
 800216c:	4603      	mov	r3, r0
}
 800216e:	4618      	mov	r0, r3
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
	...

08002178 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002178:	b480      	push	{r7}
 800217a:	b087      	sub	sp, #28
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002182:	2300      	movs	r3, #0
 8002184:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800218a:	2300      	movs	r3, #0
 800218c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800218e:	e154      	b.n	800243a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	2101      	movs	r1, #1
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	fa01 f303 	lsl.w	r3, r1, r3
 800219c:	4013      	ands	r3, r2
 800219e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	f000 8146 	beq.w	8002434 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d005      	beq.n	80021c0 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021bc:	2b02      	cmp	r3, #2
 80021be:	d130      	bne.n	8002222 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	2203      	movs	r2, #3
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	43db      	mvns	r3, r3
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4013      	ands	r3, r2
 80021d6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	693a      	ldr	r2, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 80021f6:	2201      	movs	r2, #1
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	091b      	lsrs	r3, r3, #4
 800220c:	f003 0201 	and.w	r2, r3, #1
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	2b03      	cmp	r3, #3
 800222c:	d017      	beq.n	800225e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	2203      	movs	r2, #3
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	693a      	ldr	r2, [r7, #16]
 8002242:	4013      	ands	r3, r2
 8002244:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	693a      	ldr	r2, [r7, #16]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	693a      	ldr	r2, [r7, #16]
 800225c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f003 0303 	and.w	r3, r3, #3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d123      	bne.n	80022b2 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	08da      	lsrs	r2, r3, #3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3208      	adds	r2, #8
 8002272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002276:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	f003 0307 	and.w	r3, r3, #7
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	220f      	movs	r2, #15
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	43db      	mvns	r3, r3
 8002288:	693a      	ldr	r2, [r7, #16]
 800228a:	4013      	ands	r3, r2
 800228c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	691a      	ldr	r2, [r3, #16]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	08da      	lsrs	r2, r3, #3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	3208      	adds	r2, #8
 80022ac:	6939      	ldr	r1, [r7, #16]
 80022ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	2203      	movs	r2, #3
 80022be:	fa02 f303 	lsl.w	r3, r2, r3
 80022c2:	43db      	mvns	r3, r3
 80022c4:	693a      	ldr	r2, [r7, #16]
 80022c6:	4013      	ands	r3, r2
 80022c8:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 0203 	and.w	r2, r3, #3
 80022d2:	697b      	ldr	r3, [r7, #20]
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	fa02 f303 	lsl.w	r3, r2, r3
 80022da:	693a      	ldr	r2, [r7, #16]
 80022dc:	4313      	orrs	r3, r2
 80022de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 80a0 	beq.w	8002434 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f4:	4b58      	ldr	r3, [pc, #352]	; (8002458 <HAL_GPIO_Init+0x2e0>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4a57      	ldr	r2, [pc, #348]	; (8002458 <HAL_GPIO_Init+0x2e0>)
 80022fa:	f043 0301 	orr.w	r3, r3, #1
 80022fe:	6213      	str	r3, [r2, #32]
 8002300:	4b55      	ldr	r3, [pc, #340]	; (8002458 <HAL_GPIO_Init+0x2e0>)
 8002302:	6a1b      	ldr	r3, [r3, #32]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	60bb      	str	r3, [r7, #8]
 800230a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800230c:	4a53      	ldr	r2, [pc, #332]	; (800245c <HAL_GPIO_Init+0x2e4>)
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	089b      	lsrs	r3, r3, #2
 8002312:	3302      	adds	r3, #2
 8002314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002318:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	f003 0303 	and.w	r3, r3, #3
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	220f      	movs	r2, #15
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a4b      	ldr	r2, [pc, #300]	; (8002460 <HAL_GPIO_Init+0x2e8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d019      	beq.n	800236c <HAL_GPIO_Init+0x1f4>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a4a      	ldr	r2, [pc, #296]	; (8002464 <HAL_GPIO_Init+0x2ec>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d013      	beq.n	8002368 <HAL_GPIO_Init+0x1f0>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a49      	ldr	r2, [pc, #292]	; (8002468 <HAL_GPIO_Init+0x2f0>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d00d      	beq.n	8002364 <HAL_GPIO_Init+0x1ec>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	4a48      	ldr	r2, [pc, #288]	; (800246c <HAL_GPIO_Init+0x2f4>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d007      	beq.n	8002360 <HAL_GPIO_Init+0x1e8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	4a47      	ldr	r2, [pc, #284]	; (8002470 <HAL_GPIO_Init+0x2f8>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d101      	bne.n	800235c <HAL_GPIO_Init+0x1e4>
 8002358:	2304      	movs	r3, #4
 800235a:	e008      	b.n	800236e <HAL_GPIO_Init+0x1f6>
 800235c:	2305      	movs	r3, #5
 800235e:	e006      	b.n	800236e <HAL_GPIO_Init+0x1f6>
 8002360:	2303      	movs	r3, #3
 8002362:	e004      	b.n	800236e <HAL_GPIO_Init+0x1f6>
 8002364:	2302      	movs	r3, #2
 8002366:	e002      	b.n	800236e <HAL_GPIO_Init+0x1f6>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <HAL_GPIO_Init+0x1f6>
 800236c:	2300      	movs	r3, #0
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	f002 0203 	and.w	r2, r2, #3
 8002374:	0092      	lsls	r2, r2, #2
 8002376:	4093      	lsls	r3, r2
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800237e:	4937      	ldr	r1, [pc, #220]	; (800245c <HAL_GPIO_Init+0x2e4>)
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	3302      	adds	r3, #2
 8002386:	693a      	ldr	r2, [r7, #16]
 8002388:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800238c:	4b39      	ldr	r3, [pc, #228]	; (8002474 <HAL_GPIO_Init+0x2fc>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	43db      	mvns	r3, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80023b0:	4a30      	ldr	r2, [pc, #192]	; (8002474 <HAL_GPIO_Init+0x2fc>)
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023b6:	4b2f      	ldr	r3, [pc, #188]	; (8002474 <HAL_GPIO_Init+0x2fc>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	43db      	mvns	r3, r3
 80023c0:	693a      	ldr	r2, [r7, #16]
 80023c2:	4013      	ands	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d003      	beq.n	80023da <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80023da:	4a26      	ldr	r2, [pc, #152]	; (8002474 <HAL_GPIO_Init+0x2fc>)
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023e0:	4b24      	ldr	r3, [pc, #144]	; (8002474 <HAL_GPIO_Init+0x2fc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4013      	ands	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 80023fc:	693a      	ldr	r2, [r7, #16]
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	4313      	orrs	r3, r2
 8002402:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002404:	4a1b      	ldr	r2, [pc, #108]	; (8002474 <HAL_GPIO_Init+0x2fc>)
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800240a:	4b1a      	ldr	r3, [pc, #104]	; (8002474 <HAL_GPIO_Init+0x2fc>)
 800240c:	68db      	ldr	r3, [r3, #12]
 800240e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	43db      	mvns	r3, r3
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	4013      	ands	r3, r2
 8002418:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	4313      	orrs	r3, r2
 800242c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800242e:	4a11      	ldr	r2, [pc, #68]	; (8002474 <HAL_GPIO_Init+0x2fc>)
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	3301      	adds	r3, #1
 8002438:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	f47f aea3 	bne.w	8002190 <HAL_GPIO_Init+0x18>
  }
}
 800244a:	bf00      	nop
 800244c:	bf00      	nop
 800244e:	371c      	adds	r7, #28
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	40023800 	.word	0x40023800
 800245c:	40010000 	.word	0x40010000
 8002460:	40020000 	.word	0x40020000
 8002464:	40020400 	.word	0x40020400
 8002468:	40020800 	.word	0x40020800
 800246c:	40020c00 	.word	0x40020c00
 8002470:	40021000 	.word	0x40021000
 8002474:	40010400 	.word	0x40010400

08002478 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002478:	b480      	push	{r7}
 800247a:	b085      	sub	sp, #20
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	887b      	ldrh	r3, [r7, #2]
 800248a:	4013      	ands	r3, r2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d002      	beq.n	8002496 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
 8002494:	e001      	b.n	800249a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800249a:	7bfb      	ldrb	r3, [r7, #15]
}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bc80      	pop	{r7}
 80024a4:	4770      	bx	lr
	...

080024a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80024b2:	4b08      	ldr	r3, [pc, #32]	; (80024d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024b4:	695a      	ldr	r2, [r3, #20]
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d006      	beq.n	80024cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024be:	4a05      	ldr	r2, [pc, #20]	; (80024d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024c0:	88fb      	ldrh	r3, [r7, #6]
 80024c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024c4:	88fb      	ldrh	r3, [r7, #6]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff f826 	bl	8001518 <HAL_GPIO_EXTI_Callback>
  }
}
 80024cc:	bf00      	nop
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40010400 	.word	0x40010400

080024d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e12b      	b.n	8002742 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d106      	bne.n	8002504 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f7ff fb48 	bl	8001b94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2224      	movs	r2, #36	; 0x24
 8002508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681a      	ldr	r2, [r3, #0]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f022 0201 	bic.w	r2, r2, #1
 800251a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800252a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800253a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800253c:	f001 fc9e 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
 8002540:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	4a81      	ldr	r2, [pc, #516]	; (800274c <HAL_I2C_Init+0x274>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d807      	bhi.n	800255c <HAL_I2C_Init+0x84>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	4a80      	ldr	r2, [pc, #512]	; (8002750 <HAL_I2C_Init+0x278>)
 8002550:	4293      	cmp	r3, r2
 8002552:	bf94      	ite	ls
 8002554:	2301      	movls	r3, #1
 8002556:	2300      	movhi	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	e006      	b.n	800256a <HAL_I2C_Init+0x92>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	4a7d      	ldr	r2, [pc, #500]	; (8002754 <HAL_I2C_Init+0x27c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	bf94      	ite	ls
 8002564:	2301      	movls	r3, #1
 8002566:	2300      	movhi	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e0e7      	b.n	8002742 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4a78      	ldr	r2, [pc, #480]	; (8002758 <HAL_I2C_Init+0x280>)
 8002576:	fba2 2303 	umull	r2, r3, r2, r3
 800257a:	0c9b      	lsrs	r3, r3, #18
 800257c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68ba      	ldr	r2, [r7, #8]
 800258e:	430a      	orrs	r2, r1
 8002590:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	4a6a      	ldr	r2, [pc, #424]	; (800274c <HAL_I2C_Init+0x274>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d802      	bhi.n	80025ac <HAL_I2C_Init+0xd4>
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	3301      	adds	r3, #1
 80025aa:	e009      	b.n	80025c0 <HAL_I2C_Init+0xe8>
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80025b2:	fb02 f303 	mul.w	r3, r2, r3
 80025b6:	4a69      	ldr	r2, [pc, #420]	; (800275c <HAL_I2C_Init+0x284>)
 80025b8:	fba2 2303 	umull	r2, r3, r2, r3
 80025bc:	099b      	lsrs	r3, r3, #6
 80025be:	3301      	adds	r3, #1
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	430b      	orrs	r3, r1
 80025c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	69db      	ldr	r3, [r3, #28]
 80025ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80025d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	495c      	ldr	r1, [pc, #368]	; (800274c <HAL_I2C_Init+0x274>)
 80025dc:	428b      	cmp	r3, r1
 80025de:	d819      	bhi.n	8002614 <HAL_I2C_Init+0x13c>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	1e59      	subs	r1, r3, #1
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ee:	1c59      	adds	r1, r3, #1
 80025f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025f4:	400b      	ands	r3, r1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00a      	beq.n	8002610 <HAL_I2C_Init+0x138>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	1e59      	subs	r1, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fbb1 f3f3 	udiv	r3, r1, r3
 8002608:	3301      	adds	r3, #1
 800260a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260e:	e051      	b.n	80026b4 <HAL_I2C_Init+0x1dc>
 8002610:	2304      	movs	r3, #4
 8002612:	e04f      	b.n	80026b4 <HAL_I2C_Init+0x1dc>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d111      	bne.n	8002640 <HAL_I2C_Init+0x168>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	1e58      	subs	r0, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6859      	ldr	r1, [r3, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	440b      	add	r3, r1
 800262a:	fbb0 f3f3 	udiv	r3, r0, r3
 800262e:	3301      	adds	r3, #1
 8002630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002634:	2b00      	cmp	r3, #0
 8002636:	bf0c      	ite	eq
 8002638:	2301      	moveq	r3, #1
 800263a:	2300      	movne	r3, #0
 800263c:	b2db      	uxtb	r3, r3
 800263e:	e012      	b.n	8002666 <HAL_I2C_Init+0x18e>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	1e58      	subs	r0, r3, #1
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6859      	ldr	r1, [r3, #4]
 8002648:	460b      	mov	r3, r1
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	0099      	lsls	r1, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	fbb0 f3f3 	udiv	r3, r0, r3
 8002656:	3301      	adds	r3, #1
 8002658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf0c      	ite	eq
 8002660:	2301      	moveq	r3, #1
 8002662:	2300      	movne	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <HAL_I2C_Init+0x196>
 800266a:	2301      	movs	r3, #1
 800266c:	e022      	b.n	80026b4 <HAL_I2C_Init+0x1dc>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d10e      	bne.n	8002694 <HAL_I2C_Init+0x1bc>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1e58      	subs	r0, r3, #1
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6859      	ldr	r1, [r3, #4]
 800267e:	460b      	mov	r3, r1
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	440b      	add	r3, r1
 8002684:	fbb0 f3f3 	udiv	r3, r0, r3
 8002688:	3301      	adds	r3, #1
 800268a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800268e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002692:	e00f      	b.n	80026b4 <HAL_I2C_Init+0x1dc>
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	1e58      	subs	r0, r3, #1
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6859      	ldr	r1, [r3, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	0099      	lsls	r1, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80026aa:	3301      	adds	r3, #1
 80026ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	6809      	ldr	r1, [r1, #0]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	69da      	ldr	r2, [r3, #28]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6a1b      	ldr	r3, [r3, #32]
 80026ce:	431a      	orrs	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	430a      	orrs	r2, r1
 80026d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	6911      	ldr	r1, [r2, #16]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68d2      	ldr	r2, [r2, #12]
 80026ee:	4311      	orrs	r1, r2
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6812      	ldr	r2, [r2, #0]
 80026f4:	430b      	orrs	r3, r1
 80026f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695a      	ldr	r2, [r3, #20]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	430a      	orrs	r2, r1
 8002712:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f042 0201 	orr.w	r2, r2, #1
 8002722:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2220      	movs	r2, #32
 800272e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	3710      	adds	r7, #16
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	000186a0 	.word	0x000186a0
 8002750:	001e847f 	.word	0x001e847f
 8002754:	003d08ff 	.word	0x003d08ff
 8002758:	431bde83 	.word	0x431bde83
 800275c:	10624dd3 	.word	0x10624dd3

08002760 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b088      	sub	sp, #32
 8002764:	af02      	add	r7, sp, #8
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	4608      	mov	r0, r1
 800276a:	4611      	mov	r1, r2
 800276c:	461a      	mov	r2, r3
 800276e:	4603      	mov	r3, r0
 8002770:	817b      	strh	r3, [r7, #10]
 8002772:	460b      	mov	r3, r1
 8002774:	813b      	strh	r3, [r7, #8]
 8002776:	4613      	mov	r3, r2
 8002778:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800277a:	f7ff fbc3 	bl	8001f04 <HAL_GetTick>
 800277e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b20      	cmp	r3, #32
 800278a:	f040 80d9 	bne.w	8002940 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	2319      	movs	r3, #25
 8002794:	2201      	movs	r2, #1
 8002796:	496d      	ldr	r1, [pc, #436]	; (800294c <HAL_I2C_Mem_Write+0x1ec>)
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 fc7f 	bl	800309c <I2C_WaitOnFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80027a4:	2302      	movs	r3, #2
 80027a6:	e0cc      	b.n	8002942 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_I2C_Mem_Write+0x56>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e0c5      	b.n	8002942 <HAL_I2C_Mem_Write+0x1e2>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0301 	and.w	r3, r3, #1
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d007      	beq.n	80027dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f042 0201 	orr.w	r2, r2, #1
 80027da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2221      	movs	r2, #33	; 0x21
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2240      	movs	r2, #64	; 0x40
 80027f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a3a      	ldr	r2, [r7, #32]
 8002806:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800280c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002812:	b29a      	uxth	r2, r3
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	4a4d      	ldr	r2, [pc, #308]	; (8002950 <HAL_I2C_Mem_Write+0x1f0>)
 800281c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800281e:	88f8      	ldrh	r0, [r7, #6]
 8002820:	893a      	ldrh	r2, [r7, #8]
 8002822:	8979      	ldrh	r1, [r7, #10]
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	4603      	mov	r3, r0
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f000 fab6 	bl	8002da0 <I2C_RequestMemoryWrite>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	d052      	beq.n	80028e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e081      	b.n	8002942 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002842:	68f8      	ldr	r0, [r7, #12]
 8002844:	f000 fd00 	bl	8003248 <I2C_WaitOnTXEFlagUntilTimeout>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d00d      	beq.n	800286a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	2b04      	cmp	r3, #4
 8002854:	d107      	bne.n	8002866 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002864:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e06b      	b.n	8002942 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	781a      	ldrb	r2, [r3, #0]
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	1c5a      	adds	r2, r3, #1
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002884:	3b01      	subs	r3, #1
 8002886:	b29a      	uxth	r2, r3
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002890:	b29b      	uxth	r3, r3
 8002892:	3b01      	subs	r3, #1
 8002894:	b29a      	uxth	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b04      	cmp	r3, #4
 80028a6:	d11b      	bne.n	80028e0 <HAL_I2C_Mem_Write+0x180>
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d017      	beq.n	80028e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b4:	781a      	ldrb	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ca:	3b01      	subs	r3, #1
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	3b01      	subs	r3, #1
 80028da:	b29a      	uxth	r2, r3
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1aa      	bne.n	800283e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028ec:	68f8      	ldr	r0, [r7, #12]
 80028ee:	f000 fcec 	bl	80032ca <I2C_WaitOnBTFFlagUntilTimeout>
 80028f2:	4603      	mov	r3, r0
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d00d      	beq.n	8002914 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028fc:	2b04      	cmp	r3, #4
 80028fe:	d107      	bne.n	8002910 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800290e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e016      	b.n	8002942 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002922:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	e000      	b.n	8002942 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002940:	2302      	movs	r3, #2
  }
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	00100002 	.word	0x00100002
 8002950:	ffff0000 	.word	0xffff0000

08002954 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b08c      	sub	sp, #48	; 0x30
 8002958:	af02      	add	r7, sp, #8
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	4608      	mov	r0, r1
 800295e:	4611      	mov	r1, r2
 8002960:	461a      	mov	r2, r3
 8002962:	4603      	mov	r3, r0
 8002964:	817b      	strh	r3, [r7, #10]
 8002966:	460b      	mov	r3, r1
 8002968:	813b      	strh	r3, [r7, #8]
 800296a:	4613      	mov	r3, r2
 800296c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800296e:	f7ff fac9 	bl	8001f04 <HAL_GetTick>
 8002972:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b20      	cmp	r3, #32
 800297e:	f040 8208 	bne.w	8002d92 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	2319      	movs	r3, #25
 8002988:	2201      	movs	r2, #1
 800298a:	497b      	ldr	r1, [pc, #492]	; (8002b78 <HAL_I2C_Mem_Read+0x224>)
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 fb85 	bl	800309c <I2C_WaitOnFlagUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d001      	beq.n	800299c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002998:	2302      	movs	r3, #2
 800299a:	e1fb      	b.n	8002d94 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d101      	bne.n	80029aa <HAL_I2C_Mem_Read+0x56>
 80029a6:	2302      	movs	r3, #2
 80029a8:	e1f4      	b.n	8002d94 <HAL_I2C_Mem_Read+0x440>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d007      	beq.n	80029d0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f042 0201 	orr.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029de:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2222      	movs	r2, #34	; 0x22
 80029e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2240      	movs	r2, #64	; 0x40
 80029ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002a00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	4a5b      	ldr	r2, [pc, #364]	; (8002b7c <HAL_I2C_Mem_Read+0x228>)
 8002a10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a12:	88f8      	ldrh	r0, [r7, #6]
 8002a14:	893a      	ldrh	r2, [r7, #8]
 8002a16:	8979      	ldrh	r1, [r7, #10]
 8002a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1a:	9301      	str	r3, [sp, #4]
 8002a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	4603      	mov	r3, r0
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f000 fa52 	bl	8002ecc <I2C_RequestMemoryRead>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d001      	beq.n	8002a32 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e1b0      	b.n	8002d94 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d113      	bne.n	8002a62 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	623b      	str	r3, [r7, #32]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	695b      	ldr	r3, [r3, #20]
 8002a44:	623b      	str	r3, [r7, #32]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	623b      	str	r3, [r7, #32]
 8002a4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	e184      	b.n	8002d6c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d11b      	bne.n	8002aa2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	61fb      	str	r3, [r7, #28]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	695b      	ldr	r3, [r3, #20]
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	61fb      	str	r3, [r7, #28]
 8002a8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	e164      	b.n	8002d6c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d11b      	bne.n	8002ae2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ab8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ac8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002aca:	2300      	movs	r3, #0
 8002acc:	61bb      	str	r3, [r7, #24]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695b      	ldr	r3, [r3, #20]
 8002ad4:	61bb      	str	r3, [r7, #24]
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	61bb      	str	r3, [r7, #24]
 8002ade:	69bb      	ldr	r3, [r7, #24]
 8002ae0:	e144      	b.n	8002d6c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	695b      	ldr	r3, [r3, #20]
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	617b      	str	r3, [r7, #20]
 8002af6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002af8:	e138      	b.n	8002d6c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002afe:	2b03      	cmp	r3, #3
 8002b00:	f200 80f1 	bhi.w	8002ce6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d123      	bne.n	8002b54 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 fc1b 	bl	800334c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e139      	b.n	8002d94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691a      	ldr	r2, [r3, #16]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b2a:	b2d2      	uxtb	r2, r2
 8002b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b32:	1c5a      	adds	r2, r3, #1
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	b29a      	uxth	r2, r3
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002b52:	e10b      	b.n	8002d6c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	d14e      	bne.n	8002bfa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b62:	2200      	movs	r2, #0
 8002b64:	4906      	ldr	r1, [pc, #24]	; (8002b80 <HAL_I2C_Mem_Read+0x22c>)
 8002b66:	68f8      	ldr	r0, [r7, #12]
 8002b68:	f000 fa98 	bl	800309c <I2C_WaitOnFlagUntilTimeout>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d008      	beq.n	8002b84 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e10e      	b.n	8002d94 <HAL_I2C_Mem_Read+0x440>
 8002b76:	bf00      	nop
 8002b78:	00100002 	.word	0x00100002
 8002b7c:	ffff0000 	.word	0xffff0000
 8002b80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691a      	ldr	r2, [r3, #16]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9e:	b2d2      	uxtb	r2, r2
 8002ba0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba6:	1c5a      	adds	r2, r3, #1
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	3b01      	subs	r3, #1
 8002bc0:	b29a      	uxth	r2, r3
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002bf8:	e0b8      	b.n	8002d6c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	9300      	str	r3, [sp, #0]
 8002bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c00:	2200      	movs	r2, #0
 8002c02:	4966      	ldr	r1, [pc, #408]	; (8002d9c <HAL_I2C_Mem_Read+0x448>)
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f000 fa49 	bl	800309c <I2C_WaitOnFlagUntilTimeout>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e0bf      	b.n	8002d94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	691a      	ldr	r2, [r3, #16]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	1c5a      	adds	r2, r3, #1
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	b29a      	uxth	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	494f      	ldr	r1, [pc, #316]	; (8002d9c <HAL_I2C_Mem_Read+0x448>)
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	f000 fa1b 	bl	800309c <I2C_WaitOnFlagUntilTimeout>
 8002c66:	4603      	mov	r3, r0
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d001      	beq.n	8002c70 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e091      	b.n	8002d94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691a      	ldr	r2, [r3, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	691a      	ldr	r2, [r3, #16]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	b2d2      	uxtb	r2, r2
 8002cbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc4:	1c5a      	adds	r2, r3, #1
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ce4:	e042      	b.n	8002d6c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ce8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fb2e 	bl	800334c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e04c      	b.n	8002d94 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	691a      	ldr	r2, [r3, #16]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d04:	b2d2      	uxtb	r2, r2
 8002d06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d16:	3b01      	subs	r3, #1
 8002d18:	b29a      	uxth	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d118      	bne.n	8002d6c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	691a      	ldr	r2, [r3, #16]
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	1c5a      	adds	r2, r3, #1
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d56:	3b01      	subs	r3, #1
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f47f aec2 	bne.w	8002afa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2220      	movs	r2, #32
 8002d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e000      	b.n	8002d94 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002d92:	2302      	movs	r3, #2
  }
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3728      	adds	r7, #40	; 0x28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	00010004 	.word	0x00010004

08002da0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b088      	sub	sp, #32
 8002da4:	af02      	add	r7, sp, #8
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	4608      	mov	r0, r1
 8002daa:	4611      	mov	r1, r2
 8002dac:	461a      	mov	r2, r3
 8002dae:	4603      	mov	r3, r0
 8002db0:	817b      	strh	r3, [r7, #10]
 8002db2:	460b      	mov	r3, r1
 8002db4:	813b      	strh	r3, [r7, #8]
 8002db6:	4613      	mov	r3, r2
 8002db8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f000 f960 	bl	800309c <I2C_WaitOnFlagUntilTimeout>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00d      	beq.n	8002dfe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002df0:	d103      	bne.n	8002dfa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e05f      	b.n	8002ebe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dfe:	897b      	ldrh	r3, [r7, #10]
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	461a      	mov	r2, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e0c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e10:	6a3a      	ldr	r2, [r7, #32]
 8002e12:	492d      	ldr	r1, [pc, #180]	; (8002ec8 <I2C_RequestMemoryWrite+0x128>)
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f000 f998 	bl	800314a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e04c      	b.n	8002ebe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e3c:	6a39      	ldr	r1, [r7, #32]
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 fa02 	bl	8003248 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00d      	beq.n	8002e66 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d107      	bne.n	8002e62 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e60:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e02b      	b.n	8002ebe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d105      	bne.n	8002e78 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002e6c:	893b      	ldrh	r3, [r7, #8]
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	611a      	str	r2, [r3, #16]
 8002e76:	e021      	b.n	8002ebc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002e78:	893b      	ldrh	r3, [r7, #8]
 8002e7a:	0a1b      	lsrs	r3, r3, #8
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	b2da      	uxtb	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e88:	6a39      	ldr	r1, [r7, #32]
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f000 f9dc 	bl	8003248 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00d      	beq.n	8002eb2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d107      	bne.n	8002eae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e005      	b.n	8002ebe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002eb2:	893b      	ldrh	r3, [r7, #8]
 8002eb4:	b2da      	uxtb	r2, r3
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3718      	adds	r7, #24
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	00010002 	.word	0x00010002

08002ecc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af02      	add	r7, sp, #8
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	4608      	mov	r0, r1
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4603      	mov	r3, r0
 8002edc:	817b      	strh	r3, [r7, #10]
 8002ede:	460b      	mov	r3, r1
 8002ee0:	813b      	strh	r3, [r7, #8]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ef4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f04:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f08:	9300      	str	r3, [sp, #0]
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 f8c2 	bl	800309c <I2C_WaitOnFlagUntilTimeout>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00d      	beq.n	8002f3a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f2c:	d103      	bne.n	8002f36 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f34:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	e0aa      	b.n	8003090 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002f3a:	897b      	ldrh	r3, [r7, #10]
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	461a      	mov	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002f48:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	6a3a      	ldr	r2, [r7, #32]
 8002f4e:	4952      	ldr	r1, [pc, #328]	; (8003098 <I2C_RequestMemoryRead+0x1cc>)
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f000 f8fa 	bl	800314a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f56:	4603      	mov	r3, r0
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e097      	b.n	8003090 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	617b      	str	r3, [r7, #20]
 8002f74:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f78:	6a39      	ldr	r1, [r7, #32]
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 f964 	bl	8003248 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00d      	beq.n	8002fa2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	2b04      	cmp	r3, #4
 8002f8c:	d107      	bne.n	8002f9e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e076      	b.n	8003090 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002fa2:	88fb      	ldrh	r3, [r7, #6]
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d105      	bne.n	8002fb4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fa8:	893b      	ldrh	r3, [r7, #8]
 8002faa:	b2da      	uxtb	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	611a      	str	r2, [r3, #16]
 8002fb2:	e021      	b.n	8002ff8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002fb4:	893b      	ldrh	r3, [r7, #8]
 8002fb6:	0a1b      	lsrs	r3, r3, #8
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fc4:	6a39      	ldr	r1, [r7, #32]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f93e 	bl	8003248 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00d      	beq.n	8002fee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d107      	bne.n	8002fea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fe8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e050      	b.n	8003090 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002fee:	893b      	ldrh	r3, [r7, #8]
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ffa:	6a39      	ldr	r1, [r7, #32]
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 f923 	bl	8003248 <I2C_WaitOnTXEFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00d      	beq.n	8003024 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	2b04      	cmp	r3, #4
 800300e:	d107      	bne.n	8003020 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800301e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e035      	b.n	8003090 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003032:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	2200      	movs	r2, #0
 800303c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 f82b 	bl	800309c <I2C_WaitOnFlagUntilTimeout>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d00d      	beq.n	8003068 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003056:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800305a:	d103      	bne.n	8003064 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003062:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e013      	b.n	8003090 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003068:	897b      	ldrh	r3, [r7, #10]
 800306a:	b2db      	uxtb	r3, r3
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	b2da      	uxtb	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	6a3a      	ldr	r2, [r7, #32]
 800307c:	4906      	ldr	r1, [pc, #24]	; (8003098 <I2C_RequestMemoryRead+0x1cc>)
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 f863 	bl	800314a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d001      	beq.n	800308e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3718      	adds	r7, #24
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}
 8003098:	00010002 	.word	0x00010002

0800309c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	603b      	str	r3, [r7, #0]
 80030a8:	4613      	mov	r3, r2
 80030aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030ac:	e025      	b.n	80030fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b4:	d021      	beq.n	80030fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030b6:	f7fe ff25 	bl	8001f04 <HAL_GetTick>
 80030ba:	4602      	mov	r2, r0
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	1ad3      	subs	r3, r2, r3
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d302      	bcc.n	80030cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d116      	bne.n	80030fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2200      	movs	r2, #0
 80030d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2220      	movs	r2, #32
 80030d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e6:	f043 0220 	orr.w	r2, r3, #32
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e023      	b.n	8003142 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	0c1b      	lsrs	r3, r3, #16
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	2b01      	cmp	r3, #1
 8003102:	d10d      	bne.n	8003120 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	695b      	ldr	r3, [r3, #20]
 800310a:	43da      	mvns	r2, r3
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	4013      	ands	r3, r2
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	bf0c      	ite	eq
 8003116:	2301      	moveq	r3, #1
 8003118:	2300      	movne	r3, #0
 800311a:	b2db      	uxtb	r3, r3
 800311c:	461a      	mov	r2, r3
 800311e:	e00c      	b.n	800313a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	699b      	ldr	r3, [r3, #24]
 8003126:	43da      	mvns	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	4013      	ands	r3, r2
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	bf0c      	ite	eq
 8003132:	2301      	moveq	r3, #1
 8003134:	2300      	movne	r3, #0
 8003136:	b2db      	uxtb	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	429a      	cmp	r2, r3
 800313e:	d0b6      	beq.n	80030ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	60f8      	str	r0, [r7, #12]
 8003152:	60b9      	str	r1, [r7, #8]
 8003154:	607a      	str	r2, [r7, #4]
 8003156:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003158:	e051      	b.n	80031fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003168:	d123      	bne.n	80031b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003178:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003182:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f043 0204 	orr.w	r2, r3, #4
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e046      	b.n	8003240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b8:	d021      	beq.n	80031fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031ba:	f7fe fea3 	bl	8001f04 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d302      	bcc.n	80031d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d116      	bne.n	80031fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2220      	movs	r2, #32
 80031da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f043 0220 	orr.w	r2, r3, #32
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2200      	movs	r2, #0
 80031f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e020      	b.n	8003240 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	0c1b      	lsrs	r3, r3, #16
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b01      	cmp	r3, #1
 8003206:	d10c      	bne.n	8003222 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	695b      	ldr	r3, [r3, #20]
 800320e:	43da      	mvns	r2, r3
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4013      	ands	r3, r2
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	bf14      	ite	ne
 800321a:	2301      	movne	r3, #1
 800321c:	2300      	moveq	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	e00b      	b.n	800323a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699b      	ldr	r3, [r3, #24]
 8003228:	43da      	mvns	r2, r3
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	4013      	ands	r3, r2
 800322e:	b29b      	uxth	r3, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	bf14      	ite	ne
 8003234:	2301      	movne	r3, #1
 8003236:	2300      	moveq	r3, #0
 8003238:	b2db      	uxtb	r3, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d18d      	bne.n	800315a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3710      	adds	r7, #16
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003254:	e02d      	b.n	80032b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 f8ce 	bl	80033f8 <I2C_IsAcknowledgeFailed>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e02d      	b.n	80032c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800326c:	d021      	beq.n	80032b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326e:	f7fe fe49 	bl	8001f04 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	429a      	cmp	r2, r3
 800327c:	d302      	bcc.n	8003284 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d116      	bne.n	80032b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2200      	movs	r2, #0
 8003288:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2220      	movs	r2, #32
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329e:	f043 0220 	orr.w	r2, r3, #32
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e007      	b.n	80032c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032bc:	2b80      	cmp	r3, #128	; 0x80
 80032be:	d1ca      	bne.n	8003256 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032c0:	2300      	movs	r3, #0
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032d6:	e02d      	b.n	8003334 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f88d 	bl	80033f8 <I2C_IsAcknowledgeFailed>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e02d      	b.n	8003344 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ee:	d021      	beq.n	8003334 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f0:	f7fe fe08 	bl	8001f04 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	68ba      	ldr	r2, [r7, #8]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d302      	bcc.n	8003306 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d116      	bne.n	8003334 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2220      	movs	r2, #32
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	f043 0220 	orr.w	r2, r3, #32
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e007      	b.n	8003344 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b04      	cmp	r3, #4
 8003340:	d1ca      	bne.n	80032d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003342:	2300      	movs	r3, #0
}
 8003344:	4618      	mov	r0, r3
 8003346:	3710      	adds	r7, #16
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b084      	sub	sp, #16
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003358:	e042      	b.n	80033e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	2b10      	cmp	r3, #16
 8003366:	d119      	bne.n	800339c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f06f 0210 	mvn.w	r2, #16
 8003370:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e029      	b.n	80033f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339c:	f7fe fdb2 	bl	8001f04 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d302      	bcc.n	80033b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d116      	bne.n	80033e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e007      	b.n	80033f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033ea:	2b40      	cmp	r3, #64	; 0x40
 80033ec:	d1b5      	bne.n	800335a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800340a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800340e:	d11b      	bne.n	8003448 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003418:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f043 0204 	orr.w	r2, r3, #4
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	370c      	adds	r7, #12
 800344e:	46bd      	mov	sp, r7
 8003450:	bc80      	pop	{r7}
 8003452:	4770      	bx	lr

08003454 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d101      	bne.n	8003466 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e31d      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003466:	4b94      	ldr	r3, [pc, #592]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	f003 030c 	and.w	r3, r3, #12
 800346e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003470:	4b91      	ldr	r3, [pc, #580]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003478:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d07b      	beq.n	800357e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	2b08      	cmp	r3, #8
 800348a:	d006      	beq.n	800349a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2b0c      	cmp	r3, #12
 8003490:	d10f      	bne.n	80034b2 <HAL_RCC_OscConfig+0x5e>
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003498:	d10b      	bne.n	80034b2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800349a:	4b87      	ldr	r3, [pc, #540]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d06a      	beq.n	800357c <HAL_RCC_OscConfig+0x128>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d166      	bne.n	800357c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e2f7      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d106      	bne.n	80034c8 <HAL_RCC_OscConfig+0x74>
 80034ba:	4b7f      	ldr	r3, [pc, #508]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a7e      	ldr	r2, [pc, #504]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 80034c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e02d      	b.n	8003524 <HAL_RCC_OscConfig+0xd0>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d10c      	bne.n	80034ea <HAL_RCC_OscConfig+0x96>
 80034d0:	4b79      	ldr	r3, [pc, #484]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4a78      	ldr	r2, [pc, #480]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 80034d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034da:	6013      	str	r3, [r2, #0]
 80034dc:	4b76      	ldr	r3, [pc, #472]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a75      	ldr	r2, [pc, #468]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 80034e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034e6:	6013      	str	r3, [r2, #0]
 80034e8:	e01c      	b.n	8003524 <HAL_RCC_OscConfig+0xd0>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b05      	cmp	r3, #5
 80034f0:	d10c      	bne.n	800350c <HAL_RCC_OscConfig+0xb8>
 80034f2:	4b71      	ldr	r3, [pc, #452]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a70      	ldr	r2, [pc, #448]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 80034f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034fc:	6013      	str	r3, [r2, #0]
 80034fe:	4b6e      	ldr	r3, [pc, #440]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a6d      	ldr	r2, [pc, #436]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 8003504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	e00b      	b.n	8003524 <HAL_RCC_OscConfig+0xd0>
 800350c:	4b6a      	ldr	r3, [pc, #424]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a69      	ldr	r2, [pc, #420]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 8003512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003516:	6013      	str	r3, [r2, #0]
 8003518:	4b67      	ldr	r3, [pc, #412]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a66      	ldr	r2, [pc, #408]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 800351e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d013      	beq.n	8003554 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352c:	f7fe fcea 	bl	8001f04 <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003534:	f7fe fce6 	bl	8001f04 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b64      	cmp	r3, #100	; 0x64
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e2ad      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003546:	4b5c      	ldr	r3, [pc, #368]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d0f0      	beq.n	8003534 <HAL_RCC_OscConfig+0xe0>
 8003552:	e014      	b.n	800357e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003554:	f7fe fcd6 	bl	8001f04 <HAL_GetTick>
 8003558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800355a:	e008      	b.n	800356e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800355c:	f7fe fcd2 	bl	8001f04 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	1ad3      	subs	r3, r2, r3
 8003566:	2b64      	cmp	r3, #100	; 0x64
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e299      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800356e:	4b52      	ldr	r3, [pc, #328]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d1f0      	bne.n	800355c <HAL_RCC_OscConfig+0x108>
 800357a:	e000      	b.n	800357e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800357c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d05a      	beq.n	8003640 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	2b04      	cmp	r3, #4
 800358e:	d005      	beq.n	800359c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	2b0c      	cmp	r3, #12
 8003594:	d119      	bne.n	80035ca <HAL_RCC_OscConfig+0x176>
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d116      	bne.n	80035ca <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800359c:	4b46      	ldr	r3, [pc, #280]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0302 	and.w	r3, r3, #2
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d005      	beq.n	80035b4 <HAL_RCC_OscConfig+0x160>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d001      	beq.n	80035b4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e276      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035b4:	4b40      	ldr	r3, [pc, #256]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	021b      	lsls	r3, r3, #8
 80035c2:	493d      	ldr	r1, [pc, #244]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 80035c4:	4313      	orrs	r3, r2
 80035c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035c8:	e03a      	b.n	8003640 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d020      	beq.n	8003614 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035d2:	4b3a      	ldr	r3, [pc, #232]	; (80036bc <HAL_RCC_OscConfig+0x268>)
 80035d4:	2201      	movs	r2, #1
 80035d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d8:	f7fe fc94 	bl	8001f04 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e0:	f7fe fc90 	bl	8001f04 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e257      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80035f2:	4b31      	ldr	r3, [pc, #196]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d0f0      	beq.n	80035e0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035fe:	4b2e      	ldr	r3, [pc, #184]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	691b      	ldr	r3, [r3, #16]
 800360a:	021b      	lsls	r3, r3, #8
 800360c:	492a      	ldr	r1, [pc, #168]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 800360e:	4313      	orrs	r3, r2
 8003610:	604b      	str	r3, [r1, #4]
 8003612:	e015      	b.n	8003640 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003614:	4b29      	ldr	r3, [pc, #164]	; (80036bc <HAL_RCC_OscConfig+0x268>)
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800361a:	f7fe fc73 	bl	8001f04 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003622:	f7fe fc6f 	bl	8001f04 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e236      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003634:	4b20      	ldr	r3, [pc, #128]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f003 0302 	and.w	r3, r3, #2
 800363c:	2b00      	cmp	r3, #0
 800363e:	d1f0      	bne.n	8003622 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 0310 	and.w	r3, r3, #16
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 80b8 	beq.w	80037be <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d170      	bne.n	8003736 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003654:	4b18      	ldr	r3, [pc, #96]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800365c:	2b00      	cmp	r3, #0
 800365e:	d005      	beq.n	800366c <HAL_RCC_OscConfig+0x218>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d101      	bne.n	800366c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e21a      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1a      	ldr	r2, [r3, #32]
 8003670:	4b11      	ldr	r3, [pc, #68]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003678:	429a      	cmp	r2, r3
 800367a:	d921      	bls.n	80036c0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	4618      	mov	r0, r3
 8003682:	f000 fc23 	bl	8003ecc <RCC_SetFlashLatencyFromMSIRange>
 8003686:	4603      	mov	r3, r0
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e208      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003690:	4b09      	ldr	r3, [pc, #36]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a1b      	ldr	r3, [r3, #32]
 800369c:	4906      	ldr	r1, [pc, #24]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036a2:	4b05      	ldr	r3, [pc, #20]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	69db      	ldr	r3, [r3, #28]
 80036ae:	061b      	lsls	r3, r3, #24
 80036b0:	4901      	ldr	r1, [pc, #4]	; (80036b8 <HAL_RCC_OscConfig+0x264>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	604b      	str	r3, [r1, #4]
 80036b6:	e020      	b.n	80036fa <HAL_RCC_OscConfig+0x2a6>
 80036b8:	40023800 	.word	0x40023800
 80036bc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036c0:	4ba4      	ldr	r3, [pc, #656]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a1b      	ldr	r3, [r3, #32]
 80036cc:	49a1      	ldr	r1, [pc, #644]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036d2:	4ba0      	ldr	r3, [pc, #640]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	061b      	lsls	r3, r3, #24
 80036e0:	499c      	ldr	r1, [pc, #624]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 80036e2:	4313      	orrs	r3, r2
 80036e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
 80036ea:	4618      	mov	r0, r3
 80036ec:	f000 fbee 	bl	8003ecc <RCC_SetFlashLatencyFromMSIRange>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e1d3      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a1b      	ldr	r3, [r3, #32]
 80036fe:	0b5b      	lsrs	r3, r3, #13
 8003700:	3301      	adds	r3, #1
 8003702:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003706:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800370a:	4a92      	ldr	r2, [pc, #584]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 800370c:	6892      	ldr	r2, [r2, #8]
 800370e:	0912      	lsrs	r2, r2, #4
 8003710:	f002 020f 	and.w	r2, r2, #15
 8003714:	4990      	ldr	r1, [pc, #576]	; (8003958 <HAL_RCC_OscConfig+0x504>)
 8003716:	5c8a      	ldrb	r2, [r1, r2]
 8003718:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800371a:	4a90      	ldr	r2, [pc, #576]	; (800395c <HAL_RCC_OscConfig+0x508>)
 800371c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800371e:	4b90      	ldr	r3, [pc, #576]	; (8003960 <HAL_RCC_OscConfig+0x50c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f7fe fba2 	bl	8001e6c <HAL_InitTick>
 8003728:	4603      	mov	r3, r0
 800372a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800372c:	7bfb      	ldrb	r3, [r7, #15]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d045      	beq.n	80037be <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	e1b5      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	699b      	ldr	r3, [r3, #24]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d029      	beq.n	8003792 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800373e:	4b89      	ldr	r3, [pc, #548]	; (8003964 <HAL_RCC_OscConfig+0x510>)
 8003740:	2201      	movs	r2, #1
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fe fbde 	bl	8001f04 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800374c:	f7fe fbda 	bl	8001f04 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e1a1      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800375e:	4b7d      	ldr	r3, [pc, #500]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003766:	2b00      	cmp	r3, #0
 8003768:	d0f0      	beq.n	800374c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800376a:	4b7a      	ldr	r3, [pc, #488]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	4977      	ldr	r1, [pc, #476]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 8003778:	4313      	orrs	r3, r2
 800377a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800377c:	4b75      	ldr	r3, [pc, #468]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	061b      	lsls	r3, r3, #24
 800378a:	4972      	ldr	r1, [pc, #456]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 800378c:	4313      	orrs	r3, r2
 800378e:	604b      	str	r3, [r1, #4]
 8003790:	e015      	b.n	80037be <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003792:	4b74      	ldr	r3, [pc, #464]	; (8003964 <HAL_RCC_OscConfig+0x510>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003798:	f7fe fbb4 	bl	8001f04 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80037a0:	f7fe fbb0 	bl	8001f04 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e177      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80037b2:	4b68      	ldr	r3, [pc, #416]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d030      	beq.n	800382c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d016      	beq.n	8003800 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037d2:	4b65      	ldr	r3, [pc, #404]	; (8003968 <HAL_RCC_OscConfig+0x514>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037d8:	f7fe fb94 	bl	8001f04 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e0:	f7fe fb90 	bl	8001f04 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e157      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80037f2:	4b58      	ldr	r3, [pc, #352]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 80037f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x38c>
 80037fe:	e015      	b.n	800382c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003800:	4b59      	ldr	r3, [pc, #356]	; (8003968 <HAL_RCC_OscConfig+0x514>)
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003806:	f7fe fb7d 	bl	8001f04 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800380e:	f7fe fb79 	bl	8001f04 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e140      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003820:	4b4c      	ldr	r3, [pc, #304]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 8003822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1f0      	bne.n	800380e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0304 	and.w	r3, r3, #4
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80b5 	beq.w	80039a4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800383a:	2300      	movs	r3, #0
 800383c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383e:	4b45      	ldr	r3, [pc, #276]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d10d      	bne.n	8003866 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384a:	4b42      	ldr	r3, [pc, #264]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	4a41      	ldr	r2, [pc, #260]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 8003850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003854:	6253      	str	r3, [r2, #36]	; 0x24
 8003856:	4b3f      	ldr	r3, [pc, #252]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385e:	60bb      	str	r3, [r7, #8]
 8003860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003862:	2301      	movs	r3, #1
 8003864:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003866:	4b41      	ldr	r3, [pc, #260]	; (800396c <HAL_RCC_OscConfig+0x518>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d118      	bne.n	80038a4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003872:	4b3e      	ldr	r3, [pc, #248]	; (800396c <HAL_RCC_OscConfig+0x518>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a3d      	ldr	r2, [pc, #244]	; (800396c <HAL_RCC_OscConfig+0x518>)
 8003878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387e:	f7fe fb41 	bl	8001f04 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003886:	f7fe fb3d 	bl	8001f04 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b64      	cmp	r3, #100	; 0x64
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e104      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003898:	4b34      	ldr	r3, [pc, #208]	; (800396c <HAL_RCC_OscConfig+0x518>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d106      	bne.n	80038ba <HAL_RCC_OscConfig+0x466>
 80038ac:	4b29      	ldr	r3, [pc, #164]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 80038ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b0:	4a28      	ldr	r2, [pc, #160]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 80038b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b6:	6353      	str	r3, [r2, #52]	; 0x34
 80038b8:	e02d      	b.n	8003916 <HAL_RCC_OscConfig+0x4c2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10c      	bne.n	80038dc <HAL_RCC_OscConfig+0x488>
 80038c2:	4b24      	ldr	r3, [pc, #144]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 80038c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c6:	4a23      	ldr	r2, [pc, #140]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 80038c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038cc:	6353      	str	r3, [r2, #52]	; 0x34
 80038ce:	4b21      	ldr	r3, [pc, #132]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 80038d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038d2:	4a20      	ldr	r2, [pc, #128]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 80038d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038d8:	6353      	str	r3, [r2, #52]	; 0x34
 80038da:	e01c      	b.n	8003916 <HAL_RCC_OscConfig+0x4c2>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	2b05      	cmp	r3, #5
 80038e2:	d10c      	bne.n	80038fe <HAL_RCC_OscConfig+0x4aa>
 80038e4:	4b1b      	ldr	r3, [pc, #108]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 80038e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038e8:	4a1a      	ldr	r2, [pc, #104]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 80038ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038ee:	6353      	str	r3, [r2, #52]	; 0x34
 80038f0:	4b18      	ldr	r3, [pc, #96]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 80038f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f4:	4a17      	ldr	r2, [pc, #92]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 80038f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038fa:	6353      	str	r3, [r2, #52]	; 0x34
 80038fc:	e00b      	b.n	8003916 <HAL_RCC_OscConfig+0x4c2>
 80038fe:	4b15      	ldr	r3, [pc, #84]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 8003900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003902:	4a14      	ldr	r2, [pc, #80]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 8003904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003908:	6353      	str	r3, [r2, #52]	; 0x34
 800390a:	4b12      	ldr	r3, [pc, #72]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 800390c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800390e:	4a11      	ldr	r2, [pc, #68]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 8003910:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003914:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d015      	beq.n	800394a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800391e:	f7fe faf1 	bl	8001f04 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003924:	e00a      	b.n	800393c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003926:	f7fe faed 	bl	8001f04 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	f241 3288 	movw	r2, #5000	; 0x1388
 8003934:	4293      	cmp	r3, r2
 8003936:	d901      	bls.n	800393c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e0b2      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800393c:	4b05      	ldr	r3, [pc, #20]	; (8003954 <HAL_RCC_OscConfig+0x500>)
 800393e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003940:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0ee      	beq.n	8003926 <HAL_RCC_OscConfig+0x4d2>
 8003948:	e023      	b.n	8003992 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800394a:	f7fe fadb 	bl	8001f04 <HAL_GetTick>
 800394e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003950:	e019      	b.n	8003986 <HAL_RCC_OscConfig+0x532>
 8003952:	bf00      	nop
 8003954:	40023800 	.word	0x40023800
 8003958:	08006648 	.word	0x08006648
 800395c:	20000008 	.word	0x20000008
 8003960:	2000000c 	.word	0x2000000c
 8003964:	42470020 	.word	0x42470020
 8003968:	42470680 	.word	0x42470680
 800396c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003970:	f7fe fac8 	bl	8001f04 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	f241 3288 	movw	r2, #5000	; 0x1388
 800397e:	4293      	cmp	r3, r2
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e08d      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003986:	4b49      	ldr	r3, [pc, #292]	; (8003aac <HAL_RCC_OscConfig+0x658>)
 8003988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1ee      	bne.n	8003970 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003992:	7ffb      	ldrb	r3, [r7, #31]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d105      	bne.n	80039a4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003998:	4b44      	ldr	r3, [pc, #272]	; (8003aac <HAL_RCC_OscConfig+0x658>)
 800399a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800399c:	4a43      	ldr	r2, [pc, #268]	; (8003aac <HAL_RCC_OscConfig+0x658>)
 800399e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039a2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d079      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	2b0c      	cmp	r3, #12
 80039b0:	d056      	beq.n	8003a60 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d13b      	bne.n	8003a32 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039ba:	4b3d      	ldr	r3, [pc, #244]	; (8003ab0 <HAL_RCC_OscConfig+0x65c>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039c0:	f7fe faa0 	bl	8001f04 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039c8:	f7fe fa9c 	bl	8001f04 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e063      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039da:	4b34      	ldr	r3, [pc, #208]	; (8003aac <HAL_RCC_OscConfig+0x658>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d1f0      	bne.n	80039c8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039e6:	4b31      	ldr	r3, [pc, #196]	; (8003aac <HAL_RCC_OscConfig+0x658>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f6:	4319      	orrs	r1, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fc:	430b      	orrs	r3, r1
 80039fe:	492b      	ldr	r1, [pc, #172]	; (8003aac <HAL_RCC_OscConfig+0x658>)
 8003a00:	4313      	orrs	r3, r2
 8003a02:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a04:	4b2a      	ldr	r3, [pc, #168]	; (8003ab0 <HAL_RCC_OscConfig+0x65c>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0a:	f7fe fa7b 	bl	8001f04 <HAL_GetTick>
 8003a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a10:	e008      	b.n	8003a24 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a12:	f7fe fa77 	bl	8001f04 <HAL_GetTick>
 8003a16:	4602      	mov	r2, r0
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	2b02      	cmp	r3, #2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e03e      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003a24:	4b21      	ldr	r3, [pc, #132]	; (8003aac <HAL_RCC_OscConfig+0x658>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d0f0      	beq.n	8003a12 <HAL_RCC_OscConfig+0x5be>
 8003a30:	e036      	b.n	8003aa0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a32:	4b1f      	ldr	r3, [pc, #124]	; (8003ab0 <HAL_RCC_OscConfig+0x65c>)
 8003a34:	2200      	movs	r2, #0
 8003a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a38:	f7fe fa64 	bl	8001f04 <HAL_GetTick>
 8003a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a3e:	e008      	b.n	8003a52 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a40:	f7fe fa60 	bl	8001f04 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d901      	bls.n	8003a52 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003a4e:	2303      	movs	r3, #3
 8003a50:	e027      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a52:	4b16      	ldr	r3, [pc, #88]	; (8003aac <HAL_RCC_OscConfig+0x658>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1f0      	bne.n	8003a40 <HAL_RCC_OscConfig+0x5ec>
 8003a5e:	e01f      	b.n	8003aa0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d101      	bne.n	8003a6c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e01a      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003a6c:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <HAL_RCC_OscConfig+0x658>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d10d      	bne.n	8003a9c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a8a:	429a      	cmp	r2, r3
 8003a8c:	d106      	bne.n	8003a9c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d001      	beq.n	8003aa0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e000      	b.n	8003aa2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3720      	adds	r7, #32
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	42470060 	.word	0x42470060

08003ab4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b084      	sub	sp, #16
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
 8003abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e11a      	b.n	8003cfe <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac8:	4b8f      	ldr	r3, [pc, #572]	; (8003d08 <HAL_RCC_ClockConfig+0x254>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d919      	bls.n	8003b0a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d105      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x34>
 8003adc:	4b8a      	ldr	r3, [pc, #552]	; (8003d08 <HAL_RCC_ClockConfig+0x254>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a89      	ldr	r2, [pc, #548]	; (8003d08 <HAL_RCC_ClockConfig+0x254>)
 8003ae2:	f043 0304 	orr.w	r3, r3, #4
 8003ae6:	6013      	str	r3, [r2, #0]
 8003ae8:	4b87      	ldr	r3, [pc, #540]	; (8003d08 <HAL_RCC_ClockConfig+0x254>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f023 0201 	bic.w	r2, r3, #1
 8003af0:	4985      	ldr	r1, [pc, #532]	; (8003d08 <HAL_RCC_ClockConfig+0x254>)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af8:	4b83      	ldr	r3, [pc, #524]	; (8003d08 <HAL_RCC_ClockConfig+0x254>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d001      	beq.n	8003b0a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e0f9      	b.n	8003cfe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d008      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b16:	4b7d      	ldr	r3, [pc, #500]	; (8003d0c <HAL_RCC_ClockConfig+0x258>)
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	497a      	ldr	r1, [pc, #488]	; (8003d0c <HAL_RCC_ClockConfig+0x258>)
 8003b24:	4313      	orrs	r3, r2
 8003b26:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0301 	and.w	r3, r3, #1
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 808e 	beq.w	8003c52 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	2b02      	cmp	r3, #2
 8003b3c:	d107      	bne.n	8003b4e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b3e:	4b73      	ldr	r3, [pc, #460]	; (8003d0c <HAL_RCC_ClockConfig+0x258>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d121      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e0d7      	b.n	8003cfe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	2b03      	cmp	r3, #3
 8003b54:	d107      	bne.n	8003b66 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b56:	4b6d      	ldr	r3, [pc, #436]	; (8003d0c <HAL_RCC_ClockConfig+0x258>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d115      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e0cb      	b.n	8003cfe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d107      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003b6e:	4b67      	ldr	r3, [pc, #412]	; (8003d0c <HAL_RCC_ClockConfig+0x258>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d109      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e0bf      	b.n	8003cfe <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003b7e:	4b63      	ldr	r3, [pc, #396]	; (8003d0c <HAL_RCC_ClockConfig+0x258>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e0b7      	b.n	8003cfe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b8e:	4b5f      	ldr	r3, [pc, #380]	; (8003d0c <HAL_RCC_ClockConfig+0x258>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f023 0203 	bic.w	r2, r3, #3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	495c      	ldr	r1, [pc, #368]	; (8003d0c <HAL_RCC_ClockConfig+0x258>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ba0:	f7fe f9b0 	bl	8001f04 <HAL_GetTick>
 8003ba4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d112      	bne.n	8003bd4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bae:	e00a      	b.n	8003bc6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb0:	f7fe f9a8 	bl	8001f04 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d901      	bls.n	8003bc6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e09b      	b.n	8003cfe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003bc6:	4b51      	ldr	r3, [pc, #324]	; (8003d0c <HAL_RCC_ClockConfig+0x258>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b08      	cmp	r3, #8
 8003bd0:	d1ee      	bne.n	8003bb0 <HAL_RCC_ClockConfig+0xfc>
 8003bd2:	e03e      	b.n	8003c52 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d112      	bne.n	8003c02 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bdc:	e00a      	b.n	8003bf4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bde:	f7fe f991 	bl	8001f04 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d901      	bls.n	8003bf4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e084      	b.n	8003cfe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003bf4:	4b45      	ldr	r3, [pc, #276]	; (8003d0c <HAL_RCC_ClockConfig+0x258>)
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f003 030c 	and.w	r3, r3, #12
 8003bfc:	2b0c      	cmp	r3, #12
 8003bfe:	d1ee      	bne.n	8003bde <HAL_RCC_ClockConfig+0x12a>
 8003c00:	e027      	b.n	8003c52 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d11d      	bne.n	8003c46 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c0c:	f7fe f97a 	bl	8001f04 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d901      	bls.n	8003c22 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	e06d      	b.n	8003cfe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c22:	4b3a      	ldr	r3, [pc, #232]	; (8003d0c <HAL_RCC_ClockConfig+0x258>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d1ee      	bne.n	8003c0c <HAL_RCC_ClockConfig+0x158>
 8003c2e:	e010      	b.n	8003c52 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c30:	f7fe f968 	bl	8001f04 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d901      	bls.n	8003c46 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e05b      	b.n	8003cfe <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003c46:	4b31      	ldr	r3, [pc, #196]	; (8003d0c <HAL_RCC_ClockConfig+0x258>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1ee      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c52:	4b2d      	ldr	r3, [pc, #180]	; (8003d08 <HAL_RCC_ClockConfig+0x254>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d219      	bcs.n	8003c94 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d105      	bne.n	8003c72 <HAL_RCC_ClockConfig+0x1be>
 8003c66:	4b28      	ldr	r3, [pc, #160]	; (8003d08 <HAL_RCC_ClockConfig+0x254>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a27      	ldr	r2, [pc, #156]	; (8003d08 <HAL_RCC_ClockConfig+0x254>)
 8003c6c:	f043 0304 	orr.w	r3, r3, #4
 8003c70:	6013      	str	r3, [r2, #0]
 8003c72:	4b25      	ldr	r3, [pc, #148]	; (8003d08 <HAL_RCC_ClockConfig+0x254>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 0201 	bic.w	r2, r3, #1
 8003c7a:	4923      	ldr	r1, [pc, #140]	; (8003d08 <HAL_RCC_ClockConfig+0x254>)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c82:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <HAL_RCC_ClockConfig+0x254>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	683a      	ldr	r2, [r7, #0]
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d001      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e034      	b.n	8003cfe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d008      	beq.n	8003cb2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ca0:	4b1a      	ldr	r3, [pc, #104]	; (8003d0c <HAL_RCC_ClockConfig+0x258>)
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	4917      	ldr	r1, [pc, #92]	; (8003d0c <HAL_RCC_ClockConfig+0x258>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0308 	and.w	r3, r3, #8
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d009      	beq.n	8003cd2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003cbe:	4b13      	ldr	r3, [pc, #76]	; (8003d0c <HAL_RCC_ClockConfig+0x258>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	490f      	ldr	r1, [pc, #60]	; (8003d0c <HAL_RCC_ClockConfig+0x258>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003cd2:	f000 f823 	bl	8003d1c <HAL_RCC_GetSysClockFreq>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <HAL_RCC_ClockConfig+0x258>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	091b      	lsrs	r3, r3, #4
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	490b      	ldr	r1, [pc, #44]	; (8003d10 <HAL_RCC_ClockConfig+0x25c>)
 8003ce4:	5ccb      	ldrb	r3, [r1, r3]
 8003ce6:	fa22 f303 	lsr.w	r3, r2, r3
 8003cea:	4a0a      	ldr	r2, [pc, #40]	; (8003d14 <HAL_RCC_ClockConfig+0x260>)
 8003cec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003cee:	4b0a      	ldr	r3, [pc, #40]	; (8003d18 <HAL_RCC_ClockConfig+0x264>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe f8ba 	bl	8001e6c <HAL_InitTick>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	72fb      	strb	r3, [r7, #11]

  return status;
 8003cfc:	7afb      	ldrb	r3, [r7, #11]
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3710      	adds	r7, #16
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40023c00 	.word	0x40023c00
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	08006648 	.word	0x08006648
 8003d14:	20000008 	.word	0x20000008
 8003d18:	2000000c 	.word	0x2000000c

08003d1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d1c:	b5b0      	push	{r4, r5, r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003d22:	4b4d      	ldr	r3, [pc, #308]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f003 030c 	and.w	r3, r3, #12
 8003d2e:	2b0c      	cmp	r3, #12
 8003d30:	d00c      	beq.n	8003d4c <HAL_RCC_GetSysClockFreq+0x30>
 8003d32:	2b0c      	cmp	r3, #12
 8003d34:	d87c      	bhi.n	8003e30 <HAL_RCC_GetSysClockFreq+0x114>
 8003d36:	2b04      	cmp	r3, #4
 8003d38:	d002      	beq.n	8003d40 <HAL_RCC_GetSysClockFreq+0x24>
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d003      	beq.n	8003d46 <HAL_RCC_GetSysClockFreq+0x2a>
 8003d3e:	e077      	b.n	8003e30 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d40:	4b46      	ldr	r3, [pc, #280]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x140>)
 8003d42:	613b      	str	r3, [r7, #16]
      break;
 8003d44:	e082      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003d46:	4b46      	ldr	r3, [pc, #280]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x144>)
 8003d48:	613b      	str	r3, [r7, #16]
      break;
 8003d4a:	e07f      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	0c9b      	lsrs	r3, r3, #18
 8003d50:	f003 030f 	and.w	r3, r3, #15
 8003d54:	4a43      	ldr	r2, [pc, #268]	; (8003e64 <HAL_RCC_GetSysClockFreq+0x148>)
 8003d56:	5cd3      	ldrb	r3, [r2, r3]
 8003d58:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	0d9b      	lsrs	r3, r3, #22
 8003d5e:	f003 0303 	and.w	r3, r3, #3
 8003d62:	3301      	adds	r3, #1
 8003d64:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d66:	4b3c      	ldr	r3, [pc, #240]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d01a      	beq.n	8003da8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	461a      	mov	r2, r3
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	4939      	ldr	r1, [pc, #228]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x144>)
 8003d7c:	fb01 f003 	mul.w	r0, r1, r3
 8003d80:	2100      	movs	r1, #0
 8003d82:	fb01 f102 	mul.w	r1, r1, r2
 8003d86:	1844      	adds	r4, r0, r1
 8003d88:	4935      	ldr	r1, [pc, #212]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x144>)
 8003d8a:	fba2 0101 	umull	r0, r1, r2, r1
 8003d8e:	1863      	adds	r3, r4, r1
 8003d90:	4619      	mov	r1, r3
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	461a      	mov	r2, r3
 8003d96:	f04f 0300 	mov.w	r3, #0
 8003d9a:	f7fc feed 	bl	8000b78 <__aeabi_uldivmod>
 8003d9e:	4602      	mov	r2, r0
 8003da0:	460b      	mov	r3, r1
 8003da2:	4613      	mov	r3, r2
 8003da4:	617b      	str	r3, [r7, #20]
 8003da6:	e040      	b.n	8003e2a <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	461c      	mov	r4, r3
 8003dac:	f04f 0500 	mov.w	r5, #0
 8003db0:	4620      	mov	r0, r4
 8003db2:	4629      	mov	r1, r5
 8003db4:	f04f 0200 	mov.w	r2, #0
 8003db8:	f04f 0300 	mov.w	r3, #0
 8003dbc:	014b      	lsls	r3, r1, #5
 8003dbe:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003dc2:	0142      	lsls	r2, r0, #5
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	1b00      	subs	r0, r0, r4
 8003dca:	eb61 0105 	sbc.w	r1, r1, r5
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	f04f 0300 	mov.w	r3, #0
 8003dd6:	018b      	lsls	r3, r1, #6
 8003dd8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003ddc:	0182      	lsls	r2, r0, #6
 8003dde:	1a12      	subs	r2, r2, r0
 8003de0:	eb63 0301 	sbc.w	r3, r3, r1
 8003de4:	f04f 0000 	mov.w	r0, #0
 8003de8:	f04f 0100 	mov.w	r1, #0
 8003dec:	00d9      	lsls	r1, r3, #3
 8003dee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003df2:	00d0      	lsls	r0, r2, #3
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	1912      	adds	r2, r2, r4
 8003dfa:	eb45 0303 	adc.w	r3, r5, r3
 8003dfe:	f04f 0000 	mov.w	r0, #0
 8003e02:	f04f 0100 	mov.w	r1, #0
 8003e06:	0299      	lsls	r1, r3, #10
 8003e08:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e0c:	0290      	lsls	r0, r2, #10
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	4610      	mov	r0, r2
 8003e14:	4619      	mov	r1, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	461a      	mov	r2, r3
 8003e1a:	f04f 0300 	mov.w	r3, #0
 8003e1e:	f7fc feab 	bl	8000b78 <__aeabi_uldivmod>
 8003e22:	4602      	mov	r2, r0
 8003e24:	460b      	mov	r3, r1
 8003e26:	4613      	mov	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	613b      	str	r3, [r7, #16]
      break;
 8003e2e:	e00d      	b.n	8003e4c <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003e30:	4b09      	ldr	r3, [pc, #36]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	0b5b      	lsrs	r3, r3, #13
 8003e36:	f003 0307 	and.w	r3, r3, #7
 8003e3a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003e44:	fa02 f303 	lsl.w	r3, r2, r3
 8003e48:	613b      	str	r3, [r7, #16]
      break;
 8003e4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e4c:	693b      	ldr	r3, [r7, #16]
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3718      	adds	r7, #24
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bdb0      	pop	{r4, r5, r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	00f42400 	.word	0x00f42400
 8003e60:	016e3600 	.word	0x016e3600
 8003e64:	0800663c 	.word	0x0800663c

08003e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e6c:	4b02      	ldr	r3, [pc, #8]	; (8003e78 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bc80      	pop	{r7}
 8003e76:	4770      	bx	lr
 8003e78:	20000008 	.word	0x20000008

08003e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e80:	f7ff fff2 	bl	8003e68 <HAL_RCC_GetHCLKFreq>
 8003e84:	4602      	mov	r2, r0
 8003e86:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	0a1b      	lsrs	r3, r3, #8
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	4903      	ldr	r1, [pc, #12]	; (8003ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e92:	5ccb      	ldrb	r3, [r1, r3]
 8003e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	08006658 	.word	0x08006658

08003ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003ea8:	f7ff ffde 	bl	8003e68 <HAL_RCC_GetHCLKFreq>
 8003eac:	4602      	mov	r2, r0
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	0adb      	lsrs	r3, r3, #11
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	4903      	ldr	r1, [pc, #12]	; (8003ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eba:	5ccb      	ldrb	r3, [r1, r3]
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	08006658 	.word	0x08006658

08003ecc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b087      	sub	sp, #28
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003ed8:	4b29      	ldr	r3, [pc, #164]	; (8003f80 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d12c      	bne.n	8003f3e <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ee4:	4b26      	ldr	r3, [pc, #152]	; (8003f80 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d005      	beq.n	8003efc <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003ef0:	4b24      	ldr	r3, [pc, #144]	; (8003f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003ef8:	617b      	str	r3, [r7, #20]
 8003efa:	e016      	b.n	8003f2a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003efc:	4b20      	ldr	r3, [pc, #128]	; (8003f80 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f00:	4a1f      	ldr	r2, [pc, #124]	; (8003f80 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003f02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f06:	6253      	str	r3, [r2, #36]	; 0x24
 8003f08:	4b1d      	ldr	r3, [pc, #116]	; (8003f80 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f10:	60fb      	str	r3, [r7, #12]
 8003f12:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003f14:	4b1b      	ldr	r3, [pc, #108]	; (8003f84 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003f1c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f1e:	4b18      	ldr	r3, [pc, #96]	; (8003f80 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f22:	4a17      	ldr	r2, [pc, #92]	; (8003f80 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003f24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f28:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003f30:	d105      	bne.n	8003f3e <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f38:	d101      	bne.n	8003f3e <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d105      	bne.n	8003f50 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003f44:	4b10      	ldr	r3, [pc, #64]	; (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a0f      	ldr	r2, [pc, #60]	; (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f4a:	f043 0304 	orr.w	r3, r3, #4
 8003f4e:	6013      	str	r3, [r2, #0]
 8003f50:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f023 0201 	bic.w	r2, r3, #1
 8003f58:	490b      	ldr	r1, [pc, #44]	; (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003f60:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	693a      	ldr	r2, [r7, #16]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d001      	beq.n	8003f72 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003f72:	2300      	movs	r3, #0
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	371c      	adds	r7, #28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40023800 	.word	0x40023800
 8003f84:	40007000 	.word	0x40007000
 8003f88:	40023c00 	.word	0x40023c00

08003f8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e031      	b.n	8004002 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fd fe32 	bl	8001c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4610      	mov	r0, r2
 8003fcc:	f000 fa5a 	bl	8004484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800400c:	b480      	push	{r7}
 800400e:	b085      	sub	sp, #20
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b01      	cmp	r3, #1
 800401e:	d001      	beq.n	8004024 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e03a      	b.n	800409a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0201 	orr.w	r2, r2, #1
 800403a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004044:	d00e      	beq.n	8004064 <HAL_TIM_Base_Start_IT+0x58>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a16      	ldr	r2, [pc, #88]	; (80040a4 <HAL_TIM_Base_Start_IT+0x98>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d009      	beq.n	8004064 <HAL_TIM_Base_Start_IT+0x58>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a14      	ldr	r2, [pc, #80]	; (80040a8 <HAL_TIM_Base_Start_IT+0x9c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d004      	beq.n	8004064 <HAL_TIM_Base_Start_IT+0x58>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a13      	ldr	r2, [pc, #76]	; (80040ac <HAL_TIM_Base_Start_IT+0xa0>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d111      	bne.n	8004088 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 0307 	and.w	r3, r3, #7
 800406e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2b06      	cmp	r3, #6
 8004074:	d010      	beq.n	8004098 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f042 0201 	orr.w	r2, r2, #1
 8004084:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004086:	e007      	b.n	8004098 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f042 0201 	orr.w	r2, r2, #1
 8004096:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3714      	adds	r7, #20
 800409e:	46bd      	mov	sp, r7
 80040a0:	bc80      	pop	{r7}
 80040a2:	4770      	bx	lr
 80040a4:	40000400 	.word	0x40000400
 80040a8:	40000800 	.word	0x40000800
 80040ac:	40010800 	.word	0x40010800

080040b0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68da      	ldr	r2, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f022 0201 	bic.w	r2, r2, #1
 80040c6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6a1a      	ldr	r2, [r3, #32]
 80040ce:	f241 1311 	movw	r3, #4369	; 0x1111
 80040d2:	4013      	ands	r3, r2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d107      	bne.n	80040e8 <HAL_TIM_Base_Stop_IT+0x38>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0201 	bic.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 80040f0:	2300      	movs	r3, #0
}
 80040f2:	4618      	mov	r0, r3
 80040f4:	370c      	adds	r7, #12
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bc80      	pop	{r7}
 80040fa:	4770      	bx	lr

080040fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b082      	sub	sp, #8
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b02      	cmp	r3, #2
 8004110:	d122      	bne.n	8004158 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	68db      	ldr	r3, [r3, #12]
 8004118:	f003 0302 	and.w	r3, r3, #2
 800411c:	2b02      	cmp	r3, #2
 800411e:	d11b      	bne.n	8004158 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0202 	mvn.w	r2, #2
 8004128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2201      	movs	r2, #1
 800412e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	f003 0303 	and.w	r3, r3, #3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d003      	beq.n	8004146 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 f985 	bl	800444e <HAL_TIM_IC_CaptureCallback>
 8004144:	e005      	b.n	8004152 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f978 	bl	800443c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	f000 f987 	bl	8004460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	691b      	ldr	r3, [r3, #16]
 800415e:	f003 0304 	and.w	r3, r3, #4
 8004162:	2b04      	cmp	r3, #4
 8004164:	d122      	bne.n	80041ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	f003 0304 	and.w	r3, r3, #4
 8004170:	2b04      	cmp	r3, #4
 8004172:	d11b      	bne.n	80041ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f06f 0204 	mvn.w	r2, #4
 800417c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2202      	movs	r2, #2
 8004182:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800418e:	2b00      	cmp	r3, #0
 8004190:	d003      	beq.n	800419a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 f95b 	bl	800444e <HAL_TIM_IC_CaptureCallback>
 8004198:	e005      	b.n	80041a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f94e 	bl	800443c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 f95d 	bl	8004460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d122      	bne.n	8004200 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	f003 0308 	and.w	r3, r3, #8
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d11b      	bne.n	8004200 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f06f 0208 	mvn.w	r2, #8
 80041d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2204      	movs	r2, #4
 80041d6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d003      	beq.n	80041ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 f931 	bl	800444e <HAL_TIM_IC_CaptureCallback>
 80041ec:	e005      	b.n	80041fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f924 	bl	800443c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 f933 	bl	8004460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	f003 0310 	and.w	r3, r3, #16
 800420a:	2b10      	cmp	r3, #16
 800420c:	d122      	bne.n	8004254 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	f003 0310 	and.w	r3, r3, #16
 8004218:	2b10      	cmp	r3, #16
 800421a:	d11b      	bne.n	8004254 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f06f 0210 	mvn.w	r2, #16
 8004224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2208      	movs	r2, #8
 800422a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f000 f907 	bl	800444e <HAL_TIM_IC_CaptureCallback>
 8004240:	e005      	b.n	800424e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f8fa 	bl	800443c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 f909 	bl	8004460 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691b      	ldr	r3, [r3, #16]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b01      	cmp	r3, #1
 8004260:	d10e      	bne.n	8004280 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b01      	cmp	r3, #1
 800426e:	d107      	bne.n	8004280 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0201 	mvn.w	r2, #1
 8004278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fd f990 	bl	80015a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	691b      	ldr	r3, [r3, #16]
 8004286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428a:	2b40      	cmp	r3, #64	; 0x40
 800428c:	d10e      	bne.n	80042ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004298:	2b40      	cmp	r3, #64	; 0x40
 800429a:	d107      	bne.n	80042ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f8e3 	bl	8004472 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042ac:	bf00      	nop
 80042ae:	3708      	adds	r7, #8
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd80      	pop	{r7, pc}

080042b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b084      	sub	sp, #16
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d101      	bne.n	80042cc <HAL_TIM_ConfigClockSource+0x18>
 80042c8:	2302      	movs	r3, #2
 80042ca:	e0b3      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x180>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2202      	movs	r2, #2
 80042d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004304:	d03e      	beq.n	8004384 <HAL_TIM_ConfigClockSource+0xd0>
 8004306:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800430a:	f200 8087 	bhi.w	800441c <HAL_TIM_ConfigClockSource+0x168>
 800430e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004312:	f000 8085 	beq.w	8004420 <HAL_TIM_ConfigClockSource+0x16c>
 8004316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800431a:	d87f      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x168>
 800431c:	2b70      	cmp	r3, #112	; 0x70
 800431e:	d01a      	beq.n	8004356 <HAL_TIM_ConfigClockSource+0xa2>
 8004320:	2b70      	cmp	r3, #112	; 0x70
 8004322:	d87b      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x168>
 8004324:	2b60      	cmp	r3, #96	; 0x60
 8004326:	d050      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0x116>
 8004328:	2b60      	cmp	r3, #96	; 0x60
 800432a:	d877      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x168>
 800432c:	2b50      	cmp	r3, #80	; 0x50
 800432e:	d03c      	beq.n	80043aa <HAL_TIM_ConfigClockSource+0xf6>
 8004330:	2b50      	cmp	r3, #80	; 0x50
 8004332:	d873      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x168>
 8004334:	2b40      	cmp	r3, #64	; 0x40
 8004336:	d058      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x136>
 8004338:	2b40      	cmp	r3, #64	; 0x40
 800433a:	d86f      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x168>
 800433c:	2b30      	cmp	r3, #48	; 0x30
 800433e:	d064      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x156>
 8004340:	2b30      	cmp	r3, #48	; 0x30
 8004342:	d86b      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x168>
 8004344:	2b20      	cmp	r3, #32
 8004346:	d060      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x156>
 8004348:	2b20      	cmp	r3, #32
 800434a:	d867      	bhi.n	800441c <HAL_TIM_ConfigClockSource+0x168>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d05c      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x156>
 8004350:	2b10      	cmp	r3, #16
 8004352:	d05a      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004354:	e062      	b.n	800441c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	6899      	ldr	r1, [r3, #8]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	f000 f974 	bl	8004652 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004378:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	68fa      	ldr	r2, [r7, #12]
 8004380:	609a      	str	r2, [r3, #8]
      break;
 8004382:	e04e      	b.n	8004422 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6818      	ldr	r0, [r3, #0]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	6899      	ldr	r1, [r3, #8]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685a      	ldr	r2, [r3, #4]
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f000 f95d 	bl	8004652 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043a6:	609a      	str	r2, [r3, #8]
      break;
 80043a8:	e03b      	b.n	8004422 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6818      	ldr	r0, [r3, #0]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	6859      	ldr	r1, [r3, #4]
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	68db      	ldr	r3, [r3, #12]
 80043b6:	461a      	mov	r2, r3
 80043b8:	f000 f8d4 	bl	8004564 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2150      	movs	r1, #80	; 0x50
 80043c2:	4618      	mov	r0, r3
 80043c4:	f000 f92b 	bl	800461e <TIM_ITRx_SetConfig>
      break;
 80043c8:	e02b      	b.n	8004422 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6859      	ldr	r1, [r3, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	461a      	mov	r2, r3
 80043d8:	f000 f8f2 	bl	80045c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2160      	movs	r1, #96	; 0x60
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 f91b 	bl	800461e <TIM_ITRx_SetConfig>
      break;
 80043e8:	e01b      	b.n	8004422 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6859      	ldr	r1, [r3, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	461a      	mov	r2, r3
 80043f8:	f000 f8b4 	bl	8004564 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2140      	movs	r1, #64	; 0x40
 8004402:	4618      	mov	r0, r3
 8004404:	f000 f90b 	bl	800461e <TIM_ITRx_SetConfig>
      break;
 8004408:	e00b      	b.n	8004422 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4619      	mov	r1, r3
 8004414:	4610      	mov	r0, r2
 8004416:	f000 f902 	bl	800461e <TIM_ITRx_SetConfig>
        break;
 800441a:	e002      	b.n	8004422 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800441c:	bf00      	nop
 800441e:	e000      	b.n	8004422 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004420:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2201      	movs	r2, #1
 8004426:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	bc80      	pop	{r7}
 800444c:	4770      	bx	lr

0800444e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr

08004460 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr

08004472 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr

08004484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800449a:	d00f      	beq.n	80044bc <TIM_Base_SetConfig+0x38>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a2b      	ldr	r2, [pc, #172]	; (800454c <TIM_Base_SetConfig+0xc8>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00b      	beq.n	80044bc <TIM_Base_SetConfig+0x38>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	4a2a      	ldr	r2, [pc, #168]	; (8004550 <TIM_Base_SetConfig+0xcc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d007      	beq.n	80044bc <TIM_Base_SetConfig+0x38>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a29      	ldr	r2, [pc, #164]	; (8004554 <TIM_Base_SetConfig+0xd0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d003      	beq.n	80044bc <TIM_Base_SetConfig+0x38>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a28      	ldr	r2, [pc, #160]	; (8004558 <TIM_Base_SetConfig+0xd4>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d108      	bne.n	80044ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	68fa      	ldr	r2, [r7, #12]
 80044ca:	4313      	orrs	r3, r2
 80044cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044d4:	d017      	beq.n	8004506 <TIM_Base_SetConfig+0x82>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a1c      	ldr	r2, [pc, #112]	; (800454c <TIM_Base_SetConfig+0xc8>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d013      	beq.n	8004506 <TIM_Base_SetConfig+0x82>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a1b      	ldr	r2, [pc, #108]	; (8004550 <TIM_Base_SetConfig+0xcc>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d00f      	beq.n	8004506 <TIM_Base_SetConfig+0x82>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a1a      	ldr	r2, [pc, #104]	; (8004554 <TIM_Base_SetConfig+0xd0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d00b      	beq.n	8004506 <TIM_Base_SetConfig+0x82>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a19      	ldr	r2, [pc, #100]	; (8004558 <TIM_Base_SetConfig+0xd4>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d007      	beq.n	8004506 <TIM_Base_SetConfig+0x82>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a18      	ldr	r2, [pc, #96]	; (800455c <TIM_Base_SetConfig+0xd8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d003      	beq.n	8004506 <TIM_Base_SetConfig+0x82>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a17      	ldr	r2, [pc, #92]	; (8004560 <TIM_Base_SetConfig+0xdc>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d108      	bne.n	8004518 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800450c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	4313      	orrs	r3, r2
 8004516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	4313      	orrs	r3, r2
 8004524:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68fa      	ldr	r2, [r7, #12]
 800452a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	689a      	ldr	r2, [r3, #8]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	615a      	str	r2, [r3, #20]
}
 8004542:	bf00      	nop
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800
 8004554:	40000c00 	.word	0x40000c00
 8004558:	40010800 	.word	0x40010800
 800455c:	40010c00 	.word	0x40010c00
 8004560:	40011000 	.word	0x40011000

08004564 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6a1b      	ldr	r3, [r3, #32]
 8004574:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	f023 0201 	bic.w	r2, r3, #1
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800458e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	011b      	lsls	r3, r3, #4
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4313      	orrs	r3, r2
 8004598:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f023 030a 	bic.w	r3, r3, #10
 80045a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	693a      	ldr	r2, [r7, #16]
 80045ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	621a      	str	r2, [r3, #32]
}
 80045b6:	bf00      	nop
 80045b8:	371c      	adds	r7, #28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bc80      	pop	{r7}
 80045be:	4770      	bx	lr

080045c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b087      	sub	sp, #28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6a1b      	ldr	r3, [r3, #32]
 80045d0:	f023 0210 	bic.w	r2, r3, #16
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	699b      	ldr	r3, [r3, #24]
 80045dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	031b      	lsls	r3, r3, #12
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	693a      	ldr	r2, [r7, #16]
 8004604:	4313      	orrs	r3, r2
 8004606:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	621a      	str	r2, [r3, #32]
}
 8004614:	bf00      	nop
 8004616:	371c      	adds	r7, #28
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr

0800461e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800461e:	b480      	push	{r7}
 8004620:	b085      	sub	sp, #20
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
 8004626:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004634:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004636:	683a      	ldr	r2, [r7, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4313      	orrs	r3, r2
 800463c:	f043 0307 	orr.w	r3, r3, #7
 8004640:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68fa      	ldr	r2, [r7, #12]
 8004646:	609a      	str	r2, [r3, #8]
}
 8004648:	bf00      	nop
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	bc80      	pop	{r7}
 8004650:	4770      	bx	lr

08004652 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004652:	b480      	push	{r7}
 8004654:	b087      	sub	sp, #28
 8004656:	af00      	add	r7, sp, #0
 8004658:	60f8      	str	r0, [r7, #12]
 800465a:	60b9      	str	r1, [r7, #8]
 800465c:	607a      	str	r2, [r7, #4]
 800465e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800466c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	021a      	lsls	r2, r3, #8
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	431a      	orrs	r2, r3
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	4313      	orrs	r3, r2
 800467a:	697a      	ldr	r2, [r7, #20]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	609a      	str	r2, [r3, #8]
}
 8004686:	bf00      	nop
 8004688:	371c      	adds	r7, #28
 800468a:	46bd      	mov	sp, r7
 800468c:	bc80      	pop	{r7}
 800468e:	4770      	bx	lr

08004690 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d101      	bne.n	80046a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046a4:	2302      	movs	r3, #2
 80046a6:	e046      	b.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2202      	movs	r2, #2
 80046b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ea:	d00e      	beq.n	800470a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a13      	ldr	r2, [pc, #76]	; (8004740 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d009      	beq.n	800470a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a12      	ldr	r2, [pc, #72]	; (8004744 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d004      	beq.n	800470a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a10      	ldr	r2, [pc, #64]	; (8004748 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d10c      	bne.n	8004724 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004710:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	4313      	orrs	r3, r2
 800471a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2200      	movs	r2, #0
 8004730:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004734:	2300      	movs	r3, #0
}
 8004736:	4618      	mov	r0, r3
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	bc80      	pop	{r7}
 800473e:	4770      	bx	lr
 8004740:	40000400 	.word	0x40000400
 8004744:	40000800 	.word	0x40000800
 8004748:	40010800 	.word	0x40010800

0800474c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e03f      	b.n	80047de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004764:	b2db      	uxtb	r3, r3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d106      	bne.n	8004778 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7fd fa76 	bl	8001c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2224      	movs	r2, #36	; 0x24
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	68da      	ldr	r2, [r3, #12]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800478e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f000 f829 	bl	80047e8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	691a      	ldr	r2, [r3, #16]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	695a      	ldr	r2, [r3, #20]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68da      	ldr	r2, [r3, #12]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3708      	adds	r7, #8
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	430a      	orrs	r2, r1
 8004804:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	689a      	ldr	r2, [r3, #8]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	431a      	orrs	r2, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	4313      	orrs	r3, r2
 800481c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004828:	f023 030c 	bic.w	r3, r3, #12
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	68b9      	ldr	r1, [r7, #8]
 8004832:	430b      	orrs	r3, r1
 8004834:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	695b      	ldr	r3, [r3, #20]
 800483c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	699a      	ldr	r2, [r3, #24]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	430a      	orrs	r2, r1
 800484a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a55      	ldr	r2, [pc, #340]	; (80049a8 <UART_SetConfig+0x1c0>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d103      	bne.n	800485e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004856:	f7ff fb25 	bl	8003ea4 <HAL_RCC_GetPCLK2Freq>
 800485a:	60f8      	str	r0, [r7, #12]
 800485c:	e002      	b.n	8004864 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800485e:	f7ff fb0d 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
 8004862:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	69db      	ldr	r3, [r3, #28]
 8004868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800486c:	d14c      	bne.n	8004908 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4613      	mov	r3, r2
 8004872:	009b      	lsls	r3, r3, #2
 8004874:	4413      	add	r3, r2
 8004876:	009a      	lsls	r2, r3, #2
 8004878:	441a      	add	r2, r3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	005b      	lsls	r3, r3, #1
 8004880:	fbb2 f3f3 	udiv	r3, r2, r3
 8004884:	4a49      	ldr	r2, [pc, #292]	; (80049ac <UART_SetConfig+0x1c4>)
 8004886:	fba2 2303 	umull	r2, r3, r2, r3
 800488a:	095b      	lsrs	r3, r3, #5
 800488c:	0119      	lsls	r1, r3, #4
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4613      	mov	r3, r2
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	009a      	lsls	r2, r3, #2
 8004898:	441a      	add	r2, r3
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80048a4:	4b41      	ldr	r3, [pc, #260]	; (80049ac <UART_SetConfig+0x1c4>)
 80048a6:	fba3 0302 	umull	r0, r3, r3, r2
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	2064      	movs	r0, #100	; 0x64
 80048ae:	fb00 f303 	mul.w	r3, r0, r3
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	3332      	adds	r3, #50	; 0x32
 80048b8:	4a3c      	ldr	r2, [pc, #240]	; (80049ac <UART_SetConfig+0x1c4>)
 80048ba:	fba2 2303 	umull	r2, r3, r2, r3
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048c6:	4419      	add	r1, r3
 80048c8:	68fa      	ldr	r2, [r7, #12]
 80048ca:	4613      	mov	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	4413      	add	r3, r2
 80048d0:	009a      	lsls	r2, r3, #2
 80048d2:	441a      	add	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	005b      	lsls	r3, r3, #1
 80048da:	fbb2 f2f3 	udiv	r2, r2, r3
 80048de:	4b33      	ldr	r3, [pc, #204]	; (80049ac <UART_SetConfig+0x1c4>)
 80048e0:	fba3 0302 	umull	r0, r3, r3, r2
 80048e4:	095b      	lsrs	r3, r3, #5
 80048e6:	2064      	movs	r0, #100	; 0x64
 80048e8:	fb00 f303 	mul.w	r3, r0, r3
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	3332      	adds	r3, #50	; 0x32
 80048f2:	4a2e      	ldr	r2, [pc, #184]	; (80049ac <UART_SetConfig+0x1c4>)
 80048f4:	fba2 2303 	umull	r2, r3, r2, r3
 80048f8:	095b      	lsrs	r3, r3, #5
 80048fa:	f003 0207 	and.w	r2, r3, #7
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	440a      	add	r2, r1
 8004904:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004906:	e04a      	b.n	800499e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004908:	68fa      	ldr	r2, [r7, #12]
 800490a:	4613      	mov	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	009a      	lsls	r2, r3, #2
 8004912:	441a      	add	r2, r3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	fbb2 f3f3 	udiv	r3, r2, r3
 800491e:	4a23      	ldr	r2, [pc, #140]	; (80049ac <UART_SetConfig+0x1c4>)
 8004920:	fba2 2303 	umull	r2, r3, r2, r3
 8004924:	095b      	lsrs	r3, r3, #5
 8004926:	0119      	lsls	r1, r3, #4
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	4613      	mov	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	4413      	add	r3, r2
 8004930:	009a      	lsls	r2, r3, #2
 8004932:	441a      	add	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	fbb2 f2f3 	udiv	r2, r2, r3
 800493e:	4b1b      	ldr	r3, [pc, #108]	; (80049ac <UART_SetConfig+0x1c4>)
 8004940:	fba3 0302 	umull	r0, r3, r3, r2
 8004944:	095b      	lsrs	r3, r3, #5
 8004946:	2064      	movs	r0, #100	; 0x64
 8004948:	fb00 f303 	mul.w	r3, r0, r3
 800494c:	1ad3      	subs	r3, r2, r3
 800494e:	011b      	lsls	r3, r3, #4
 8004950:	3332      	adds	r3, #50	; 0x32
 8004952:	4a16      	ldr	r2, [pc, #88]	; (80049ac <UART_SetConfig+0x1c4>)
 8004954:	fba2 2303 	umull	r2, r3, r2, r3
 8004958:	095b      	lsrs	r3, r3, #5
 800495a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800495e:	4419      	add	r1, r3
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	009a      	lsls	r2, r3, #2
 800496a:	441a      	add	r2, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	fbb2 f2f3 	udiv	r2, r2, r3
 8004976:	4b0d      	ldr	r3, [pc, #52]	; (80049ac <UART_SetConfig+0x1c4>)
 8004978:	fba3 0302 	umull	r0, r3, r3, r2
 800497c:	095b      	lsrs	r3, r3, #5
 800497e:	2064      	movs	r0, #100	; 0x64
 8004980:	fb00 f303 	mul.w	r3, r0, r3
 8004984:	1ad3      	subs	r3, r2, r3
 8004986:	011b      	lsls	r3, r3, #4
 8004988:	3332      	adds	r3, #50	; 0x32
 800498a:	4a08      	ldr	r2, [pc, #32]	; (80049ac <UART_SetConfig+0x1c4>)
 800498c:	fba2 2303 	umull	r2, r3, r2, r3
 8004990:	095b      	lsrs	r3, r3, #5
 8004992:	f003 020f 	and.w	r2, r3, #15
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	440a      	add	r2, r1
 800499c:	609a      	str	r2, [r3, #8]
}
 800499e:	bf00      	nop
 80049a0:	3710      	adds	r7, #16
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40013800 	.word	0x40013800
 80049ac:	51eb851f 	.word	0x51eb851f

080049b0 <__errno>:
 80049b0:	4b01      	ldr	r3, [pc, #4]	; (80049b8 <__errno+0x8>)
 80049b2:	6818      	ldr	r0, [r3, #0]
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	20000014 	.word	0x20000014

080049bc <__libc_init_array>:
 80049bc:	b570      	push	{r4, r5, r6, lr}
 80049be:	2600      	movs	r6, #0
 80049c0:	4d0c      	ldr	r5, [pc, #48]	; (80049f4 <__libc_init_array+0x38>)
 80049c2:	4c0d      	ldr	r4, [pc, #52]	; (80049f8 <__libc_init_array+0x3c>)
 80049c4:	1b64      	subs	r4, r4, r5
 80049c6:	10a4      	asrs	r4, r4, #2
 80049c8:	42a6      	cmp	r6, r4
 80049ca:	d109      	bne.n	80049e0 <__libc_init_array+0x24>
 80049cc:	f000 fc5c 	bl	8005288 <_init>
 80049d0:	2600      	movs	r6, #0
 80049d2:	4d0a      	ldr	r5, [pc, #40]	; (80049fc <__libc_init_array+0x40>)
 80049d4:	4c0a      	ldr	r4, [pc, #40]	; (8004a00 <__libc_init_array+0x44>)
 80049d6:	1b64      	subs	r4, r4, r5
 80049d8:	10a4      	asrs	r4, r4, #2
 80049da:	42a6      	cmp	r6, r4
 80049dc:	d105      	bne.n	80049ea <__libc_init_array+0x2e>
 80049de:	bd70      	pop	{r4, r5, r6, pc}
 80049e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e4:	4798      	blx	r3
 80049e6:	3601      	adds	r6, #1
 80049e8:	e7ee      	b.n	80049c8 <__libc_init_array+0xc>
 80049ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80049ee:	4798      	blx	r3
 80049f0:	3601      	adds	r6, #1
 80049f2:	e7f2      	b.n	80049da <__libc_init_array+0x1e>
 80049f4:	0800669c 	.word	0x0800669c
 80049f8:	0800669c 	.word	0x0800669c
 80049fc:	0800669c 	.word	0x0800669c
 8004a00:	080066a0 	.word	0x080066a0

08004a04 <memcpy>:
 8004a04:	440a      	add	r2, r1
 8004a06:	4291      	cmp	r1, r2
 8004a08:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a0c:	d100      	bne.n	8004a10 <memcpy+0xc>
 8004a0e:	4770      	bx	lr
 8004a10:	b510      	push	{r4, lr}
 8004a12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a16:	4291      	cmp	r1, r2
 8004a18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a1c:	d1f9      	bne.n	8004a12 <memcpy+0xe>
 8004a1e:	bd10      	pop	{r4, pc}

08004a20 <memmove>:
 8004a20:	4288      	cmp	r0, r1
 8004a22:	b510      	push	{r4, lr}
 8004a24:	eb01 0402 	add.w	r4, r1, r2
 8004a28:	d902      	bls.n	8004a30 <memmove+0x10>
 8004a2a:	4284      	cmp	r4, r0
 8004a2c:	4623      	mov	r3, r4
 8004a2e:	d807      	bhi.n	8004a40 <memmove+0x20>
 8004a30:	1e43      	subs	r3, r0, #1
 8004a32:	42a1      	cmp	r1, r4
 8004a34:	d008      	beq.n	8004a48 <memmove+0x28>
 8004a36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004a3e:	e7f8      	b.n	8004a32 <memmove+0x12>
 8004a40:	4601      	mov	r1, r0
 8004a42:	4402      	add	r2, r0
 8004a44:	428a      	cmp	r2, r1
 8004a46:	d100      	bne.n	8004a4a <memmove+0x2a>
 8004a48:	bd10      	pop	{r4, pc}
 8004a4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004a4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004a52:	e7f7      	b.n	8004a44 <memmove+0x24>

08004a54 <memset>:
 8004a54:	4603      	mov	r3, r0
 8004a56:	4402      	add	r2, r0
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d100      	bne.n	8004a5e <memset+0xa>
 8004a5c:	4770      	bx	lr
 8004a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a62:	e7f9      	b.n	8004a58 <memset+0x4>

08004a64 <siprintf>:
 8004a64:	b40e      	push	{r1, r2, r3}
 8004a66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004a6a:	b500      	push	{lr}
 8004a6c:	b09c      	sub	sp, #112	; 0x70
 8004a6e:	ab1d      	add	r3, sp, #116	; 0x74
 8004a70:	9002      	str	r0, [sp, #8]
 8004a72:	9006      	str	r0, [sp, #24]
 8004a74:	9107      	str	r1, [sp, #28]
 8004a76:	9104      	str	r1, [sp, #16]
 8004a78:	4808      	ldr	r0, [pc, #32]	; (8004a9c <siprintf+0x38>)
 8004a7a:	4909      	ldr	r1, [pc, #36]	; (8004aa0 <siprintf+0x3c>)
 8004a7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a80:	9105      	str	r1, [sp, #20]
 8004a82:	6800      	ldr	r0, [r0, #0]
 8004a84:	a902      	add	r1, sp, #8
 8004a86:	9301      	str	r3, [sp, #4]
 8004a88:	f000 f868 	bl	8004b5c <_svfiprintf_r>
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	9b02      	ldr	r3, [sp, #8]
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	b01c      	add	sp, #112	; 0x70
 8004a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a98:	b003      	add	sp, #12
 8004a9a:	4770      	bx	lr
 8004a9c:	20000014 	.word	0x20000014
 8004aa0:	ffff0208 	.word	0xffff0208

08004aa4 <__ssputs_r>:
 8004aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004aa8:	688e      	ldr	r6, [r1, #8]
 8004aaa:	4682      	mov	sl, r0
 8004aac:	429e      	cmp	r6, r3
 8004aae:	460c      	mov	r4, r1
 8004ab0:	4690      	mov	r8, r2
 8004ab2:	461f      	mov	r7, r3
 8004ab4:	d838      	bhi.n	8004b28 <__ssputs_r+0x84>
 8004ab6:	898a      	ldrh	r2, [r1, #12]
 8004ab8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004abc:	d032      	beq.n	8004b24 <__ssputs_r+0x80>
 8004abe:	6825      	ldr	r5, [r4, #0]
 8004ac0:	6909      	ldr	r1, [r1, #16]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	eba5 0901 	sub.w	r9, r5, r1
 8004ac8:	6965      	ldr	r5, [r4, #20]
 8004aca:	444b      	add	r3, r9
 8004acc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ad0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ad4:	106d      	asrs	r5, r5, #1
 8004ad6:	429d      	cmp	r5, r3
 8004ad8:	bf38      	it	cc
 8004ada:	461d      	movcc	r5, r3
 8004adc:	0553      	lsls	r3, r2, #21
 8004ade:	d531      	bpl.n	8004b44 <__ssputs_r+0xa0>
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	f000 fb2b 	bl	800513c <_malloc_r>
 8004ae6:	4606      	mov	r6, r0
 8004ae8:	b950      	cbnz	r0, 8004b00 <__ssputs_r+0x5c>
 8004aea:	230c      	movs	r3, #12
 8004aec:	f04f 30ff 	mov.w	r0, #4294967295
 8004af0:	f8ca 3000 	str.w	r3, [sl]
 8004af4:	89a3      	ldrh	r3, [r4, #12]
 8004af6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004afa:	81a3      	strh	r3, [r4, #12]
 8004afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b00:	464a      	mov	r2, r9
 8004b02:	6921      	ldr	r1, [r4, #16]
 8004b04:	f7ff ff7e 	bl	8004a04 <memcpy>
 8004b08:	89a3      	ldrh	r3, [r4, #12]
 8004b0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b12:	81a3      	strh	r3, [r4, #12]
 8004b14:	6126      	str	r6, [r4, #16]
 8004b16:	444e      	add	r6, r9
 8004b18:	6026      	str	r6, [r4, #0]
 8004b1a:	463e      	mov	r6, r7
 8004b1c:	6165      	str	r5, [r4, #20]
 8004b1e:	eba5 0509 	sub.w	r5, r5, r9
 8004b22:	60a5      	str	r5, [r4, #8]
 8004b24:	42be      	cmp	r6, r7
 8004b26:	d900      	bls.n	8004b2a <__ssputs_r+0x86>
 8004b28:	463e      	mov	r6, r7
 8004b2a:	4632      	mov	r2, r6
 8004b2c:	4641      	mov	r1, r8
 8004b2e:	6820      	ldr	r0, [r4, #0]
 8004b30:	f7ff ff76 	bl	8004a20 <memmove>
 8004b34:	68a3      	ldr	r3, [r4, #8]
 8004b36:	6822      	ldr	r2, [r4, #0]
 8004b38:	1b9b      	subs	r3, r3, r6
 8004b3a:	4432      	add	r2, r6
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	60a3      	str	r3, [r4, #8]
 8004b40:	6022      	str	r2, [r4, #0]
 8004b42:	e7db      	b.n	8004afc <__ssputs_r+0x58>
 8004b44:	462a      	mov	r2, r5
 8004b46:	f000 fb53 	bl	80051f0 <_realloc_r>
 8004b4a:	4606      	mov	r6, r0
 8004b4c:	2800      	cmp	r0, #0
 8004b4e:	d1e1      	bne.n	8004b14 <__ssputs_r+0x70>
 8004b50:	4650      	mov	r0, sl
 8004b52:	6921      	ldr	r1, [r4, #16]
 8004b54:	f000 faa6 	bl	80050a4 <_free_r>
 8004b58:	e7c7      	b.n	8004aea <__ssputs_r+0x46>
	...

08004b5c <_svfiprintf_r>:
 8004b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b60:	4698      	mov	r8, r3
 8004b62:	898b      	ldrh	r3, [r1, #12]
 8004b64:	4607      	mov	r7, r0
 8004b66:	061b      	lsls	r3, r3, #24
 8004b68:	460d      	mov	r5, r1
 8004b6a:	4614      	mov	r4, r2
 8004b6c:	b09d      	sub	sp, #116	; 0x74
 8004b6e:	d50e      	bpl.n	8004b8e <_svfiprintf_r+0x32>
 8004b70:	690b      	ldr	r3, [r1, #16]
 8004b72:	b963      	cbnz	r3, 8004b8e <_svfiprintf_r+0x32>
 8004b74:	2140      	movs	r1, #64	; 0x40
 8004b76:	f000 fae1 	bl	800513c <_malloc_r>
 8004b7a:	6028      	str	r0, [r5, #0]
 8004b7c:	6128      	str	r0, [r5, #16]
 8004b7e:	b920      	cbnz	r0, 8004b8a <_svfiprintf_r+0x2e>
 8004b80:	230c      	movs	r3, #12
 8004b82:	603b      	str	r3, [r7, #0]
 8004b84:	f04f 30ff 	mov.w	r0, #4294967295
 8004b88:	e0d1      	b.n	8004d2e <_svfiprintf_r+0x1d2>
 8004b8a:	2340      	movs	r3, #64	; 0x40
 8004b8c:	616b      	str	r3, [r5, #20]
 8004b8e:	2300      	movs	r3, #0
 8004b90:	9309      	str	r3, [sp, #36]	; 0x24
 8004b92:	2320      	movs	r3, #32
 8004b94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b98:	2330      	movs	r3, #48	; 0x30
 8004b9a:	f04f 0901 	mov.w	r9, #1
 8004b9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ba2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004d48 <_svfiprintf_r+0x1ec>
 8004ba6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004baa:	4623      	mov	r3, r4
 8004bac:	469a      	mov	sl, r3
 8004bae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bb2:	b10a      	cbz	r2, 8004bb8 <_svfiprintf_r+0x5c>
 8004bb4:	2a25      	cmp	r2, #37	; 0x25
 8004bb6:	d1f9      	bne.n	8004bac <_svfiprintf_r+0x50>
 8004bb8:	ebba 0b04 	subs.w	fp, sl, r4
 8004bbc:	d00b      	beq.n	8004bd6 <_svfiprintf_r+0x7a>
 8004bbe:	465b      	mov	r3, fp
 8004bc0:	4622      	mov	r2, r4
 8004bc2:	4629      	mov	r1, r5
 8004bc4:	4638      	mov	r0, r7
 8004bc6:	f7ff ff6d 	bl	8004aa4 <__ssputs_r>
 8004bca:	3001      	adds	r0, #1
 8004bcc:	f000 80aa 	beq.w	8004d24 <_svfiprintf_r+0x1c8>
 8004bd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bd2:	445a      	add	r2, fp
 8004bd4:	9209      	str	r2, [sp, #36]	; 0x24
 8004bd6:	f89a 3000 	ldrb.w	r3, [sl]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	f000 80a2 	beq.w	8004d24 <_svfiprintf_r+0x1c8>
 8004be0:	2300      	movs	r3, #0
 8004be2:	f04f 32ff 	mov.w	r2, #4294967295
 8004be6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004bea:	f10a 0a01 	add.w	sl, sl, #1
 8004bee:	9304      	str	r3, [sp, #16]
 8004bf0:	9307      	str	r3, [sp, #28]
 8004bf2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004bf6:	931a      	str	r3, [sp, #104]	; 0x68
 8004bf8:	4654      	mov	r4, sl
 8004bfa:	2205      	movs	r2, #5
 8004bfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c00:	4851      	ldr	r0, [pc, #324]	; (8004d48 <_svfiprintf_r+0x1ec>)
 8004c02:	f000 fa41 	bl	8005088 <memchr>
 8004c06:	9a04      	ldr	r2, [sp, #16]
 8004c08:	b9d8      	cbnz	r0, 8004c42 <_svfiprintf_r+0xe6>
 8004c0a:	06d0      	lsls	r0, r2, #27
 8004c0c:	bf44      	itt	mi
 8004c0e:	2320      	movmi	r3, #32
 8004c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c14:	0711      	lsls	r1, r2, #28
 8004c16:	bf44      	itt	mi
 8004c18:	232b      	movmi	r3, #43	; 0x2b
 8004c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004c1e:	f89a 3000 	ldrb.w	r3, [sl]
 8004c22:	2b2a      	cmp	r3, #42	; 0x2a
 8004c24:	d015      	beq.n	8004c52 <_svfiprintf_r+0xf6>
 8004c26:	4654      	mov	r4, sl
 8004c28:	2000      	movs	r0, #0
 8004c2a:	f04f 0c0a 	mov.w	ip, #10
 8004c2e:	9a07      	ldr	r2, [sp, #28]
 8004c30:	4621      	mov	r1, r4
 8004c32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c36:	3b30      	subs	r3, #48	; 0x30
 8004c38:	2b09      	cmp	r3, #9
 8004c3a:	d94e      	bls.n	8004cda <_svfiprintf_r+0x17e>
 8004c3c:	b1b0      	cbz	r0, 8004c6c <_svfiprintf_r+0x110>
 8004c3e:	9207      	str	r2, [sp, #28]
 8004c40:	e014      	b.n	8004c6c <_svfiprintf_r+0x110>
 8004c42:	eba0 0308 	sub.w	r3, r0, r8
 8004c46:	fa09 f303 	lsl.w	r3, r9, r3
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	46a2      	mov	sl, r4
 8004c4e:	9304      	str	r3, [sp, #16]
 8004c50:	e7d2      	b.n	8004bf8 <_svfiprintf_r+0x9c>
 8004c52:	9b03      	ldr	r3, [sp, #12]
 8004c54:	1d19      	adds	r1, r3, #4
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	9103      	str	r1, [sp, #12]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	bfbb      	ittet	lt
 8004c5e:	425b      	neglt	r3, r3
 8004c60:	f042 0202 	orrlt.w	r2, r2, #2
 8004c64:	9307      	strge	r3, [sp, #28]
 8004c66:	9307      	strlt	r3, [sp, #28]
 8004c68:	bfb8      	it	lt
 8004c6a:	9204      	strlt	r2, [sp, #16]
 8004c6c:	7823      	ldrb	r3, [r4, #0]
 8004c6e:	2b2e      	cmp	r3, #46	; 0x2e
 8004c70:	d10c      	bne.n	8004c8c <_svfiprintf_r+0x130>
 8004c72:	7863      	ldrb	r3, [r4, #1]
 8004c74:	2b2a      	cmp	r3, #42	; 0x2a
 8004c76:	d135      	bne.n	8004ce4 <_svfiprintf_r+0x188>
 8004c78:	9b03      	ldr	r3, [sp, #12]
 8004c7a:	3402      	adds	r4, #2
 8004c7c:	1d1a      	adds	r2, r3, #4
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	9203      	str	r2, [sp, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	bfb8      	it	lt
 8004c86:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c8a:	9305      	str	r3, [sp, #20]
 8004c8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004d58 <_svfiprintf_r+0x1fc>
 8004c90:	2203      	movs	r2, #3
 8004c92:	4650      	mov	r0, sl
 8004c94:	7821      	ldrb	r1, [r4, #0]
 8004c96:	f000 f9f7 	bl	8005088 <memchr>
 8004c9a:	b140      	cbz	r0, 8004cae <_svfiprintf_r+0x152>
 8004c9c:	2340      	movs	r3, #64	; 0x40
 8004c9e:	eba0 000a 	sub.w	r0, r0, sl
 8004ca2:	fa03 f000 	lsl.w	r0, r3, r0
 8004ca6:	9b04      	ldr	r3, [sp, #16]
 8004ca8:	3401      	adds	r4, #1
 8004caa:	4303      	orrs	r3, r0
 8004cac:	9304      	str	r3, [sp, #16]
 8004cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cb2:	2206      	movs	r2, #6
 8004cb4:	4825      	ldr	r0, [pc, #148]	; (8004d4c <_svfiprintf_r+0x1f0>)
 8004cb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004cba:	f000 f9e5 	bl	8005088 <memchr>
 8004cbe:	2800      	cmp	r0, #0
 8004cc0:	d038      	beq.n	8004d34 <_svfiprintf_r+0x1d8>
 8004cc2:	4b23      	ldr	r3, [pc, #140]	; (8004d50 <_svfiprintf_r+0x1f4>)
 8004cc4:	bb1b      	cbnz	r3, 8004d0e <_svfiprintf_r+0x1b2>
 8004cc6:	9b03      	ldr	r3, [sp, #12]
 8004cc8:	3307      	adds	r3, #7
 8004cca:	f023 0307 	bic.w	r3, r3, #7
 8004cce:	3308      	adds	r3, #8
 8004cd0:	9303      	str	r3, [sp, #12]
 8004cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cd4:	4433      	add	r3, r6
 8004cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8004cd8:	e767      	b.n	8004baa <_svfiprintf_r+0x4e>
 8004cda:	460c      	mov	r4, r1
 8004cdc:	2001      	movs	r0, #1
 8004cde:	fb0c 3202 	mla	r2, ip, r2, r3
 8004ce2:	e7a5      	b.n	8004c30 <_svfiprintf_r+0xd4>
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f04f 0c0a 	mov.w	ip, #10
 8004cea:	4619      	mov	r1, r3
 8004cec:	3401      	adds	r4, #1
 8004cee:	9305      	str	r3, [sp, #20]
 8004cf0:	4620      	mov	r0, r4
 8004cf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004cf6:	3a30      	subs	r2, #48	; 0x30
 8004cf8:	2a09      	cmp	r2, #9
 8004cfa:	d903      	bls.n	8004d04 <_svfiprintf_r+0x1a8>
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0c5      	beq.n	8004c8c <_svfiprintf_r+0x130>
 8004d00:	9105      	str	r1, [sp, #20]
 8004d02:	e7c3      	b.n	8004c8c <_svfiprintf_r+0x130>
 8004d04:	4604      	mov	r4, r0
 8004d06:	2301      	movs	r3, #1
 8004d08:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d0c:	e7f0      	b.n	8004cf0 <_svfiprintf_r+0x194>
 8004d0e:	ab03      	add	r3, sp, #12
 8004d10:	9300      	str	r3, [sp, #0]
 8004d12:	462a      	mov	r2, r5
 8004d14:	4638      	mov	r0, r7
 8004d16:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <_svfiprintf_r+0x1f8>)
 8004d18:	a904      	add	r1, sp, #16
 8004d1a:	f3af 8000 	nop.w
 8004d1e:	1c42      	adds	r2, r0, #1
 8004d20:	4606      	mov	r6, r0
 8004d22:	d1d6      	bne.n	8004cd2 <_svfiprintf_r+0x176>
 8004d24:	89ab      	ldrh	r3, [r5, #12]
 8004d26:	065b      	lsls	r3, r3, #25
 8004d28:	f53f af2c 	bmi.w	8004b84 <_svfiprintf_r+0x28>
 8004d2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004d2e:	b01d      	add	sp, #116	; 0x74
 8004d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d34:	ab03      	add	r3, sp, #12
 8004d36:	9300      	str	r3, [sp, #0]
 8004d38:	462a      	mov	r2, r5
 8004d3a:	4638      	mov	r0, r7
 8004d3c:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <_svfiprintf_r+0x1f8>)
 8004d3e:	a904      	add	r1, sp, #16
 8004d40:	f000 f87c 	bl	8004e3c <_printf_i>
 8004d44:	e7eb      	b.n	8004d1e <_svfiprintf_r+0x1c2>
 8004d46:	bf00      	nop
 8004d48:	08006660 	.word	0x08006660
 8004d4c:	0800666a 	.word	0x0800666a
 8004d50:	00000000 	.word	0x00000000
 8004d54:	08004aa5 	.word	0x08004aa5
 8004d58:	08006666 	.word	0x08006666

08004d5c <_printf_common>:
 8004d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d60:	4616      	mov	r6, r2
 8004d62:	4699      	mov	r9, r3
 8004d64:	688a      	ldr	r2, [r1, #8]
 8004d66:	690b      	ldr	r3, [r1, #16]
 8004d68:	4607      	mov	r7, r0
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	bfb8      	it	lt
 8004d6e:	4613      	movlt	r3, r2
 8004d70:	6033      	str	r3, [r6, #0]
 8004d72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d76:	460c      	mov	r4, r1
 8004d78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d7c:	b10a      	cbz	r2, 8004d82 <_printf_common+0x26>
 8004d7e:	3301      	adds	r3, #1
 8004d80:	6033      	str	r3, [r6, #0]
 8004d82:	6823      	ldr	r3, [r4, #0]
 8004d84:	0699      	lsls	r1, r3, #26
 8004d86:	bf42      	ittt	mi
 8004d88:	6833      	ldrmi	r3, [r6, #0]
 8004d8a:	3302      	addmi	r3, #2
 8004d8c:	6033      	strmi	r3, [r6, #0]
 8004d8e:	6825      	ldr	r5, [r4, #0]
 8004d90:	f015 0506 	ands.w	r5, r5, #6
 8004d94:	d106      	bne.n	8004da4 <_printf_common+0x48>
 8004d96:	f104 0a19 	add.w	sl, r4, #25
 8004d9a:	68e3      	ldr	r3, [r4, #12]
 8004d9c:	6832      	ldr	r2, [r6, #0]
 8004d9e:	1a9b      	subs	r3, r3, r2
 8004da0:	42ab      	cmp	r3, r5
 8004da2:	dc28      	bgt.n	8004df6 <_printf_common+0x9a>
 8004da4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004da8:	1e13      	subs	r3, r2, #0
 8004daa:	6822      	ldr	r2, [r4, #0]
 8004dac:	bf18      	it	ne
 8004dae:	2301      	movne	r3, #1
 8004db0:	0692      	lsls	r2, r2, #26
 8004db2:	d42d      	bmi.n	8004e10 <_printf_common+0xb4>
 8004db4:	4649      	mov	r1, r9
 8004db6:	4638      	mov	r0, r7
 8004db8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004dbc:	47c0      	blx	r8
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	d020      	beq.n	8004e04 <_printf_common+0xa8>
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	68e5      	ldr	r5, [r4, #12]
 8004dc6:	f003 0306 	and.w	r3, r3, #6
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	bf18      	it	ne
 8004dce:	2500      	movne	r5, #0
 8004dd0:	6832      	ldr	r2, [r6, #0]
 8004dd2:	f04f 0600 	mov.w	r6, #0
 8004dd6:	68a3      	ldr	r3, [r4, #8]
 8004dd8:	bf08      	it	eq
 8004dda:	1aad      	subeq	r5, r5, r2
 8004ddc:	6922      	ldr	r2, [r4, #16]
 8004dde:	bf08      	it	eq
 8004de0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004de4:	4293      	cmp	r3, r2
 8004de6:	bfc4      	itt	gt
 8004de8:	1a9b      	subgt	r3, r3, r2
 8004dea:	18ed      	addgt	r5, r5, r3
 8004dec:	341a      	adds	r4, #26
 8004dee:	42b5      	cmp	r5, r6
 8004df0:	d11a      	bne.n	8004e28 <_printf_common+0xcc>
 8004df2:	2000      	movs	r0, #0
 8004df4:	e008      	b.n	8004e08 <_printf_common+0xac>
 8004df6:	2301      	movs	r3, #1
 8004df8:	4652      	mov	r2, sl
 8004dfa:	4649      	mov	r1, r9
 8004dfc:	4638      	mov	r0, r7
 8004dfe:	47c0      	blx	r8
 8004e00:	3001      	adds	r0, #1
 8004e02:	d103      	bne.n	8004e0c <_printf_common+0xb0>
 8004e04:	f04f 30ff 	mov.w	r0, #4294967295
 8004e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e0c:	3501      	adds	r5, #1
 8004e0e:	e7c4      	b.n	8004d9a <_printf_common+0x3e>
 8004e10:	2030      	movs	r0, #48	; 0x30
 8004e12:	18e1      	adds	r1, r4, r3
 8004e14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004e1e:	4422      	add	r2, r4
 8004e20:	3302      	adds	r3, #2
 8004e22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004e26:	e7c5      	b.n	8004db4 <_printf_common+0x58>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	4622      	mov	r2, r4
 8004e2c:	4649      	mov	r1, r9
 8004e2e:	4638      	mov	r0, r7
 8004e30:	47c0      	blx	r8
 8004e32:	3001      	adds	r0, #1
 8004e34:	d0e6      	beq.n	8004e04 <_printf_common+0xa8>
 8004e36:	3601      	adds	r6, #1
 8004e38:	e7d9      	b.n	8004dee <_printf_common+0x92>
	...

08004e3c <_printf_i>:
 8004e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e40:	460c      	mov	r4, r1
 8004e42:	7e27      	ldrb	r7, [r4, #24]
 8004e44:	4691      	mov	r9, r2
 8004e46:	2f78      	cmp	r7, #120	; 0x78
 8004e48:	4680      	mov	r8, r0
 8004e4a:	469a      	mov	sl, r3
 8004e4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004e4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e52:	d807      	bhi.n	8004e64 <_printf_i+0x28>
 8004e54:	2f62      	cmp	r7, #98	; 0x62
 8004e56:	d80a      	bhi.n	8004e6e <_printf_i+0x32>
 8004e58:	2f00      	cmp	r7, #0
 8004e5a:	f000 80d9 	beq.w	8005010 <_printf_i+0x1d4>
 8004e5e:	2f58      	cmp	r7, #88	; 0x58
 8004e60:	f000 80a4 	beq.w	8004fac <_printf_i+0x170>
 8004e64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004e68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e6c:	e03a      	b.n	8004ee4 <_printf_i+0xa8>
 8004e6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e72:	2b15      	cmp	r3, #21
 8004e74:	d8f6      	bhi.n	8004e64 <_printf_i+0x28>
 8004e76:	a001      	add	r0, pc, #4	; (adr r0, 8004e7c <_printf_i+0x40>)
 8004e78:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004e7c:	08004ed5 	.word	0x08004ed5
 8004e80:	08004ee9 	.word	0x08004ee9
 8004e84:	08004e65 	.word	0x08004e65
 8004e88:	08004e65 	.word	0x08004e65
 8004e8c:	08004e65 	.word	0x08004e65
 8004e90:	08004e65 	.word	0x08004e65
 8004e94:	08004ee9 	.word	0x08004ee9
 8004e98:	08004e65 	.word	0x08004e65
 8004e9c:	08004e65 	.word	0x08004e65
 8004ea0:	08004e65 	.word	0x08004e65
 8004ea4:	08004e65 	.word	0x08004e65
 8004ea8:	08004ff7 	.word	0x08004ff7
 8004eac:	08004f19 	.word	0x08004f19
 8004eb0:	08004fd9 	.word	0x08004fd9
 8004eb4:	08004e65 	.word	0x08004e65
 8004eb8:	08004e65 	.word	0x08004e65
 8004ebc:	08005019 	.word	0x08005019
 8004ec0:	08004e65 	.word	0x08004e65
 8004ec4:	08004f19 	.word	0x08004f19
 8004ec8:	08004e65 	.word	0x08004e65
 8004ecc:	08004e65 	.word	0x08004e65
 8004ed0:	08004fe1 	.word	0x08004fe1
 8004ed4:	680b      	ldr	r3, [r1, #0]
 8004ed6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004eda:	1d1a      	adds	r2, r3, #4
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	600a      	str	r2, [r1, #0]
 8004ee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e0a4      	b.n	8005032 <_printf_i+0x1f6>
 8004ee8:	6825      	ldr	r5, [r4, #0]
 8004eea:	6808      	ldr	r0, [r1, #0]
 8004eec:	062e      	lsls	r6, r5, #24
 8004eee:	f100 0304 	add.w	r3, r0, #4
 8004ef2:	d50a      	bpl.n	8004f0a <_printf_i+0xce>
 8004ef4:	6805      	ldr	r5, [r0, #0]
 8004ef6:	600b      	str	r3, [r1, #0]
 8004ef8:	2d00      	cmp	r5, #0
 8004efa:	da03      	bge.n	8004f04 <_printf_i+0xc8>
 8004efc:	232d      	movs	r3, #45	; 0x2d
 8004efe:	426d      	negs	r5, r5
 8004f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f04:	230a      	movs	r3, #10
 8004f06:	485e      	ldr	r0, [pc, #376]	; (8005080 <_printf_i+0x244>)
 8004f08:	e019      	b.n	8004f3e <_printf_i+0x102>
 8004f0a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004f0e:	6805      	ldr	r5, [r0, #0]
 8004f10:	600b      	str	r3, [r1, #0]
 8004f12:	bf18      	it	ne
 8004f14:	b22d      	sxthne	r5, r5
 8004f16:	e7ef      	b.n	8004ef8 <_printf_i+0xbc>
 8004f18:	680b      	ldr	r3, [r1, #0]
 8004f1a:	6825      	ldr	r5, [r4, #0]
 8004f1c:	1d18      	adds	r0, r3, #4
 8004f1e:	6008      	str	r0, [r1, #0]
 8004f20:	0628      	lsls	r0, r5, #24
 8004f22:	d501      	bpl.n	8004f28 <_printf_i+0xec>
 8004f24:	681d      	ldr	r5, [r3, #0]
 8004f26:	e002      	b.n	8004f2e <_printf_i+0xf2>
 8004f28:	0669      	lsls	r1, r5, #25
 8004f2a:	d5fb      	bpl.n	8004f24 <_printf_i+0xe8>
 8004f2c:	881d      	ldrh	r5, [r3, #0]
 8004f2e:	2f6f      	cmp	r7, #111	; 0x6f
 8004f30:	bf0c      	ite	eq
 8004f32:	2308      	moveq	r3, #8
 8004f34:	230a      	movne	r3, #10
 8004f36:	4852      	ldr	r0, [pc, #328]	; (8005080 <_printf_i+0x244>)
 8004f38:	2100      	movs	r1, #0
 8004f3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f3e:	6866      	ldr	r6, [r4, #4]
 8004f40:	2e00      	cmp	r6, #0
 8004f42:	bfa8      	it	ge
 8004f44:	6821      	ldrge	r1, [r4, #0]
 8004f46:	60a6      	str	r6, [r4, #8]
 8004f48:	bfa4      	itt	ge
 8004f4a:	f021 0104 	bicge.w	r1, r1, #4
 8004f4e:	6021      	strge	r1, [r4, #0]
 8004f50:	b90d      	cbnz	r5, 8004f56 <_printf_i+0x11a>
 8004f52:	2e00      	cmp	r6, #0
 8004f54:	d04d      	beq.n	8004ff2 <_printf_i+0x1b6>
 8004f56:	4616      	mov	r6, r2
 8004f58:	fbb5 f1f3 	udiv	r1, r5, r3
 8004f5c:	fb03 5711 	mls	r7, r3, r1, r5
 8004f60:	5dc7      	ldrb	r7, [r0, r7]
 8004f62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004f66:	462f      	mov	r7, r5
 8004f68:	42bb      	cmp	r3, r7
 8004f6a:	460d      	mov	r5, r1
 8004f6c:	d9f4      	bls.n	8004f58 <_printf_i+0x11c>
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d10b      	bne.n	8004f8a <_printf_i+0x14e>
 8004f72:	6823      	ldr	r3, [r4, #0]
 8004f74:	07df      	lsls	r7, r3, #31
 8004f76:	d508      	bpl.n	8004f8a <_printf_i+0x14e>
 8004f78:	6923      	ldr	r3, [r4, #16]
 8004f7a:	6861      	ldr	r1, [r4, #4]
 8004f7c:	4299      	cmp	r1, r3
 8004f7e:	bfde      	ittt	le
 8004f80:	2330      	movle	r3, #48	; 0x30
 8004f82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004f86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004f8a:	1b92      	subs	r2, r2, r6
 8004f8c:	6122      	str	r2, [r4, #16]
 8004f8e:	464b      	mov	r3, r9
 8004f90:	4621      	mov	r1, r4
 8004f92:	4640      	mov	r0, r8
 8004f94:	f8cd a000 	str.w	sl, [sp]
 8004f98:	aa03      	add	r2, sp, #12
 8004f9a:	f7ff fedf 	bl	8004d5c <_printf_common>
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	d14c      	bne.n	800503c <_printf_i+0x200>
 8004fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8004fa6:	b004      	add	sp, #16
 8004fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fac:	4834      	ldr	r0, [pc, #208]	; (8005080 <_printf_i+0x244>)
 8004fae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004fb2:	680e      	ldr	r6, [r1, #0]
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	f856 5b04 	ldr.w	r5, [r6], #4
 8004fba:	061f      	lsls	r7, r3, #24
 8004fbc:	600e      	str	r6, [r1, #0]
 8004fbe:	d514      	bpl.n	8004fea <_printf_i+0x1ae>
 8004fc0:	07d9      	lsls	r1, r3, #31
 8004fc2:	bf44      	itt	mi
 8004fc4:	f043 0320 	orrmi.w	r3, r3, #32
 8004fc8:	6023      	strmi	r3, [r4, #0]
 8004fca:	b91d      	cbnz	r5, 8004fd4 <_printf_i+0x198>
 8004fcc:	6823      	ldr	r3, [r4, #0]
 8004fce:	f023 0320 	bic.w	r3, r3, #32
 8004fd2:	6023      	str	r3, [r4, #0]
 8004fd4:	2310      	movs	r3, #16
 8004fd6:	e7af      	b.n	8004f38 <_printf_i+0xfc>
 8004fd8:	6823      	ldr	r3, [r4, #0]
 8004fda:	f043 0320 	orr.w	r3, r3, #32
 8004fde:	6023      	str	r3, [r4, #0]
 8004fe0:	2378      	movs	r3, #120	; 0x78
 8004fe2:	4828      	ldr	r0, [pc, #160]	; (8005084 <_printf_i+0x248>)
 8004fe4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004fe8:	e7e3      	b.n	8004fb2 <_printf_i+0x176>
 8004fea:	065e      	lsls	r6, r3, #25
 8004fec:	bf48      	it	mi
 8004fee:	b2ad      	uxthmi	r5, r5
 8004ff0:	e7e6      	b.n	8004fc0 <_printf_i+0x184>
 8004ff2:	4616      	mov	r6, r2
 8004ff4:	e7bb      	b.n	8004f6e <_printf_i+0x132>
 8004ff6:	680b      	ldr	r3, [r1, #0]
 8004ff8:	6826      	ldr	r6, [r4, #0]
 8004ffa:	1d1d      	adds	r5, r3, #4
 8004ffc:	6960      	ldr	r0, [r4, #20]
 8004ffe:	600d      	str	r5, [r1, #0]
 8005000:	0635      	lsls	r5, r6, #24
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	d501      	bpl.n	800500a <_printf_i+0x1ce>
 8005006:	6018      	str	r0, [r3, #0]
 8005008:	e002      	b.n	8005010 <_printf_i+0x1d4>
 800500a:	0671      	lsls	r1, r6, #25
 800500c:	d5fb      	bpl.n	8005006 <_printf_i+0x1ca>
 800500e:	8018      	strh	r0, [r3, #0]
 8005010:	2300      	movs	r3, #0
 8005012:	4616      	mov	r6, r2
 8005014:	6123      	str	r3, [r4, #16]
 8005016:	e7ba      	b.n	8004f8e <_printf_i+0x152>
 8005018:	680b      	ldr	r3, [r1, #0]
 800501a:	1d1a      	adds	r2, r3, #4
 800501c:	600a      	str	r2, [r1, #0]
 800501e:	681e      	ldr	r6, [r3, #0]
 8005020:	2100      	movs	r1, #0
 8005022:	4630      	mov	r0, r6
 8005024:	6862      	ldr	r2, [r4, #4]
 8005026:	f000 f82f 	bl	8005088 <memchr>
 800502a:	b108      	cbz	r0, 8005030 <_printf_i+0x1f4>
 800502c:	1b80      	subs	r0, r0, r6
 800502e:	6060      	str	r0, [r4, #4]
 8005030:	6863      	ldr	r3, [r4, #4]
 8005032:	6123      	str	r3, [r4, #16]
 8005034:	2300      	movs	r3, #0
 8005036:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800503a:	e7a8      	b.n	8004f8e <_printf_i+0x152>
 800503c:	4632      	mov	r2, r6
 800503e:	4649      	mov	r1, r9
 8005040:	4640      	mov	r0, r8
 8005042:	6923      	ldr	r3, [r4, #16]
 8005044:	47d0      	blx	sl
 8005046:	3001      	adds	r0, #1
 8005048:	d0ab      	beq.n	8004fa2 <_printf_i+0x166>
 800504a:	6823      	ldr	r3, [r4, #0]
 800504c:	079b      	lsls	r3, r3, #30
 800504e:	d413      	bmi.n	8005078 <_printf_i+0x23c>
 8005050:	68e0      	ldr	r0, [r4, #12]
 8005052:	9b03      	ldr	r3, [sp, #12]
 8005054:	4298      	cmp	r0, r3
 8005056:	bfb8      	it	lt
 8005058:	4618      	movlt	r0, r3
 800505a:	e7a4      	b.n	8004fa6 <_printf_i+0x16a>
 800505c:	2301      	movs	r3, #1
 800505e:	4632      	mov	r2, r6
 8005060:	4649      	mov	r1, r9
 8005062:	4640      	mov	r0, r8
 8005064:	47d0      	blx	sl
 8005066:	3001      	adds	r0, #1
 8005068:	d09b      	beq.n	8004fa2 <_printf_i+0x166>
 800506a:	3501      	adds	r5, #1
 800506c:	68e3      	ldr	r3, [r4, #12]
 800506e:	9903      	ldr	r1, [sp, #12]
 8005070:	1a5b      	subs	r3, r3, r1
 8005072:	42ab      	cmp	r3, r5
 8005074:	dcf2      	bgt.n	800505c <_printf_i+0x220>
 8005076:	e7eb      	b.n	8005050 <_printf_i+0x214>
 8005078:	2500      	movs	r5, #0
 800507a:	f104 0619 	add.w	r6, r4, #25
 800507e:	e7f5      	b.n	800506c <_printf_i+0x230>
 8005080:	08006671 	.word	0x08006671
 8005084:	08006682 	.word	0x08006682

08005088 <memchr>:
 8005088:	4603      	mov	r3, r0
 800508a:	b510      	push	{r4, lr}
 800508c:	b2c9      	uxtb	r1, r1
 800508e:	4402      	add	r2, r0
 8005090:	4293      	cmp	r3, r2
 8005092:	4618      	mov	r0, r3
 8005094:	d101      	bne.n	800509a <memchr+0x12>
 8005096:	2000      	movs	r0, #0
 8005098:	e003      	b.n	80050a2 <memchr+0x1a>
 800509a:	7804      	ldrb	r4, [r0, #0]
 800509c:	3301      	adds	r3, #1
 800509e:	428c      	cmp	r4, r1
 80050a0:	d1f6      	bne.n	8005090 <memchr+0x8>
 80050a2:	bd10      	pop	{r4, pc}

080050a4 <_free_r>:
 80050a4:	b538      	push	{r3, r4, r5, lr}
 80050a6:	4605      	mov	r5, r0
 80050a8:	2900      	cmp	r1, #0
 80050aa:	d043      	beq.n	8005134 <_free_r+0x90>
 80050ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050b0:	1f0c      	subs	r4, r1, #4
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	bfb8      	it	lt
 80050b6:	18e4      	addlt	r4, r4, r3
 80050b8:	f000 f8d0 	bl	800525c <__malloc_lock>
 80050bc:	4a1e      	ldr	r2, [pc, #120]	; (8005138 <_free_r+0x94>)
 80050be:	6813      	ldr	r3, [r2, #0]
 80050c0:	4610      	mov	r0, r2
 80050c2:	b933      	cbnz	r3, 80050d2 <_free_r+0x2e>
 80050c4:	6063      	str	r3, [r4, #4]
 80050c6:	6014      	str	r4, [r2, #0]
 80050c8:	4628      	mov	r0, r5
 80050ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050ce:	f000 b8cb 	b.w	8005268 <__malloc_unlock>
 80050d2:	42a3      	cmp	r3, r4
 80050d4:	d90a      	bls.n	80050ec <_free_r+0x48>
 80050d6:	6821      	ldr	r1, [r4, #0]
 80050d8:	1862      	adds	r2, r4, r1
 80050da:	4293      	cmp	r3, r2
 80050dc:	bf01      	itttt	eq
 80050de:	681a      	ldreq	r2, [r3, #0]
 80050e0:	685b      	ldreq	r3, [r3, #4]
 80050e2:	1852      	addeq	r2, r2, r1
 80050e4:	6022      	streq	r2, [r4, #0]
 80050e6:	6063      	str	r3, [r4, #4]
 80050e8:	6004      	str	r4, [r0, #0]
 80050ea:	e7ed      	b.n	80050c8 <_free_r+0x24>
 80050ec:	461a      	mov	r2, r3
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	b10b      	cbz	r3, 80050f6 <_free_r+0x52>
 80050f2:	42a3      	cmp	r3, r4
 80050f4:	d9fa      	bls.n	80050ec <_free_r+0x48>
 80050f6:	6811      	ldr	r1, [r2, #0]
 80050f8:	1850      	adds	r0, r2, r1
 80050fa:	42a0      	cmp	r0, r4
 80050fc:	d10b      	bne.n	8005116 <_free_r+0x72>
 80050fe:	6820      	ldr	r0, [r4, #0]
 8005100:	4401      	add	r1, r0
 8005102:	1850      	adds	r0, r2, r1
 8005104:	4283      	cmp	r3, r0
 8005106:	6011      	str	r1, [r2, #0]
 8005108:	d1de      	bne.n	80050c8 <_free_r+0x24>
 800510a:	6818      	ldr	r0, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	4401      	add	r1, r0
 8005110:	6011      	str	r1, [r2, #0]
 8005112:	6053      	str	r3, [r2, #4]
 8005114:	e7d8      	b.n	80050c8 <_free_r+0x24>
 8005116:	d902      	bls.n	800511e <_free_r+0x7a>
 8005118:	230c      	movs	r3, #12
 800511a:	602b      	str	r3, [r5, #0]
 800511c:	e7d4      	b.n	80050c8 <_free_r+0x24>
 800511e:	6820      	ldr	r0, [r4, #0]
 8005120:	1821      	adds	r1, r4, r0
 8005122:	428b      	cmp	r3, r1
 8005124:	bf01      	itttt	eq
 8005126:	6819      	ldreq	r1, [r3, #0]
 8005128:	685b      	ldreq	r3, [r3, #4]
 800512a:	1809      	addeq	r1, r1, r0
 800512c:	6021      	streq	r1, [r4, #0]
 800512e:	6063      	str	r3, [r4, #4]
 8005130:	6054      	str	r4, [r2, #4]
 8005132:	e7c9      	b.n	80050c8 <_free_r+0x24>
 8005134:	bd38      	pop	{r3, r4, r5, pc}
 8005136:	bf00      	nop
 8005138:	200002a8 	.word	0x200002a8

0800513c <_malloc_r>:
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513e:	1ccd      	adds	r5, r1, #3
 8005140:	f025 0503 	bic.w	r5, r5, #3
 8005144:	3508      	adds	r5, #8
 8005146:	2d0c      	cmp	r5, #12
 8005148:	bf38      	it	cc
 800514a:	250c      	movcc	r5, #12
 800514c:	2d00      	cmp	r5, #0
 800514e:	4606      	mov	r6, r0
 8005150:	db01      	blt.n	8005156 <_malloc_r+0x1a>
 8005152:	42a9      	cmp	r1, r5
 8005154:	d903      	bls.n	800515e <_malloc_r+0x22>
 8005156:	230c      	movs	r3, #12
 8005158:	6033      	str	r3, [r6, #0]
 800515a:	2000      	movs	r0, #0
 800515c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800515e:	f000 f87d 	bl	800525c <__malloc_lock>
 8005162:	4921      	ldr	r1, [pc, #132]	; (80051e8 <_malloc_r+0xac>)
 8005164:	680a      	ldr	r2, [r1, #0]
 8005166:	4614      	mov	r4, r2
 8005168:	b99c      	cbnz	r4, 8005192 <_malloc_r+0x56>
 800516a:	4f20      	ldr	r7, [pc, #128]	; (80051ec <_malloc_r+0xb0>)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	b923      	cbnz	r3, 800517a <_malloc_r+0x3e>
 8005170:	4621      	mov	r1, r4
 8005172:	4630      	mov	r0, r6
 8005174:	f000 f862 	bl	800523c <_sbrk_r>
 8005178:	6038      	str	r0, [r7, #0]
 800517a:	4629      	mov	r1, r5
 800517c:	4630      	mov	r0, r6
 800517e:	f000 f85d 	bl	800523c <_sbrk_r>
 8005182:	1c43      	adds	r3, r0, #1
 8005184:	d123      	bne.n	80051ce <_malloc_r+0x92>
 8005186:	230c      	movs	r3, #12
 8005188:	4630      	mov	r0, r6
 800518a:	6033      	str	r3, [r6, #0]
 800518c:	f000 f86c 	bl	8005268 <__malloc_unlock>
 8005190:	e7e3      	b.n	800515a <_malloc_r+0x1e>
 8005192:	6823      	ldr	r3, [r4, #0]
 8005194:	1b5b      	subs	r3, r3, r5
 8005196:	d417      	bmi.n	80051c8 <_malloc_r+0x8c>
 8005198:	2b0b      	cmp	r3, #11
 800519a:	d903      	bls.n	80051a4 <_malloc_r+0x68>
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	441c      	add	r4, r3
 80051a0:	6025      	str	r5, [r4, #0]
 80051a2:	e004      	b.n	80051ae <_malloc_r+0x72>
 80051a4:	6863      	ldr	r3, [r4, #4]
 80051a6:	42a2      	cmp	r2, r4
 80051a8:	bf0c      	ite	eq
 80051aa:	600b      	streq	r3, [r1, #0]
 80051ac:	6053      	strne	r3, [r2, #4]
 80051ae:	4630      	mov	r0, r6
 80051b0:	f000 f85a 	bl	8005268 <__malloc_unlock>
 80051b4:	f104 000b 	add.w	r0, r4, #11
 80051b8:	1d23      	adds	r3, r4, #4
 80051ba:	f020 0007 	bic.w	r0, r0, #7
 80051be:	1ac2      	subs	r2, r0, r3
 80051c0:	d0cc      	beq.n	800515c <_malloc_r+0x20>
 80051c2:	1a1b      	subs	r3, r3, r0
 80051c4:	50a3      	str	r3, [r4, r2]
 80051c6:	e7c9      	b.n	800515c <_malloc_r+0x20>
 80051c8:	4622      	mov	r2, r4
 80051ca:	6864      	ldr	r4, [r4, #4]
 80051cc:	e7cc      	b.n	8005168 <_malloc_r+0x2c>
 80051ce:	1cc4      	adds	r4, r0, #3
 80051d0:	f024 0403 	bic.w	r4, r4, #3
 80051d4:	42a0      	cmp	r0, r4
 80051d6:	d0e3      	beq.n	80051a0 <_malloc_r+0x64>
 80051d8:	1a21      	subs	r1, r4, r0
 80051da:	4630      	mov	r0, r6
 80051dc:	f000 f82e 	bl	800523c <_sbrk_r>
 80051e0:	3001      	adds	r0, #1
 80051e2:	d1dd      	bne.n	80051a0 <_malloc_r+0x64>
 80051e4:	e7cf      	b.n	8005186 <_malloc_r+0x4a>
 80051e6:	bf00      	nop
 80051e8:	200002a8 	.word	0x200002a8
 80051ec:	200002ac 	.word	0x200002ac

080051f0 <_realloc_r>:
 80051f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f2:	4607      	mov	r7, r0
 80051f4:	4614      	mov	r4, r2
 80051f6:	460e      	mov	r6, r1
 80051f8:	b921      	cbnz	r1, 8005204 <_realloc_r+0x14>
 80051fa:	4611      	mov	r1, r2
 80051fc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005200:	f7ff bf9c 	b.w	800513c <_malloc_r>
 8005204:	b922      	cbnz	r2, 8005210 <_realloc_r+0x20>
 8005206:	f7ff ff4d 	bl	80050a4 <_free_r>
 800520a:	4625      	mov	r5, r4
 800520c:	4628      	mov	r0, r5
 800520e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005210:	f000 f830 	bl	8005274 <_malloc_usable_size_r>
 8005214:	42a0      	cmp	r0, r4
 8005216:	d20f      	bcs.n	8005238 <_realloc_r+0x48>
 8005218:	4621      	mov	r1, r4
 800521a:	4638      	mov	r0, r7
 800521c:	f7ff ff8e 	bl	800513c <_malloc_r>
 8005220:	4605      	mov	r5, r0
 8005222:	2800      	cmp	r0, #0
 8005224:	d0f2      	beq.n	800520c <_realloc_r+0x1c>
 8005226:	4631      	mov	r1, r6
 8005228:	4622      	mov	r2, r4
 800522a:	f7ff fbeb 	bl	8004a04 <memcpy>
 800522e:	4631      	mov	r1, r6
 8005230:	4638      	mov	r0, r7
 8005232:	f7ff ff37 	bl	80050a4 <_free_r>
 8005236:	e7e9      	b.n	800520c <_realloc_r+0x1c>
 8005238:	4635      	mov	r5, r6
 800523a:	e7e7      	b.n	800520c <_realloc_r+0x1c>

0800523c <_sbrk_r>:
 800523c:	b538      	push	{r3, r4, r5, lr}
 800523e:	2300      	movs	r3, #0
 8005240:	4d05      	ldr	r5, [pc, #20]	; (8005258 <_sbrk_r+0x1c>)
 8005242:	4604      	mov	r4, r0
 8005244:	4608      	mov	r0, r1
 8005246:	602b      	str	r3, [r5, #0]
 8005248:	f7fc fd96 	bl	8001d78 <_sbrk>
 800524c:	1c43      	adds	r3, r0, #1
 800524e:	d102      	bne.n	8005256 <_sbrk_r+0x1a>
 8005250:	682b      	ldr	r3, [r5, #0]
 8005252:	b103      	cbz	r3, 8005256 <_sbrk_r+0x1a>
 8005254:	6023      	str	r3, [r4, #0]
 8005256:	bd38      	pop	{r3, r4, r5, pc}
 8005258:	200003a4 	.word	0x200003a4

0800525c <__malloc_lock>:
 800525c:	4801      	ldr	r0, [pc, #4]	; (8005264 <__malloc_lock+0x8>)
 800525e:	f000 b811 	b.w	8005284 <__retarget_lock_acquire_recursive>
 8005262:	bf00      	nop
 8005264:	200003ac 	.word	0x200003ac

08005268 <__malloc_unlock>:
 8005268:	4801      	ldr	r0, [pc, #4]	; (8005270 <__malloc_unlock+0x8>)
 800526a:	f000 b80c 	b.w	8005286 <__retarget_lock_release_recursive>
 800526e:	bf00      	nop
 8005270:	200003ac 	.word	0x200003ac

08005274 <_malloc_usable_size_r>:
 8005274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005278:	1f18      	subs	r0, r3, #4
 800527a:	2b00      	cmp	r3, #0
 800527c:	bfbc      	itt	lt
 800527e:	580b      	ldrlt	r3, [r1, r0]
 8005280:	18c0      	addlt	r0, r0, r3
 8005282:	4770      	bx	lr

08005284 <__retarget_lock_acquire_recursive>:
 8005284:	4770      	bx	lr

08005286 <__retarget_lock_release_recursive>:
 8005286:	4770      	bx	lr

08005288 <_init>:
 8005288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528a:	bf00      	nop
 800528c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800528e:	bc08      	pop	{r3}
 8005290:	469e      	mov	lr, r3
 8005292:	4770      	bx	lr

08005294 <_fini>:
 8005294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005296:	bf00      	nop
 8005298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529a:	bc08      	pop	{r3}
 800529c:	469e      	mov	lr, r3
 800529e:	4770      	bx	lr
