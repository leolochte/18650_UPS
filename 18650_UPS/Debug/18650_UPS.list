
18650_UPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004444  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013ac  08004580  08004580  00014580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800592c  0800592c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800592c  0800592c  0001592c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005934  08005934  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005934  08005934  00015934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005938  08005938  00015938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800593c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f4  20000078  080059b4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000036c  080059b4  0002036c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ace2  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b5a  00000000  00000000  0002ad83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  0002c8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000928  00000000  00000000  0002d290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cfa  00000000  00000000  0002dbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c5cc  00000000  00000000  000468b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083fe3  00000000  00000000  00052e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d6e61  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d28  00000000  00000000  000d6eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000078 	.word	0x20000078
 8000158:	00000000 	.word	0x00000000
 800015c:	08004568 	.word	0x08004568

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000007c 	.word	0x2000007c
 8000178:	08004568 	.word	0x08004568

0800017c <__aeabi_drsub>:
 800017c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__adddf3>
 8000182:	bf00      	nop

08000184 <__aeabi_dsub>:
 8000184:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000188 <__adddf3>:
 8000188:	b530      	push	{r4, r5, lr}
 800018a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800018e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000192:	ea94 0f05 	teq	r4, r5
 8000196:	bf08      	it	eq
 8000198:	ea90 0f02 	teqeq	r0, r2
 800019c:	bf1f      	itttt	ne
 800019e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001a6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001aa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ae:	f000 80e2 	beq.w	8000376 <__adddf3+0x1ee>
 80001b2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001b6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ba:	bfb8      	it	lt
 80001bc:	426d      	neglt	r5, r5
 80001be:	dd0c      	ble.n	80001da <__adddf3+0x52>
 80001c0:	442c      	add	r4, r5
 80001c2:	ea80 0202 	eor.w	r2, r0, r2
 80001c6:	ea81 0303 	eor.w	r3, r1, r3
 80001ca:	ea82 0000 	eor.w	r0, r2, r0
 80001ce:	ea83 0101 	eor.w	r1, r3, r1
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	2d36      	cmp	r5, #54	; 0x36
 80001dc:	bf88      	it	hi
 80001de:	bd30      	pophi	{r4, r5, pc}
 80001e0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001ec:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f0:	d002      	beq.n	80001f8 <__adddf3+0x70>
 80001f2:	4240      	negs	r0, r0
 80001f4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001fc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000200:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x84>
 8000206:	4252      	negs	r2, r2
 8000208:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800020c:	ea94 0f05 	teq	r4, r5
 8000210:	f000 80a7 	beq.w	8000362 <__adddf3+0x1da>
 8000214:	f1a4 0401 	sub.w	r4, r4, #1
 8000218:	f1d5 0e20 	rsbs	lr, r5, #32
 800021c:	db0d      	blt.n	800023a <__adddf3+0xb2>
 800021e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000222:	fa22 f205 	lsr.w	r2, r2, r5
 8000226:	1880      	adds	r0, r0, r2
 8000228:	f141 0100 	adc.w	r1, r1, #0
 800022c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000230:	1880      	adds	r0, r0, r2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	4159      	adcs	r1, r3
 8000238:	e00e      	b.n	8000258 <__adddf3+0xd0>
 800023a:	f1a5 0520 	sub.w	r5, r5, #32
 800023e:	f10e 0e20 	add.w	lr, lr, #32
 8000242:	2a01      	cmp	r2, #1
 8000244:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000248:	bf28      	it	cs
 800024a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800024e:	fa43 f305 	asr.w	r3, r3, r5
 8000252:	18c0      	adds	r0, r0, r3
 8000254:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000258:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800025c:	d507      	bpl.n	800026e <__adddf3+0xe6>
 800025e:	f04f 0e00 	mov.w	lr, #0
 8000262:	f1dc 0c00 	rsbs	ip, ip, #0
 8000266:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026a:	eb6e 0101 	sbc.w	r1, lr, r1
 800026e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000272:	d31b      	bcc.n	80002ac <__adddf3+0x124>
 8000274:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000278:	d30c      	bcc.n	8000294 <__adddf3+0x10c>
 800027a:	0849      	lsrs	r1, r1, #1
 800027c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000280:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000284:	f104 0401 	add.w	r4, r4, #1
 8000288:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800028c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000290:	f080 809a 	bcs.w	80003c8 <__adddf3+0x240>
 8000294:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000298:	bf08      	it	eq
 800029a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800029e:	f150 0000 	adcs.w	r0, r0, #0
 80002a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a6:	ea41 0105 	orr.w	r1, r1, r5
 80002aa:	bd30      	pop	{r4, r5, pc}
 80002ac:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b0:	4140      	adcs	r0, r0
 80002b2:	eb41 0101 	adc.w	r1, r1, r1
 80002b6:	3c01      	subs	r4, #1
 80002b8:	bf28      	it	cs
 80002ba:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002be:	d2e9      	bcs.n	8000294 <__adddf3+0x10c>
 80002c0:	f091 0f00 	teq	r1, #0
 80002c4:	bf04      	itt	eq
 80002c6:	4601      	moveq	r1, r0
 80002c8:	2000      	moveq	r0, #0
 80002ca:	fab1 f381 	clz	r3, r1
 80002ce:	bf08      	it	eq
 80002d0:	3320      	addeq	r3, #32
 80002d2:	f1a3 030b 	sub.w	r3, r3, #11
 80002d6:	f1b3 0220 	subs.w	r2, r3, #32
 80002da:	da0c      	bge.n	80002f6 <__adddf3+0x16e>
 80002dc:	320c      	adds	r2, #12
 80002de:	dd08      	ble.n	80002f2 <__adddf3+0x16a>
 80002e0:	f102 0c14 	add.w	ip, r2, #20
 80002e4:	f1c2 020c 	rsb	r2, r2, #12
 80002e8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002ec:	fa21 f102 	lsr.w	r1, r1, r2
 80002f0:	e00c      	b.n	800030c <__adddf3+0x184>
 80002f2:	f102 0214 	add.w	r2, r2, #20
 80002f6:	bfd8      	it	le
 80002f8:	f1c2 0c20 	rsble	ip, r2, #32
 80002fc:	fa01 f102 	lsl.w	r1, r1, r2
 8000300:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000304:	bfdc      	itt	le
 8000306:	ea41 010c 	orrle.w	r1, r1, ip
 800030a:	4090      	lslle	r0, r2
 800030c:	1ae4      	subs	r4, r4, r3
 800030e:	bfa2      	ittt	ge
 8000310:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000314:	4329      	orrge	r1, r5
 8000316:	bd30      	popge	{r4, r5, pc}
 8000318:	ea6f 0404 	mvn.w	r4, r4
 800031c:	3c1f      	subs	r4, #31
 800031e:	da1c      	bge.n	800035a <__adddf3+0x1d2>
 8000320:	340c      	adds	r4, #12
 8000322:	dc0e      	bgt.n	8000342 <__adddf3+0x1ba>
 8000324:	f104 0414 	add.w	r4, r4, #20
 8000328:	f1c4 0220 	rsb	r2, r4, #32
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f302 	lsl.w	r3, r1, r2
 8000334:	ea40 0003 	orr.w	r0, r0, r3
 8000338:	fa21 f304 	lsr.w	r3, r1, r4
 800033c:	ea45 0103 	orr.w	r1, r5, r3
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f1c4 040c 	rsb	r4, r4, #12
 8000346:	f1c4 0220 	rsb	r2, r4, #32
 800034a:	fa20 f002 	lsr.w	r0, r0, r2
 800034e:	fa01 f304 	lsl.w	r3, r1, r4
 8000352:	ea40 0003 	orr.w	r0, r0, r3
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	fa21 f004 	lsr.w	r0, r1, r4
 800035e:	4629      	mov	r1, r5
 8000360:	bd30      	pop	{r4, r5, pc}
 8000362:	f094 0f00 	teq	r4, #0
 8000366:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036a:	bf06      	itte	eq
 800036c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000370:	3401      	addeq	r4, #1
 8000372:	3d01      	subne	r5, #1
 8000374:	e74e      	b.n	8000214 <__adddf3+0x8c>
 8000376:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037a:	bf18      	it	ne
 800037c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000380:	d029      	beq.n	80003d6 <__adddf3+0x24e>
 8000382:	ea94 0f05 	teq	r4, r5
 8000386:	bf08      	it	eq
 8000388:	ea90 0f02 	teqeq	r0, r2
 800038c:	d005      	beq.n	800039a <__adddf3+0x212>
 800038e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000392:	bf04      	itt	eq
 8000394:	4619      	moveq	r1, r3
 8000396:	4610      	moveq	r0, r2
 8000398:	bd30      	pop	{r4, r5, pc}
 800039a:	ea91 0f03 	teq	r1, r3
 800039e:	bf1e      	ittt	ne
 80003a0:	2100      	movne	r1, #0
 80003a2:	2000      	movne	r0, #0
 80003a4:	bd30      	popne	{r4, r5, pc}
 80003a6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003aa:	d105      	bne.n	80003b8 <__adddf3+0x230>
 80003ac:	0040      	lsls	r0, r0, #1
 80003ae:	4149      	adcs	r1, r1
 80003b0:	bf28      	it	cs
 80003b2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003bc:	bf3c      	itt	cc
 80003be:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c2:	bd30      	popcc	{r4, r5, pc}
 80003c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d0:	f04f 0000 	mov.w	r0, #0
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003da:	bf1a      	itte	ne
 80003dc:	4619      	movne	r1, r3
 80003de:	4610      	movne	r0, r2
 80003e0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e4:	bf1c      	itt	ne
 80003e6:	460b      	movne	r3, r1
 80003e8:	4602      	movne	r2, r0
 80003ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ee:	bf06      	itte	eq
 80003f0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f4:	ea91 0f03 	teqeq	r1, r3
 80003f8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	bf00      	nop

08000400 <__aeabi_ui2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f04f 0500 	mov.w	r5, #0
 8000418:	f04f 0100 	mov.w	r1, #0
 800041c:	e750      	b.n	80002c0 <__adddf3+0x138>
 800041e:	bf00      	nop

08000420 <__aeabi_i2d>:
 8000420:	f090 0f00 	teq	r0, #0
 8000424:	bf04      	itt	eq
 8000426:	2100      	moveq	r1, #0
 8000428:	4770      	bxeq	lr
 800042a:	b530      	push	{r4, r5, lr}
 800042c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000430:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000434:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000438:	bf48      	it	mi
 800043a:	4240      	negmi	r0, r0
 800043c:	f04f 0100 	mov.w	r1, #0
 8000440:	e73e      	b.n	80002c0 <__adddf3+0x138>
 8000442:	bf00      	nop

08000444 <__aeabi_f2d>:
 8000444:	0042      	lsls	r2, r0, #1
 8000446:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044a:	ea4f 0131 	mov.w	r1, r1, rrx
 800044e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000452:	bf1f      	itttt	ne
 8000454:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000458:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800045c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000460:	4770      	bxne	lr
 8000462:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000466:	bf08      	it	eq
 8000468:	4770      	bxeq	lr
 800046a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800046e:	bf04      	itt	eq
 8000470:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 7460 	mov.w	r4, #896	; 0x380
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000480:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000484:	e71c      	b.n	80002c0 <__adddf3+0x138>
 8000486:	bf00      	nop

08000488 <__aeabi_ul2d>:
 8000488:	ea50 0201 	orrs.w	r2, r0, r1
 800048c:	bf08      	it	eq
 800048e:	4770      	bxeq	lr
 8000490:	b530      	push	{r4, r5, lr}
 8000492:	f04f 0500 	mov.w	r5, #0
 8000496:	e00a      	b.n	80004ae <__aeabi_l2d+0x16>

08000498 <__aeabi_l2d>:
 8000498:	ea50 0201 	orrs.w	r2, r0, r1
 800049c:	bf08      	it	eq
 800049e:	4770      	bxeq	lr
 80004a0:	b530      	push	{r4, r5, lr}
 80004a2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004a6:	d502      	bpl.n	80004ae <__aeabi_l2d+0x16>
 80004a8:	4240      	negs	r0, r0
 80004aa:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ae:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ba:	f43f aed8 	beq.w	800026e <__adddf3+0xe6>
 80004be:	f04f 0203 	mov.w	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ce:	bf18      	it	ne
 80004d0:	3203      	addne	r2, #3
 80004d2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004d6:	f1c2 0320 	rsb	r3, r2, #32
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	fa20 f002 	lsr.w	r0, r0, r2
 80004e2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004e6:	ea40 000e 	orr.w	r0, r0, lr
 80004ea:	fa21 f102 	lsr.w	r1, r1, r2
 80004ee:	4414      	add	r4, r2
 80004f0:	e6bd      	b.n	800026e <__adddf3+0xe6>
 80004f2:	bf00      	nop

080004f4 <__aeabi_dmul>:
 80004f4:	b570      	push	{r4, r5, r6, lr}
 80004f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000502:	bf1d      	ittte	ne
 8000504:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000508:	ea94 0f0c 	teqne	r4, ip
 800050c:	ea95 0f0c 	teqne	r5, ip
 8000510:	f000 f8de 	bleq	80006d0 <__aeabi_dmul+0x1dc>
 8000514:	442c      	add	r4, r5
 8000516:	ea81 0603 	eor.w	r6, r1, r3
 800051a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800051e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000522:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000526:	bf18      	it	ne
 8000528:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800052c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000530:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000534:	d038      	beq.n	80005a8 <__aeabi_dmul+0xb4>
 8000536:	fba0 ce02 	umull	ip, lr, r0, r2
 800053a:	f04f 0500 	mov.w	r5, #0
 800053e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000542:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000546:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054a:	f04f 0600 	mov.w	r6, #0
 800054e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000552:	f09c 0f00 	teq	ip, #0
 8000556:	bf18      	it	ne
 8000558:	f04e 0e01 	orrne.w	lr, lr, #1
 800055c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000560:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000564:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000568:	d204      	bcs.n	8000574 <__aeabi_dmul+0x80>
 800056a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800056e:	416d      	adcs	r5, r5
 8000570:	eb46 0606 	adc.w	r6, r6, r6
 8000574:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000578:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800057c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000580:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000584:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000588:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800058c:	bf88      	it	hi
 800058e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000592:	d81e      	bhi.n	80005d2 <__aeabi_dmul+0xde>
 8000594:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000598:	bf08      	it	eq
 800059a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800059e:	f150 0000 	adcs.w	r0, r0, #0
 80005a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005ac:	ea46 0101 	orr.w	r1, r6, r1
 80005b0:	ea40 0002 	orr.w	r0, r0, r2
 80005b4:	ea81 0103 	eor.w	r1, r1, r3
 80005b8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005bc:	bfc2      	ittt	gt
 80005be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005c6:	bd70      	popgt	{r4, r5, r6, pc}
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f04f 0e00 	mov.w	lr, #0
 80005d0:	3c01      	subs	r4, #1
 80005d2:	f300 80ab 	bgt.w	800072c <__aeabi_dmul+0x238>
 80005d6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005da:	bfde      	ittt	le
 80005dc:	2000      	movle	r0, #0
 80005de:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e2:	bd70      	pople	{r4, r5, r6, pc}
 80005e4:	f1c4 0400 	rsb	r4, r4, #0
 80005e8:	3c20      	subs	r4, #32
 80005ea:	da35      	bge.n	8000658 <__aeabi_dmul+0x164>
 80005ec:	340c      	adds	r4, #12
 80005ee:	dc1b      	bgt.n	8000628 <__aeabi_dmul+0x134>
 80005f0:	f104 0414 	add.w	r4, r4, #20
 80005f4:	f1c4 0520 	rsb	r5, r4, #32
 80005f8:	fa00 f305 	lsl.w	r3, r0, r5
 80005fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000600:	fa01 f205 	lsl.w	r2, r1, r5
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800060c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000610:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000614:	fa21 f604 	lsr.w	r6, r1, r4
 8000618:	eb42 0106 	adc.w	r1, r2, r6
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 040c 	rsb	r4, r4, #12
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f304 	lsl.w	r3, r0, r4
 8000634:	fa20 f005 	lsr.w	r0, r0, r5
 8000638:	fa01 f204 	lsl.w	r2, r1, r4
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000644:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000648:	f141 0100 	adc.w	r1, r1, #0
 800064c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000650:	bf08      	it	eq
 8000652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000656:	bd70      	pop	{r4, r5, r6, pc}
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f205 	lsl.w	r2, r0, r5
 8000660:	ea4e 0e02 	orr.w	lr, lr, r2
 8000664:	fa20 f304 	lsr.w	r3, r0, r4
 8000668:	fa01 f205 	lsl.w	r2, r1, r5
 800066c:	ea43 0302 	orr.w	r3, r3, r2
 8000670:	fa21 f004 	lsr.w	r0, r1, r4
 8000674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000678:	fa21 f204 	lsr.w	r2, r1, r4
 800067c:	ea20 0002 	bic.w	r0, r0, r2
 8000680:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000688:	bf08      	it	eq
 800068a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	f094 0f00 	teq	r4, #0
 8000694:	d10f      	bne.n	80006b6 <__aeabi_dmul+0x1c2>
 8000696:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069a:	0040      	lsls	r0, r0, #1
 800069c:	eb41 0101 	adc.w	r1, r1, r1
 80006a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a4:	bf08      	it	eq
 80006a6:	3c01      	subeq	r4, #1
 80006a8:	d0f7      	beq.n	800069a <__aeabi_dmul+0x1a6>
 80006aa:	ea41 0106 	orr.w	r1, r1, r6
 80006ae:	f095 0f00 	teq	r5, #0
 80006b2:	bf18      	it	ne
 80006b4:	4770      	bxne	lr
 80006b6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ba:	0052      	lsls	r2, r2, #1
 80006bc:	eb43 0303 	adc.w	r3, r3, r3
 80006c0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c4:	bf08      	it	eq
 80006c6:	3d01      	subeq	r5, #1
 80006c8:	d0f7      	beq.n	80006ba <__aeabi_dmul+0x1c6>
 80006ca:	ea43 0306 	orr.w	r3, r3, r6
 80006ce:	4770      	bx	lr
 80006d0:	ea94 0f0c 	teq	r4, ip
 80006d4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d8:	bf18      	it	ne
 80006da:	ea95 0f0c 	teqne	r5, ip
 80006de:	d00c      	beq.n	80006fa <__aeabi_dmul+0x206>
 80006e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e4:	bf18      	it	ne
 80006e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ea:	d1d1      	bne.n	8000690 <__aeabi_dmul+0x19c>
 80006ec:	ea81 0103 	eor.w	r1, r1, r3
 80006f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f4:	f04f 0000 	mov.w	r0, #0
 80006f8:	bd70      	pop	{r4, r5, r6, pc}
 80006fa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fe:	bf06      	itte	eq
 8000700:	4610      	moveq	r0, r2
 8000702:	4619      	moveq	r1, r3
 8000704:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000708:	d019      	beq.n	800073e <__aeabi_dmul+0x24a>
 800070a:	ea94 0f0c 	teq	r4, ip
 800070e:	d102      	bne.n	8000716 <__aeabi_dmul+0x222>
 8000710:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000714:	d113      	bne.n	800073e <__aeabi_dmul+0x24a>
 8000716:	ea95 0f0c 	teq	r5, ip
 800071a:	d105      	bne.n	8000728 <__aeabi_dmul+0x234>
 800071c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000720:	bf1c      	itt	ne
 8000722:	4610      	movne	r0, r2
 8000724:	4619      	movne	r1, r3
 8000726:	d10a      	bne.n	800073e <__aeabi_dmul+0x24a>
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000742:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000746:	bd70      	pop	{r4, r5, r6, pc}

08000748 <__aeabi_ddiv>:
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000752:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000756:	bf1d      	ittte	ne
 8000758:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800075c:	ea94 0f0c 	teqne	r4, ip
 8000760:	ea95 0f0c 	teqne	r5, ip
 8000764:	f000 f8a7 	bleq	80008b6 <__aeabi_ddiv+0x16e>
 8000768:	eba4 0405 	sub.w	r4, r4, r5
 800076c:	ea81 0e03 	eor.w	lr, r1, r3
 8000770:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000774:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000778:	f000 8088 	beq.w	800088c <__aeabi_ddiv+0x144>
 800077c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000780:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000784:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000788:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800078c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000790:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000794:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000798:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800079c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a0:	429d      	cmp	r5, r3
 80007a2:	bf08      	it	eq
 80007a4:	4296      	cmpeq	r6, r2
 80007a6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007aa:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007ae:	d202      	bcs.n	80007b6 <__aeabi_ddiv+0x6e>
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	1ab6      	subs	r6, r6, r2
 80007b8:	eb65 0503 	sbc.w	r5, r5, r3
 80007bc:	085b      	lsrs	r3, r3, #1
 80007be:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007c6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000824:	ea55 0e06 	orrs.w	lr, r5, r6
 8000828:	d018      	beq.n	800085c <__aeabi_ddiv+0x114>
 800082a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800082e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000832:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000836:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800083e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000842:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000846:	d1c0      	bne.n	80007ca <__aeabi_ddiv+0x82>
 8000848:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800084c:	d10b      	bne.n	8000866 <__aeabi_ddiv+0x11e>
 800084e:	ea41 0100 	orr.w	r1, r1, r0
 8000852:	f04f 0000 	mov.w	r0, #0
 8000856:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085a:	e7b6      	b.n	80007ca <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	bf04      	itt	eq
 8000862:	4301      	orreq	r1, r0
 8000864:	2000      	moveq	r0, #0
 8000866:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086a:	bf88      	it	hi
 800086c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000870:	f63f aeaf 	bhi.w	80005d2 <__aeabi_dmul+0xde>
 8000874:	ebb5 0c03 	subs.w	ip, r5, r3
 8000878:	bf04      	itt	eq
 800087a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800087e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000882:	f150 0000 	adcs.w	r0, r0, #0
 8000886:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088a:	bd70      	pop	{r4, r5, r6, pc}
 800088c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000890:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000894:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000898:	bfc2      	ittt	gt
 800089a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800089e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	popgt	{r4, r5, r6, pc}
 80008a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008a8:	f04f 0e00 	mov.w	lr, #0
 80008ac:	3c01      	subs	r4, #1
 80008ae:	e690      	b.n	80005d2 <__aeabi_dmul+0xde>
 80008b0:	ea45 0e06 	orr.w	lr, r5, r6
 80008b4:	e68d      	b.n	80005d2 <__aeabi_dmul+0xde>
 80008b6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ba:	ea94 0f0c 	teq	r4, ip
 80008be:	bf08      	it	eq
 80008c0:	ea95 0f0c 	teqeq	r5, ip
 80008c4:	f43f af3b 	beq.w	800073e <__aeabi_dmul+0x24a>
 80008c8:	ea94 0f0c 	teq	r4, ip
 80008cc:	d10a      	bne.n	80008e4 <__aeabi_ddiv+0x19c>
 80008ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d2:	f47f af34 	bne.w	800073e <__aeabi_dmul+0x24a>
 80008d6:	ea95 0f0c 	teq	r5, ip
 80008da:	f47f af25 	bne.w	8000728 <__aeabi_dmul+0x234>
 80008de:	4610      	mov	r0, r2
 80008e0:	4619      	mov	r1, r3
 80008e2:	e72c      	b.n	800073e <__aeabi_dmul+0x24a>
 80008e4:	ea95 0f0c 	teq	r5, ip
 80008e8:	d106      	bne.n	80008f8 <__aeabi_ddiv+0x1b0>
 80008ea:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ee:	f43f aefd 	beq.w	80006ec <__aeabi_dmul+0x1f8>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e722      	b.n	800073e <__aeabi_dmul+0x24a>
 80008f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008fc:	bf18      	it	ne
 80008fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000902:	f47f aec5 	bne.w	8000690 <__aeabi_dmul+0x19c>
 8000906:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090a:	f47f af0d 	bne.w	8000728 <__aeabi_dmul+0x234>
 800090e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000912:	f47f aeeb 	bne.w	80006ec <__aeabi_dmul+0x1f8>
 8000916:	e712      	b.n	800073e <__aeabi_dmul+0x24a>

08000918 <__aeabi_d2uiz>:
 8000918:	004a      	lsls	r2, r1, #1
 800091a:	d211      	bcs.n	8000940 <__aeabi_d2uiz+0x28>
 800091c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000920:	d211      	bcs.n	8000946 <__aeabi_d2uiz+0x2e>
 8000922:	d50d      	bpl.n	8000940 <__aeabi_d2uiz+0x28>
 8000924:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000928:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800092c:	d40e      	bmi.n	800094c <__aeabi_d2uiz+0x34>
 800092e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000932:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000936:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800093a:	fa23 f002 	lsr.w	r0, r3, r2
 800093e:	4770      	bx	lr
 8000940:	f04f 0000 	mov.w	r0, #0
 8000944:	4770      	bx	lr
 8000946:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800094a:	d102      	bne.n	8000952 <__aeabi_d2uiz+0x3a>
 800094c:	f04f 30ff 	mov.w	r0, #4294967295
 8000950:	4770      	bx	lr
 8000952:	f04f 0000 	mov.w	r0, #0
 8000956:	4770      	bx	lr

08000958 <__aeabi_frsub>:
 8000958:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800095c:	e002      	b.n	8000964 <__addsf3>
 800095e:	bf00      	nop

08000960 <__aeabi_fsub>:
 8000960:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000964 <__addsf3>:
 8000964:	0042      	lsls	r2, r0, #1
 8000966:	bf1f      	itttt	ne
 8000968:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800096c:	ea92 0f03 	teqne	r2, r3
 8000970:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000974:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000978:	d06a      	beq.n	8000a50 <__addsf3+0xec>
 800097a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800097e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000982:	bfc1      	itttt	gt
 8000984:	18d2      	addgt	r2, r2, r3
 8000986:	4041      	eorgt	r1, r0
 8000988:	4048      	eorgt	r0, r1
 800098a:	4041      	eorgt	r1, r0
 800098c:	bfb8      	it	lt
 800098e:	425b      	neglt	r3, r3
 8000990:	2b19      	cmp	r3, #25
 8000992:	bf88      	it	hi
 8000994:	4770      	bxhi	lr
 8000996:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800099a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800099e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009a2:	bf18      	it	ne
 80009a4:	4240      	negne	r0, r0
 80009a6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009aa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009ae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009b2:	bf18      	it	ne
 80009b4:	4249      	negne	r1, r1
 80009b6:	ea92 0f03 	teq	r2, r3
 80009ba:	d03f      	beq.n	8000a3c <__addsf3+0xd8>
 80009bc:	f1a2 0201 	sub.w	r2, r2, #1
 80009c0:	fa41 fc03 	asr.w	ip, r1, r3
 80009c4:	eb10 000c 	adds.w	r0, r0, ip
 80009c8:	f1c3 0320 	rsb	r3, r3, #32
 80009cc:	fa01 f103 	lsl.w	r1, r1, r3
 80009d0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009d4:	d502      	bpl.n	80009dc <__addsf3+0x78>
 80009d6:	4249      	negs	r1, r1
 80009d8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009dc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009e0:	d313      	bcc.n	8000a0a <__addsf3+0xa6>
 80009e2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009e6:	d306      	bcc.n	80009f6 <__addsf3+0x92>
 80009e8:	0840      	lsrs	r0, r0, #1
 80009ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80009ee:	f102 0201 	add.w	r2, r2, #1
 80009f2:	2afe      	cmp	r2, #254	; 0xfe
 80009f4:	d251      	bcs.n	8000a9a <__addsf3+0x136>
 80009f6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009fa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009fe:	bf08      	it	eq
 8000a00:	f020 0001 	biceq.w	r0, r0, #1
 8000a04:	ea40 0003 	orr.w	r0, r0, r3
 8000a08:	4770      	bx	lr
 8000a0a:	0049      	lsls	r1, r1, #1
 8000a0c:	eb40 0000 	adc.w	r0, r0, r0
 8000a10:	3a01      	subs	r2, #1
 8000a12:	bf28      	it	cs
 8000a14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a18:	d2ed      	bcs.n	80009f6 <__addsf3+0x92>
 8000a1a:	fab0 fc80 	clz	ip, r0
 8000a1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a22:	ebb2 020c 	subs.w	r2, r2, ip
 8000a26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a2a:	bfaa      	itet	ge
 8000a2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a30:	4252      	neglt	r2, r2
 8000a32:	4318      	orrge	r0, r3
 8000a34:	bfbc      	itt	lt
 8000a36:	40d0      	lsrlt	r0, r2
 8000a38:	4318      	orrlt	r0, r3
 8000a3a:	4770      	bx	lr
 8000a3c:	f092 0f00 	teq	r2, #0
 8000a40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a44:	bf06      	itte	eq
 8000a46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a4a:	3201      	addeq	r2, #1
 8000a4c:	3b01      	subne	r3, #1
 8000a4e:	e7b5      	b.n	80009bc <__addsf3+0x58>
 8000a50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a58:	bf18      	it	ne
 8000a5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a5e:	d021      	beq.n	8000aa4 <__addsf3+0x140>
 8000a60:	ea92 0f03 	teq	r2, r3
 8000a64:	d004      	beq.n	8000a70 <__addsf3+0x10c>
 8000a66:	f092 0f00 	teq	r2, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	4608      	moveq	r0, r1
 8000a6e:	4770      	bx	lr
 8000a70:	ea90 0f01 	teq	r0, r1
 8000a74:	bf1c      	itt	ne
 8000a76:	2000      	movne	r0, #0
 8000a78:	4770      	bxne	lr
 8000a7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a7e:	d104      	bne.n	8000a8a <__addsf3+0x126>
 8000a80:	0040      	lsls	r0, r0, #1
 8000a82:	bf28      	it	cs
 8000a84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a88:	4770      	bx	lr
 8000a8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a8e:	bf3c      	itt	cc
 8000a90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a94:	4770      	bxcc	lr
 8000a96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000a9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa2:	4770      	bx	lr
 8000aa4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aa8:	bf16      	itet	ne
 8000aaa:	4608      	movne	r0, r1
 8000aac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ab0:	4601      	movne	r1, r0
 8000ab2:	0242      	lsls	r2, r0, #9
 8000ab4:	bf06      	itte	eq
 8000ab6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aba:	ea90 0f01 	teqeq	r0, r1
 8000abe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_ui2f>:
 8000ac4:	f04f 0300 	mov.w	r3, #0
 8000ac8:	e004      	b.n	8000ad4 <__aeabi_i2f+0x8>
 8000aca:	bf00      	nop

08000acc <__aeabi_i2f>:
 8000acc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ad0:	bf48      	it	mi
 8000ad2:	4240      	negmi	r0, r0
 8000ad4:	ea5f 0c00 	movs.w	ip, r0
 8000ad8:	bf08      	it	eq
 8000ada:	4770      	bxeq	lr
 8000adc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ae0:	4601      	mov	r1, r0
 8000ae2:	f04f 0000 	mov.w	r0, #0
 8000ae6:	e01c      	b.n	8000b22 <__aeabi_l2f+0x2a>

08000ae8 <__aeabi_ul2f>:
 8000ae8:	ea50 0201 	orrs.w	r2, r0, r1
 8000aec:	bf08      	it	eq
 8000aee:	4770      	bxeq	lr
 8000af0:	f04f 0300 	mov.w	r3, #0
 8000af4:	e00a      	b.n	8000b0c <__aeabi_l2f+0x14>
 8000af6:	bf00      	nop

08000af8 <__aeabi_l2f>:
 8000af8:	ea50 0201 	orrs.w	r2, r0, r1
 8000afc:	bf08      	it	eq
 8000afe:	4770      	bxeq	lr
 8000b00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__aeabi_l2f+0x14>
 8000b06:	4240      	negs	r0, r0
 8000b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0c:	ea5f 0c01 	movs.w	ip, r1
 8000b10:	bf02      	ittt	eq
 8000b12:	4684      	moveq	ip, r0
 8000b14:	4601      	moveq	r1, r0
 8000b16:	2000      	moveq	r0, #0
 8000b18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b1c:	bf08      	it	eq
 8000b1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b26:	fabc f28c 	clz	r2, ip
 8000b2a:	3a08      	subs	r2, #8
 8000b2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b30:	db10      	blt.n	8000b54 <__aeabi_l2f+0x5c>
 8000b32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b36:	4463      	add	r3, ip
 8000b38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b3c:	f1c2 0220 	rsb	r2, r2, #32
 8000b40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b44:	fa20 f202 	lsr.w	r2, r0, r2
 8000b48:	eb43 0002 	adc.w	r0, r3, r2
 8000b4c:	bf08      	it	eq
 8000b4e:	f020 0001 	biceq.w	r0, r0, #1
 8000b52:	4770      	bx	lr
 8000b54:	f102 0220 	add.w	r2, r2, #32
 8000b58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b5c:	f1c2 0220 	rsb	r2, r2, #32
 8000b60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b64:	fa21 f202 	lsr.w	r2, r1, r2
 8000b68:	eb43 0002 	adc.w	r0, r3, r2
 8000b6c:	bf08      	it	eq
 8000b6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b72:	4770      	bx	lr

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b96e 	b.w	8000e68 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9e08      	ldr	r6, [sp, #32]
 8000baa:	460d      	mov	r5, r1
 8000bac:	4604      	mov	r4, r0
 8000bae:	468e      	mov	lr, r1
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	f040 8083 	bne.w	8000cbc <__udivmoddi4+0x118>
 8000bb6:	428a      	cmp	r2, r1
 8000bb8:	4617      	mov	r7, r2
 8000bba:	d947      	bls.n	8000c4c <__udivmoddi4+0xa8>
 8000bbc:	fab2 f382 	clz	r3, r2
 8000bc0:	b14b      	cbz	r3, 8000bd6 <__udivmoddi4+0x32>
 8000bc2:	f1c3 0120 	rsb	r1, r3, #32
 8000bc6:	fa05 fe03 	lsl.w	lr, r5, r3
 8000bca:	fa20 f101 	lsr.w	r1, r0, r1
 8000bce:	409f      	lsls	r7, r3
 8000bd0:	ea41 0e0e 	orr.w	lr, r1, lr
 8000bd4:	409c      	lsls	r4, r3
 8000bd6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bda:	fbbe fcf8 	udiv	ip, lr, r8
 8000bde:	fa1f f987 	uxth.w	r9, r7
 8000be2:	fb08 e21c 	mls	r2, r8, ip, lr
 8000be6:	fb0c f009 	mul.w	r0, ip, r9
 8000bea:	0c21      	lsrs	r1, r4, #16
 8000bec:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000bf0:	4290      	cmp	r0, r2
 8000bf2:	d90a      	bls.n	8000c0a <__udivmoddi4+0x66>
 8000bf4:	18ba      	adds	r2, r7, r2
 8000bf6:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000bfa:	f080 8118 	bcs.w	8000e2e <__udivmoddi4+0x28a>
 8000bfe:	4290      	cmp	r0, r2
 8000c00:	f240 8115 	bls.w	8000e2e <__udivmoddi4+0x28a>
 8000c04:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c08:	443a      	add	r2, r7
 8000c0a:	1a12      	subs	r2, r2, r0
 8000c0c:	fbb2 f0f8 	udiv	r0, r2, r8
 8000c10:	fb08 2210 	mls	r2, r8, r0, r2
 8000c14:	fb00 f109 	mul.w	r1, r0, r9
 8000c18:	b2a4      	uxth	r4, r4
 8000c1a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c1e:	42a1      	cmp	r1, r4
 8000c20:	d909      	bls.n	8000c36 <__udivmoddi4+0x92>
 8000c22:	193c      	adds	r4, r7, r4
 8000c24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c28:	f080 8103 	bcs.w	8000e32 <__udivmoddi4+0x28e>
 8000c2c:	42a1      	cmp	r1, r4
 8000c2e:	f240 8100 	bls.w	8000e32 <__udivmoddi4+0x28e>
 8000c32:	3802      	subs	r0, #2
 8000c34:	443c      	add	r4, r7
 8000c36:	1a64      	subs	r4, r4, r1
 8000c38:	2100      	movs	r1, #0
 8000c3a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c3e:	b11e      	cbz	r6, 8000c48 <__udivmoddi4+0xa4>
 8000c40:	2200      	movs	r2, #0
 8000c42:	40dc      	lsrs	r4, r3
 8000c44:	e9c6 4200 	strd	r4, r2, [r6]
 8000c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4c:	b902      	cbnz	r2, 8000c50 <__udivmoddi4+0xac>
 8000c4e:	deff      	udf	#255	; 0xff
 8000c50:	fab2 f382 	clz	r3, r2
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d14f      	bne.n	8000cf8 <__udivmoddi4+0x154>
 8000c58:	1a8d      	subs	r5, r1, r2
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000c60:	fa1f f882 	uxth.w	r8, r2
 8000c64:	fbb5 fcfe 	udiv	ip, r5, lr
 8000c68:	fb0e 551c 	mls	r5, lr, ip, r5
 8000c6c:	fb08 f00c 	mul.w	r0, r8, ip
 8000c70:	0c22      	lsrs	r2, r4, #16
 8000c72:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000c76:	42a8      	cmp	r0, r5
 8000c78:	d907      	bls.n	8000c8a <__udivmoddi4+0xe6>
 8000c7a:	197d      	adds	r5, r7, r5
 8000c7c:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000c80:	d202      	bcs.n	8000c88 <__udivmoddi4+0xe4>
 8000c82:	42a8      	cmp	r0, r5
 8000c84:	f200 80e9 	bhi.w	8000e5a <__udivmoddi4+0x2b6>
 8000c88:	4694      	mov	ip, r2
 8000c8a:	1a2d      	subs	r5, r5, r0
 8000c8c:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c90:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c94:	fb08 f800 	mul.w	r8, r8, r0
 8000c98:	b2a4      	uxth	r4, r4
 8000c9a:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c9e:	45a0      	cmp	r8, r4
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x10e>
 8000ca2:	193c      	adds	r4, r7, r4
 8000ca4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ca8:	d202      	bcs.n	8000cb0 <__udivmoddi4+0x10c>
 8000caa:	45a0      	cmp	r8, r4
 8000cac:	f200 80d9 	bhi.w	8000e62 <__udivmoddi4+0x2be>
 8000cb0:	4610      	mov	r0, r2
 8000cb2:	eba4 0408 	sub.w	r4, r4, r8
 8000cb6:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cba:	e7c0      	b.n	8000c3e <__udivmoddi4+0x9a>
 8000cbc:	428b      	cmp	r3, r1
 8000cbe:	d908      	bls.n	8000cd2 <__udivmoddi4+0x12e>
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	f000 80b1 	beq.w	8000e28 <__udivmoddi4+0x284>
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	e9c6 0500 	strd	r0, r5, [r6]
 8000ccc:	4608      	mov	r0, r1
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	fab3 f183 	clz	r1, r3
 8000cd6:	2900      	cmp	r1, #0
 8000cd8:	d14b      	bne.n	8000d72 <__udivmoddi4+0x1ce>
 8000cda:	42ab      	cmp	r3, r5
 8000cdc:	d302      	bcc.n	8000ce4 <__udivmoddi4+0x140>
 8000cde:	4282      	cmp	r2, r0
 8000ce0:	f200 80b9 	bhi.w	8000e56 <__udivmoddi4+0x2b2>
 8000ce4:	1a84      	subs	r4, r0, r2
 8000ce6:	eb65 0303 	sbc.w	r3, r5, r3
 8000cea:	2001      	movs	r0, #1
 8000cec:	469e      	mov	lr, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d0aa      	beq.n	8000c48 <__udivmoddi4+0xa4>
 8000cf2:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cf6:	e7a7      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000cf8:	409f      	lsls	r7, r3
 8000cfa:	f1c3 0220 	rsb	r2, r3, #32
 8000cfe:	40d1      	lsrs	r1, r2
 8000d00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d08:	fa1f f887 	uxth.w	r8, r7
 8000d0c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d10:	fa24 f202 	lsr.w	r2, r4, r2
 8000d14:	409d      	lsls	r5, r3
 8000d16:	fb00 fc08 	mul.w	ip, r0, r8
 8000d1a:	432a      	orrs	r2, r5
 8000d1c:	0c15      	lsrs	r5, r2, #16
 8000d1e:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000d22:	45ac      	cmp	ip, r5
 8000d24:	fa04 f403 	lsl.w	r4, r4, r3
 8000d28:	d909      	bls.n	8000d3e <__udivmoddi4+0x19a>
 8000d2a:	197d      	adds	r5, r7, r5
 8000d2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d30:	f080 808f 	bcs.w	8000e52 <__udivmoddi4+0x2ae>
 8000d34:	45ac      	cmp	ip, r5
 8000d36:	f240 808c 	bls.w	8000e52 <__udivmoddi4+0x2ae>
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	443d      	add	r5, r7
 8000d3e:	eba5 050c 	sub.w	r5, r5, ip
 8000d42:	fbb5 f1fe 	udiv	r1, r5, lr
 8000d46:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000d4a:	fb01 f908 	mul.w	r9, r1, r8
 8000d4e:	b295      	uxth	r5, r2
 8000d50:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d54:	45a9      	cmp	r9, r5
 8000d56:	d907      	bls.n	8000d68 <__udivmoddi4+0x1c4>
 8000d58:	197d      	adds	r5, r7, r5
 8000d5a:	f101 32ff 	add.w	r2, r1, #4294967295
 8000d5e:	d274      	bcs.n	8000e4a <__udivmoddi4+0x2a6>
 8000d60:	45a9      	cmp	r9, r5
 8000d62:	d972      	bls.n	8000e4a <__udivmoddi4+0x2a6>
 8000d64:	3902      	subs	r1, #2
 8000d66:	443d      	add	r5, r7
 8000d68:	eba5 0509 	sub.w	r5, r5, r9
 8000d6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d70:	e778      	b.n	8000c64 <__udivmoddi4+0xc0>
 8000d72:	f1c1 0720 	rsb	r7, r1, #32
 8000d76:	408b      	lsls	r3, r1
 8000d78:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d7c:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d80:	fa25 f407 	lsr.w	r4, r5, r7
 8000d84:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d88:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d8c:	fa1f f88c 	uxth.w	r8, ip
 8000d90:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d94:	fa20 f307 	lsr.w	r3, r0, r7
 8000d98:	fb09 fa08 	mul.w	sl, r9, r8
 8000d9c:	408d      	lsls	r5, r1
 8000d9e:	431d      	orrs	r5, r3
 8000da0:	0c2b      	lsrs	r3, r5, #16
 8000da2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000da6:	45a2      	cmp	sl, r4
 8000da8:	fa02 f201 	lsl.w	r2, r2, r1
 8000dac:	fa00 f301 	lsl.w	r3, r0, r1
 8000db0:	d909      	bls.n	8000dc6 <__udivmoddi4+0x222>
 8000db2:	eb1c 0404 	adds.w	r4, ip, r4
 8000db6:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dba:	d248      	bcs.n	8000e4e <__udivmoddi4+0x2aa>
 8000dbc:	45a2      	cmp	sl, r4
 8000dbe:	d946      	bls.n	8000e4e <__udivmoddi4+0x2aa>
 8000dc0:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc4:	4464      	add	r4, ip
 8000dc6:	eba4 040a 	sub.w	r4, r4, sl
 8000dca:	fbb4 f0fe 	udiv	r0, r4, lr
 8000dce:	fb0e 4410 	mls	r4, lr, r0, r4
 8000dd2:	fb00 fa08 	mul.w	sl, r0, r8
 8000dd6:	b2ad      	uxth	r5, r5
 8000dd8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x24e>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000de8:	d22d      	bcs.n	8000e46 <__udivmoddi4+0x2a2>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d92b      	bls.n	8000e46 <__udivmoddi4+0x2a2>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c6      	mov	lr, r8
 8000e02:	464d      	mov	r5, r9
 8000e04:	d319      	bcc.n	8000e3a <__udivmoddi4+0x296>
 8000e06:	d016      	beq.n	8000e36 <__udivmoddi4+0x292>
 8000e08:	b15e      	cbz	r6, 8000e22 <__udivmoddi4+0x27e>
 8000e0a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e0e:	eb64 0405 	sbc.w	r4, r4, r5
 8000e12:	fa04 f707 	lsl.w	r7, r4, r7
 8000e16:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1a:	431f      	orrs	r7, r3
 8000e1c:	40cc      	lsrs	r4, r1
 8000e1e:	e9c6 7400 	strd	r7, r4, [r6]
 8000e22:	2100      	movs	r1, #0
 8000e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e28:	4631      	mov	r1, r6
 8000e2a:	4630      	mov	r0, r6
 8000e2c:	e70c      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000e2e:	468c      	mov	ip, r1
 8000e30:	e6eb      	b.n	8000c0a <__udivmoddi4+0x66>
 8000e32:	4610      	mov	r0, r2
 8000e34:	e6ff      	b.n	8000c36 <__udivmoddi4+0x92>
 8000e36:	4543      	cmp	r3, r8
 8000e38:	d2e6      	bcs.n	8000e08 <__udivmoddi4+0x264>
 8000e3a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e3e:	eb69 050c 	sbc.w	r5, r9, ip
 8000e42:	3801      	subs	r0, #1
 8000e44:	e7e0      	b.n	8000e08 <__udivmoddi4+0x264>
 8000e46:	4628      	mov	r0, r5
 8000e48:	e7d3      	b.n	8000df2 <__udivmoddi4+0x24e>
 8000e4a:	4611      	mov	r1, r2
 8000e4c:	e78c      	b.n	8000d68 <__udivmoddi4+0x1c4>
 8000e4e:	4681      	mov	r9, r0
 8000e50:	e7b9      	b.n	8000dc6 <__udivmoddi4+0x222>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e773      	b.n	8000d3e <__udivmoddi4+0x19a>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e749      	b.n	8000cee <__udivmoddi4+0x14a>
 8000e5a:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e5e:	443d      	add	r5, r7
 8000e60:	e713      	b.n	8000c8a <__udivmoddi4+0xe6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	443c      	add	r4, r7
 8000e66:	e724      	b.n	8000cb2 <__udivmoddi4+0x10e>

08000e68 <__aeabi_idiv0>:
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop

08000e6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e72:	f000 fcb0 	bl	80017d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e76:	f000 f863 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7a:	f000 f901 	bl	8001080 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e7e:	f000 f8d5 	bl	800102c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000e82:	f000 f8a5 	bl	8000fd0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000e86:	f000 f95b 	bl	8001140 <ssd1306_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_I2C_Mem_Read(&hi2c1, 0x45<<1, 0x05, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 8000e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8e:	9302      	str	r3, [sp, #8]
 8000e90:	2302      	movs	r3, #2
 8000e92:	9301      	str	r3, [sp, #4]
 8000e94:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <main+0xb4>)
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	2301      	movs	r3, #1
 8000e9a:	2205      	movs	r2, #5
 8000e9c:	218a      	movs	r1, #138	; 0x8a
 8000e9e:	4821      	ldr	r0, [pc, #132]	; (8000f24 <main+0xb8>)
 8000ea0:	f001 f9cc 	bl	800223c <HAL_I2C_Mem_Read>

	  temp = 3.125*(float)((aRxBuffer[0]<<8) | aRxBuffer[1]);
 8000ea4:	4b1e      	ldr	r3, [pc, #120]	; (8000f20 <main+0xb4>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	021b      	lsls	r3, r3, #8
 8000eaa:	4a1d      	ldr	r2, [pc, #116]	; (8000f20 <main+0xb4>)
 8000eac:	7852      	ldrb	r2, [r2, #1]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff fe0b 	bl	8000acc <__aeabi_i2f>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fac3 	bl	8000444 <__aeabi_f2d>
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <main+0xbc>)
 8000ec4:	f7ff fb16 	bl	80004f4 <__aeabi_dmul>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	460b      	mov	r3, r1
 8000ecc:	4610      	mov	r0, r2
 8000ece:	4619      	mov	r1, r3
 8000ed0:	f7ff fd22 	bl	8000918 <__aeabi_d2uiz>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	b29a      	uxth	r2, r3
 8000ed8:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <main+0xc0>)
 8000eda:	801a      	strh	r2, [r3, #0]
	  sprintf(charBuffer, "%u\r\n", temp);
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <main+0xc0>)
 8000ede:	881b      	ldrh	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4913      	ldr	r1, [pc, #76]	; (8000f30 <main+0xc4>)
 8000ee4:	4813      	ldr	r0, [pc, #76]	; (8000f34 <main+0xc8>)
 8000ee6:	f002 ff2d 	bl	8003d44 <siprintf>

	  HAL_UART_Transmit(&huart1, &charBuffer, 6, 500);
 8000eea:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000eee:	2206      	movs	r2, #6
 8000ef0:	4910      	ldr	r1, [pc, #64]	; (8000f34 <main+0xc8>)
 8000ef2:	4811      	ldr	r0, [pc, #68]	; (8000f38 <main+0xcc>)
 8000ef4:	f002 fd0b 	bl	800390e <HAL_UART_Transmit>

	  ssd1306_Fill(Black);
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f000 f98b 	bl	8001214 <ssd1306_Fill>
	  ssd1306_SetCursor(0, 0);
 8000efe:	2100      	movs	r1, #0
 8000f00:	2000      	movs	r0, #0
 8000f02:	f000 fadf 	bl	80014c4 <ssd1306_SetCursor>
	  ssd1306_WriteString(&charBuffer, Font_16x26, White);
 8000f06:	4a0d      	ldr	r2, [pc, #52]	; (8000f3c <main+0xd0>)
 8000f08:	2301      	movs	r3, #1
 8000f0a:	ca06      	ldmia	r2, {r1, r2}
 8000f0c:	4809      	ldr	r0, [pc, #36]	; (8000f34 <main+0xc8>)
 8000f0e:	f000 fab3 	bl	8001478 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8000f12:	f000 f9a1 	bl	8001258 <ssd1306_UpdateScreen>

	  HAL_Delay(1000);
 8000f16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f1a:	f000 fccb 	bl	80018b4 <HAL_Delay>
	  HAL_I2C_Mem_Read(&hi2c1, 0x45<<1, 0x05, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 8000f1e:	e7b4      	b.n	8000e8a <main+0x1e>
 8000f20:	20000354 	.word	0x20000354
 8000f24:	200002a8 	.word	0x200002a8
 8000f28:	40090000 	.word	0x40090000
 8000f2c:	200002fc 	.word	0x200002fc
 8000f30:	08004580 	.word	0x08004580
 8000f34:	2000034c 	.word	0x2000034c
 8000f38:	20000304 	.word	0x20000304
 8000f3c:	20000000 	.word	0x20000000

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b092      	sub	sp, #72	; 0x48
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 0314 	add.w	r3, r7, #20
 8000f4a:	2234      	movs	r2, #52	; 0x34
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 fef0 	bl	8003d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	463b      	mov	r3, r7
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
 8000f60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f62:	4b1a      	ldr	r3, [pc, #104]	; (8000fcc <SystemClock_Config+0x8c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000f6a:	4a18      	ldr	r2, [pc, #96]	; (8000fcc <SystemClock_Config+0x8c>)
 8000f6c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f70:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f72:	2310      	movs	r3, #16
 8000f74:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f76:	2301      	movs	r3, #1
 8000f78:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000f7e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000f82:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f84:	2300      	movs	r3, #0
 8000f86:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f001 fed5 	bl	8002d3c <HAL_RCC_OscConfig>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000f98:	f000 f894 	bl	80010c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f9c:	230f      	movs	r3, #15
 8000f9e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fac:	2300      	movs	r3, #0
 8000fae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 f9f1 	bl	800339c <HAL_RCC_ClockConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000fc0:	f000 f880 	bl	80010c4 <Error_Handler>
  }
}
 8000fc4:	bf00      	nop
 8000fc6:	3748      	adds	r7, #72	; 0x48
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40007000 	.word	0x40007000

08000fd0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <MX_I2C1_Init+0x50>)
 8000fd6:	4a13      	ldr	r2, [pc, #76]	; (8001024 <MX_I2C1_Init+0x54>)
 8000fd8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_I2C1_Init+0x50>)
 8000fdc:	4a12      	ldr	r2, [pc, #72]	; (8001028 <MX_I2C1_Init+0x58>)
 8000fde:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_I2C1_Init+0x50>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_I2C1_Init+0x50>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_I2C1_Init+0x50>)
 8000fee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ff2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <MX_I2C1_Init+0x50>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_I2C1_Init+0x50>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <MX_I2C1_Init+0x50>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_I2C1_Init+0x50>)
 8001008:	2200      	movs	r2, #0
 800100a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800100c:	4804      	ldr	r0, [pc, #16]	; (8001020 <MX_I2C1_Init+0x50>)
 800100e:	f000 fed7 	bl	8001dc0 <HAL_I2C_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001018:	f000 f854 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200002a8 	.word	0x200002a8
 8001024:	40005400 	.word	0x40005400
 8001028:	000186a0 	.word	0x000186a0

0800102c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <MX_USART1_UART_Init+0x4c>)
 8001032:	4a12      	ldr	r2, [pc, #72]	; (800107c <MX_USART1_UART_Init+0x50>)
 8001034:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <MX_USART1_UART_Init+0x4c>)
 8001038:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800103c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_USART1_UART_Init+0x4c>)
 8001040:	2200      	movs	r2, #0
 8001042:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001044:	4b0c      	ldr	r3, [pc, #48]	; (8001078 <MX_USART1_UART_Init+0x4c>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800104a:	4b0b      	ldr	r3, [pc, #44]	; (8001078 <MX_USART1_UART_Init+0x4c>)
 800104c:	2200      	movs	r2, #0
 800104e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001050:	4b09      	ldr	r3, [pc, #36]	; (8001078 <MX_USART1_UART_Init+0x4c>)
 8001052:	220c      	movs	r2, #12
 8001054:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <MX_USART1_UART_Init+0x4c>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800105c:	4b06      	ldr	r3, [pc, #24]	; (8001078 <MX_USART1_UART_Init+0x4c>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001062:	4805      	ldr	r0, [pc, #20]	; (8001078 <MX_USART1_UART_Init+0x4c>)
 8001064:	f002 fc06 	bl	8003874 <HAL_UART_Init>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800106e:	f000 f829 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20000304 	.word	0x20000304
 800107c:	40013800 	.word	0x40013800

08001080 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b0e      	ldr	r3, [pc, #56]	; (80010c0 <MX_GPIO_Init+0x40>)
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	4a0d      	ldr	r2, [pc, #52]	; (80010c0 <MX_GPIO_Init+0x40>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	61d3      	str	r3, [r2, #28]
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <MX_GPIO_Init+0x40>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	607b      	str	r3, [r7, #4]
 800109c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b08      	ldr	r3, [pc, #32]	; (80010c0 <MX_GPIO_Init+0x40>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	4a07      	ldr	r2, [pc, #28]	; (80010c0 <MX_GPIO_Init+0x40>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	61d3      	str	r3, [r2, #28]
 80010aa:	4b05      	ldr	r3, [pc, #20]	; (80010c0 <MX_GPIO_Init+0x40>)
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]

}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	40023800 	.word	0x40023800

080010c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c8:	b672      	cpsid	i
}
 80010ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010cc:	e7fe      	b.n	80010cc <Error_Handler+0x8>

080010ce <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
	...

080010dc <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80010dc:	b580      	push	{r7, lr}
 80010de:	b086      	sub	sp, #24
 80010e0:	af04      	add	r7, sp, #16
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ea:	9302      	str	r3, [sp, #8]
 80010ec:	2301      	movs	r3, #1
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2301      	movs	r3, #1
 80010f6:	2200      	movs	r2, #0
 80010f8:	2178      	movs	r1, #120	; 0x78
 80010fa:	4803      	ldr	r0, [pc, #12]	; (8001108 <ssd1306_WriteCommand+0x2c>)
 80010fc:	f000 ffa4 	bl	8002048 <HAL_I2C_Mem_Write>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	200002a8 	.word	0x200002a8

0800110c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800110c:	b580      	push	{r7, lr}
 800110e:	b086      	sub	sp, #24
 8001110:	af04      	add	r7, sp, #16
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b29b      	uxth	r3, r3
 800111a:	f04f 32ff 	mov.w	r2, #4294967295
 800111e:	9202      	str	r2, [sp, #8]
 8001120:	9301      	str	r3, [sp, #4]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	9300      	str	r3, [sp, #0]
 8001126:	2301      	movs	r3, #1
 8001128:	2240      	movs	r2, #64	; 0x40
 800112a:	2178      	movs	r1, #120	; 0x78
 800112c:	4803      	ldr	r0, [pc, #12]	; (800113c <ssd1306_WriteData+0x30>)
 800112e:	f000 ff8b 	bl	8002048 <HAL_I2C_Mem_Write>
}
 8001132:	bf00      	nop
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200002a8 	.word	0x200002a8

08001140 <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001144:	f7ff ffc3 	bl	80010ce <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001148:	2064      	movs	r0, #100	; 0x64
 800114a:	f000 fbb3 	bl	80018b4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800114e:	2000      	movs	r0, #0
 8001150:	f000 f9e4 	bl	800151c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001154:	2020      	movs	r0, #32
 8001156:	f7ff ffc1 	bl	80010dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800115a:	2000      	movs	r0, #0
 800115c:	f7ff ffbe 	bl	80010dc <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001160:	20b0      	movs	r0, #176	; 0xb0
 8001162:	f7ff ffbb 	bl	80010dc <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001166:	20c8      	movs	r0, #200	; 0xc8
 8001168:	f7ff ffb8 	bl	80010dc <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800116c:	2000      	movs	r0, #0
 800116e:	f7ff ffb5 	bl	80010dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001172:	2010      	movs	r0, #16
 8001174:	f7ff ffb2 	bl	80010dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001178:	2040      	movs	r0, #64	; 0x40
 800117a:	f7ff ffaf 	bl	80010dc <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800117e:	20ff      	movs	r0, #255	; 0xff
 8001180:	f000 f9b8 	bl	80014f4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001184:	20a1      	movs	r0, #161	; 0xa1
 8001186:	f7ff ffa9 	bl	80010dc <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800118a:	20a6      	movs	r0, #166	; 0xa6
 800118c:	f7ff ffa6 	bl	80010dc <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001190:	20a8      	movs	r0, #168	; 0xa8
 8001192:	f7ff ffa3 	bl	80010dc <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8001196:	201f      	movs	r0, #31
 8001198:	f7ff ffa0 	bl	80010dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800119c:	20a4      	movs	r0, #164	; 0xa4
 800119e:	f7ff ff9d 	bl	80010dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80011a2:	20d3      	movs	r0, #211	; 0xd3
 80011a4:	f7ff ff9a 	bl	80010dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80011a8:	2000      	movs	r0, #0
 80011aa:	f7ff ff97 	bl	80010dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80011ae:	20d5      	movs	r0, #213	; 0xd5
 80011b0:	f7ff ff94 	bl	80010dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80011b4:	20f0      	movs	r0, #240	; 0xf0
 80011b6:	f7ff ff91 	bl	80010dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80011ba:	20d9      	movs	r0, #217	; 0xd9
 80011bc:	f7ff ff8e 	bl	80010dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80011c0:	2022      	movs	r0, #34	; 0x22
 80011c2:	f7ff ff8b 	bl	80010dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80011c6:	20da      	movs	r0, #218	; 0xda
 80011c8:	f7ff ff88 	bl	80010dc <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 80011cc:	2002      	movs	r0, #2
 80011ce:	f7ff ff85 	bl	80010dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80011d2:	20db      	movs	r0, #219	; 0xdb
 80011d4:	f7ff ff82 	bl	80010dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80011d8:	2020      	movs	r0, #32
 80011da:	f7ff ff7f 	bl	80010dc <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80011de:	208d      	movs	r0, #141	; 0x8d
 80011e0:	f7ff ff7c 	bl	80010dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80011e4:	2014      	movs	r0, #20
 80011e6:	f7ff ff79 	bl	80010dc <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80011ea:	2001      	movs	r0, #1
 80011ec:	f000 f996 	bl	800151c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80011f0:	2000      	movs	r0, #0
 80011f2:	f000 f80f 	bl	8001214 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80011f6:	f000 f82f 	bl	8001258 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80011fa:	4b05      	ldr	r3, [pc, #20]	; (8001210 <ssd1306_Init+0xd0>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001200:	4b03      	ldr	r3, [pc, #12]	; (8001210 <ssd1306_Init+0xd0>)
 8001202:	2200      	movs	r2, #0
 8001204:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001206:	4b02      	ldr	r3, [pc, #8]	; (8001210 <ssd1306_Init+0xd0>)
 8001208:	2201      	movs	r2, #1
 800120a:	715a      	strb	r2, [r3, #5]
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000294 	.word	0x20000294

08001214 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	e00d      	b.n	8001240 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <ssd1306_Fill+0x1a>
 800122a:	2100      	movs	r1, #0
 800122c:	e000      	b.n	8001230 <ssd1306_Fill+0x1c>
 800122e:	21ff      	movs	r1, #255	; 0xff
 8001230:	4a08      	ldr	r2, [pc, #32]	; (8001254 <ssd1306_Fill+0x40>)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	4413      	add	r3, r2
 8001236:	460a      	mov	r2, r1
 8001238:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	3301      	adds	r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001246:	d3ed      	bcc.n	8001224 <ssd1306_Fill+0x10>
    }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	20000094 	.word	0x20000094

08001258 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001258:	b580      	push	{r7, lr}
 800125a:	b082      	sub	sp, #8
 800125c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800125e:	2300      	movs	r3, #0
 8001260:	71fb      	strb	r3, [r7, #7]
 8001262:	e016      	b.n	8001292 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	3b50      	subs	r3, #80	; 0x50
 8001268:	b2db      	uxtb	r3, r3
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ff36 	bl	80010dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001270:	2000      	movs	r0, #0
 8001272:	f7ff ff33 	bl	80010dc <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001276:	2010      	movs	r0, #16
 8001278:	f7ff ff30 	bl	80010dc <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	01db      	lsls	r3, r3, #7
 8001280:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <ssd1306_UpdateScreen+0x4c>)
 8001282:	4413      	add	r3, r2
 8001284:	2180      	movs	r1, #128	; 0x80
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff40 	bl	800110c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	3301      	adds	r3, #1
 8001290:	71fb      	strb	r3, [r7, #7]
 8001292:	79fb      	ldrb	r3, [r7, #7]
 8001294:	2b03      	cmp	r3, #3
 8001296:	d9e5      	bls.n	8001264 <ssd1306_UpdateScreen+0xc>
    }
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000094 	.word	0x20000094

080012a8 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
 80012b2:	460b      	mov	r3, r1
 80012b4:	71bb      	strb	r3, [r7, #6]
 80012b6:	4613      	mov	r3, r2
 80012b8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	db48      	blt.n	8001354 <ssd1306_DrawPixel+0xac>
 80012c2:	79bb      	ldrb	r3, [r7, #6]
 80012c4:	2b1f      	cmp	r3, #31
 80012c6:	d845      	bhi.n	8001354 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 80012c8:	4b25      	ldr	r3, [pc, #148]	; (8001360 <ssd1306_DrawPixel+0xb8>)
 80012ca:	791b      	ldrb	r3, [r3, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d006      	beq.n	80012de <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 80012d0:	797b      	ldrb	r3, [r7, #5]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	bf0c      	ite	eq
 80012d6:	2301      	moveq	r3, #1
 80012d8:	2300      	movne	r3, #0
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 80012de:	797b      	ldrb	r3, [r7, #5]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d11a      	bne.n	800131a <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80012e4:	79fa      	ldrb	r2, [r7, #7]
 80012e6:	79bb      	ldrb	r3, [r7, #6]
 80012e8:	08db      	lsrs	r3, r3, #3
 80012ea:	b2d8      	uxtb	r0, r3
 80012ec:	4603      	mov	r3, r0
 80012ee:	01db      	lsls	r3, r3, #7
 80012f0:	4413      	add	r3, r2
 80012f2:	4a1c      	ldr	r2, [pc, #112]	; (8001364 <ssd1306_DrawPixel+0xbc>)
 80012f4:	5cd3      	ldrb	r3, [r2, r3]
 80012f6:	b25a      	sxtb	r2, r3
 80012f8:	79bb      	ldrb	r3, [r7, #6]
 80012fa:	f003 0307 	and.w	r3, r3, #7
 80012fe:	2101      	movs	r1, #1
 8001300:	fa01 f303 	lsl.w	r3, r1, r3
 8001304:	b25b      	sxtb	r3, r3
 8001306:	4313      	orrs	r3, r2
 8001308:	b259      	sxtb	r1, r3
 800130a:	79fa      	ldrb	r2, [r7, #7]
 800130c:	4603      	mov	r3, r0
 800130e:	01db      	lsls	r3, r3, #7
 8001310:	4413      	add	r3, r2
 8001312:	b2c9      	uxtb	r1, r1
 8001314:	4a13      	ldr	r2, [pc, #76]	; (8001364 <ssd1306_DrawPixel+0xbc>)
 8001316:	54d1      	strb	r1, [r2, r3]
 8001318:	e01d      	b.n	8001356 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800131a:	79fa      	ldrb	r2, [r7, #7]
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	08db      	lsrs	r3, r3, #3
 8001320:	b2d8      	uxtb	r0, r3
 8001322:	4603      	mov	r3, r0
 8001324:	01db      	lsls	r3, r3, #7
 8001326:	4413      	add	r3, r2
 8001328:	4a0e      	ldr	r2, [pc, #56]	; (8001364 <ssd1306_DrawPixel+0xbc>)
 800132a:	5cd3      	ldrb	r3, [r2, r3]
 800132c:	b25a      	sxtb	r2, r3
 800132e:	79bb      	ldrb	r3, [r7, #6]
 8001330:	f003 0307 	and.w	r3, r3, #7
 8001334:	2101      	movs	r1, #1
 8001336:	fa01 f303 	lsl.w	r3, r1, r3
 800133a:	b25b      	sxtb	r3, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	b25b      	sxtb	r3, r3
 8001340:	4013      	ands	r3, r2
 8001342:	b259      	sxtb	r1, r3
 8001344:	79fa      	ldrb	r2, [r7, #7]
 8001346:	4603      	mov	r3, r0
 8001348:	01db      	lsls	r3, r3, #7
 800134a:	4413      	add	r3, r2
 800134c:	b2c9      	uxtb	r1, r1
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <ssd1306_DrawPixel+0xbc>)
 8001350:	54d1      	strb	r1, [r2, r3]
 8001352:	e000      	b.n	8001356 <ssd1306_DrawPixel+0xae>
        return;
 8001354:	bf00      	nop
    }
}
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000294 	.word	0x20000294
 8001364:	20000094 	.word	0x20000094

08001368 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001368:	b590      	push	{r4, r7, lr}
 800136a:	b089      	sub	sp, #36	; 0x24
 800136c:	af00      	add	r7, sp, #0
 800136e:	4604      	mov	r4, r0
 8001370:	1d38      	adds	r0, r7, #4
 8001372:	e880 0006 	stmia.w	r0, {r1, r2}
 8001376:	461a      	mov	r2, r3
 8001378:	4623      	mov	r3, r4
 800137a:	73fb      	strb	r3, [r7, #15]
 800137c:	4613      	mov	r3, r2
 800137e:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001380:	7bfb      	ldrb	r3, [r7, #15]
 8001382:	2b1f      	cmp	r3, #31
 8001384:	d902      	bls.n	800138c <ssd1306_WriteChar+0x24>
 8001386:	7bfb      	ldrb	r3, [r7, #15]
 8001388:	2b7e      	cmp	r3, #126	; 0x7e
 800138a:	d901      	bls.n	8001390 <ssd1306_WriteChar+0x28>
        return 0;
 800138c:	2300      	movs	r3, #0
 800138e:	e06d      	b.n	800146c <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001390:	4b38      	ldr	r3, [pc, #224]	; (8001474 <ssd1306_WriteChar+0x10c>)
 8001392:	881b      	ldrh	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	793b      	ldrb	r3, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	2b80      	cmp	r3, #128	; 0x80
 800139c:	dc06      	bgt.n	80013ac <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 800139e:	4b35      	ldr	r3, [pc, #212]	; (8001474 <ssd1306_WriteChar+0x10c>)
 80013a0:	885b      	ldrh	r3, [r3, #2]
 80013a2:	461a      	mov	r2, r3
 80013a4:	797b      	ldrb	r3, [r7, #5]
 80013a6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80013a8:	2b20      	cmp	r3, #32
 80013aa:	dd01      	ble.n	80013b0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	e05d      	b.n	800146c <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80013b0:	2300      	movs	r3, #0
 80013b2:	61fb      	str	r3, [r7, #28]
 80013b4:	e04c      	b.n	8001450 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80013b6:	68ba      	ldr	r2, [r7, #8]
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	3b20      	subs	r3, #32
 80013bc:	7979      	ldrb	r1, [r7, #5]
 80013be:	fb01 f303 	mul.w	r3, r1, r3
 80013c2:	4619      	mov	r1, r3
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	440b      	add	r3, r1
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
 80013d4:	e034      	b.n	8001440 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d012      	beq.n	800140c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80013e6:	4b23      	ldr	r3, [pc, #140]	; (8001474 <ssd1306_WriteChar+0x10c>)
 80013e8:	881b      	ldrh	r3, [r3, #0]
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	69bb      	ldr	r3, [r7, #24]
 80013ee:	b2db      	uxtb	r3, r3
 80013f0:	4413      	add	r3, r2
 80013f2:	b2d8      	uxtb	r0, r3
 80013f4:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <ssd1306_WriteChar+0x10c>)
 80013f6:	885b      	ldrh	r3, [r3, #2]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	4413      	add	r3, r2
 8001400:	b2db      	uxtb	r3, r3
 8001402:	7bba      	ldrb	r2, [r7, #14]
 8001404:	4619      	mov	r1, r3
 8001406:	f7ff ff4f 	bl	80012a8 <ssd1306_DrawPixel>
 800140a:	e016      	b.n	800143a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800140c:	4b19      	ldr	r3, [pc, #100]	; (8001474 <ssd1306_WriteChar+0x10c>)
 800140e:	881b      	ldrh	r3, [r3, #0]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	69bb      	ldr	r3, [r7, #24]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	4413      	add	r3, r2
 8001418:	b2d8      	uxtb	r0, r3
 800141a:	4b16      	ldr	r3, [pc, #88]	; (8001474 <ssd1306_WriteChar+0x10c>)
 800141c:	885b      	ldrh	r3, [r3, #2]
 800141e:	b2da      	uxtb	r2, r3
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	b2db      	uxtb	r3, r3
 8001424:	4413      	add	r3, r2
 8001426:	b2d9      	uxtb	r1, r3
 8001428:	7bbb      	ldrb	r3, [r7, #14]
 800142a:	2b00      	cmp	r3, #0
 800142c:	bf0c      	ite	eq
 800142e:	2301      	moveq	r3, #1
 8001430:	2300      	movne	r3, #0
 8001432:	b2db      	uxtb	r3, r3
 8001434:	461a      	mov	r2, r3
 8001436:	f7ff ff37 	bl	80012a8 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800143a:	69bb      	ldr	r3, [r7, #24]
 800143c:	3301      	adds	r3, #1
 800143e:	61bb      	str	r3, [r7, #24]
 8001440:	793b      	ldrb	r3, [r7, #4]
 8001442:	461a      	mov	r2, r3
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	4293      	cmp	r3, r2
 8001448:	d3c5      	bcc.n	80013d6 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3301      	adds	r3, #1
 800144e:	61fb      	str	r3, [r7, #28]
 8001450:	797b      	ldrb	r3, [r7, #5]
 8001452:	461a      	mov	r2, r3
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	4293      	cmp	r3, r2
 8001458:	d3ad      	bcc.n	80013b6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <ssd1306_WriteChar+0x10c>)
 800145c:	881a      	ldrh	r2, [r3, #0]
 800145e:	793b      	ldrb	r3, [r7, #4]
 8001460:	b29b      	uxth	r3, r3
 8001462:	4413      	add	r3, r2
 8001464:	b29a      	uxth	r2, r3
 8001466:	4b03      	ldr	r3, [pc, #12]	; (8001474 <ssd1306_WriteChar+0x10c>)
 8001468:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800146a:	7bfb      	ldrb	r3, [r7, #15]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3724      	adds	r7, #36	; 0x24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd90      	pop	{r4, r7, pc}
 8001474:	20000294 	.word	0x20000294

08001478 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	1d38      	adds	r0, r7, #4
 8001482:	e880 0006 	stmia.w	r0, {r1, r2}
 8001486:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8001488:	e012      	b.n	80014b0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	7818      	ldrb	r0, [r3, #0]
 800148e:	78fb      	ldrb	r3, [r7, #3]
 8001490:	1d3a      	adds	r2, r7, #4
 8001492:	ca06      	ldmia	r2, {r1, r2}
 8001494:	f7ff ff68 	bl	8001368 <ssd1306_WriteChar>
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d002      	beq.n	80014aa <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	e008      	b.n	80014bc <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	3301      	adds	r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d1e8      	bne.n	800148a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	781b      	ldrb	r3, [r3, #0]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}

080014c4 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	460a      	mov	r2, r1
 80014ce:	71fb      	strb	r3, [r7, #7]
 80014d0:	4613      	mov	r3, r2
 80014d2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <ssd1306_SetCursor+0x2c>)
 80014da:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80014dc:	79bb      	ldrb	r3, [r7, #6]
 80014de:	b29a      	uxth	r2, r3
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <ssd1306_SetCursor+0x2c>)
 80014e2:	805a      	strh	r2, [r3, #2]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	20000294 	.word	0x20000294

080014f4 <ssd1306_SetContrast>:
  ssd1306_Line(x1,y2,x1,y1,color);

  return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80014fe:	2381      	movs	r3, #129	; 0x81
 8001500:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001502:	7bfb      	ldrb	r3, [r7, #15]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff fde9 	bl	80010dc <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff fde5 	bl	80010dc <ssd1306_WriteCommand>
}
 8001512:	bf00      	nop
 8001514:	3710      	adds	r7, #16
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800152c:	23af      	movs	r3, #175	; 0xaf
 800152e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <ssd1306_SetDisplayOn+0x38>)
 8001532:	2201      	movs	r2, #1
 8001534:	719a      	strb	r2, [r3, #6]
 8001536:	e004      	b.n	8001542 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001538:	23ae      	movs	r3, #174	; 0xae
 800153a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <ssd1306_SetDisplayOn+0x38>)
 800153e:	2200      	movs	r2, #0
 8001540:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8001542:	7bfb      	ldrb	r3, [r7, #15]
 8001544:	4618      	mov	r0, r3
 8001546:	f7ff fdc9 	bl	80010dc <ssd1306_WriteCommand>
}
 800154a:	bf00      	nop
 800154c:	3710      	adds	r7, #16
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	20000294 	.word	0x20000294

08001558 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800155e:	4b14      	ldr	r3, [pc, #80]	; (80015b0 <HAL_MspInit+0x58>)
 8001560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001562:	4a13      	ldr	r2, [pc, #76]	; (80015b0 <HAL_MspInit+0x58>)
 8001564:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001568:	6253      	str	r3, [r2, #36]	; 0x24
 800156a:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <HAL_MspInit+0x58>)
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001576:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <HAL_MspInit+0x58>)
 8001578:	6a1b      	ldr	r3, [r3, #32]
 800157a:	4a0d      	ldr	r2, [pc, #52]	; (80015b0 <HAL_MspInit+0x58>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6213      	str	r3, [r2, #32]
 8001582:	4b0b      	ldr	r3, [pc, #44]	; (80015b0 <HAL_MspInit+0x58>)
 8001584:	6a1b      	ldr	r3, [r3, #32]
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800158e:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <HAL_MspInit+0x58>)
 8001590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001592:	4a07      	ldr	r2, [pc, #28]	; (80015b0 <HAL_MspInit+0x58>)
 8001594:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001598:	6253      	str	r3, [r2, #36]	; 0x24
 800159a:	4b05      	ldr	r3, [pc, #20]	; (80015b0 <HAL_MspInit+0x58>)
 800159c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a6:	bf00      	nop
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	40023800 	.word	0x40023800

080015b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a17      	ldr	r2, [pc, #92]	; (8001630 <HAL_I2C_MspInit+0x7c>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d128      	bne.n	8001628 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <HAL_I2C_MspInit+0x80>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	4a16      	ldr	r2, [pc, #88]	; (8001634 <HAL_I2C_MspInit+0x80>)
 80015dc:	f043 0302 	orr.w	r3, r3, #2
 80015e0:	61d3      	str	r3, [r2, #28]
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <HAL_I2C_MspInit+0x80>)
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	613b      	str	r3, [r7, #16]
 80015ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015f4:	2312      	movs	r3, #18
 80015f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f8:	2300      	movs	r3, #0
 80015fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fc:	2303      	movs	r3, #3
 80015fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001600:	2304      	movs	r3, #4
 8001602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001604:	f107 0314 	add.w	r3, r7, #20
 8001608:	4619      	mov	r1, r3
 800160a:	480b      	ldr	r0, [pc, #44]	; (8001638 <HAL_I2C_MspInit+0x84>)
 800160c:	f000 fa58 	bl	8001ac0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001610:	4b08      	ldr	r3, [pc, #32]	; (8001634 <HAL_I2C_MspInit+0x80>)
 8001612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001614:	4a07      	ldr	r2, [pc, #28]	; (8001634 <HAL_I2C_MspInit+0x80>)
 8001616:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800161a:	6253      	str	r3, [r2, #36]	; 0x24
 800161c:	4b05      	ldr	r3, [pc, #20]	; (8001634 <HAL_I2C_MspInit+0x80>)
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001628:	bf00      	nop
 800162a:	3728      	adds	r7, #40	; 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40005400 	.word	0x40005400
 8001634:	40023800 	.word	0x40023800
 8001638:	40020400 	.word	0x40020400

0800163c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b08a      	sub	sp, #40	; 0x28
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a17      	ldr	r2, [pc, #92]	; (80016b8 <HAL_UART_MspInit+0x7c>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d127      	bne.n	80016ae <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800165e:	4b17      	ldr	r3, [pc, #92]	; (80016bc <HAL_UART_MspInit+0x80>)
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	4a16      	ldr	r2, [pc, #88]	; (80016bc <HAL_UART_MspInit+0x80>)
 8001664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001668:	6213      	str	r3, [r2, #32]
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <HAL_UART_MspInit+0x80>)
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001672:	613b      	str	r3, [r7, #16]
 8001674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <HAL_UART_MspInit+0x80>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	4a10      	ldr	r2, [pc, #64]	; (80016bc <HAL_UART_MspInit+0x80>)
 800167c:	f043 0302 	orr.w	r3, r3, #2
 8001680:	61d3      	str	r3, [r2, #28]
 8001682:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <HAL_UART_MspInit+0x80>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800168e:	23c0      	movs	r3, #192	; 0xc0
 8001690:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001696:	2301      	movs	r3, #1
 8001698:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800169e:	2307      	movs	r3, #7
 80016a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a2:	f107 0314 	add.w	r3, r7, #20
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	; (80016c0 <HAL_UART_MspInit+0x84>)
 80016aa:	f000 fa09 	bl	8001ac0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80016ae:	bf00      	nop
 80016b0:	3728      	adds	r7, #40	; 0x28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40013800 	.word	0x40013800
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020400 	.word	0x40020400

080016c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <NMI_Handler+0x4>

080016ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <HardFault_Handler+0x4>

080016d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <MemManage_Handler+0x4>

080016d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016da:	e7fe      	b.n	80016da <BusFault_Handler+0x4>

080016dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e0:	e7fe      	b.n	80016e0 <UsageFault_Handler+0x4>

080016e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr

080016ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016fa:	b480      	push	{r7}
 80016fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	bc80      	pop	{r7}
 8001704:	4770      	bx	lr

08001706 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001706:	b580      	push	{r7, lr}
 8001708:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800170a:	f000 f8b7 	bl	800187c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800171c:	4a14      	ldr	r2, [pc, #80]	; (8001770 <_sbrk+0x5c>)
 800171e:	4b15      	ldr	r3, [pc, #84]	; (8001774 <_sbrk+0x60>)
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001728:	4b13      	ldr	r3, [pc, #76]	; (8001778 <_sbrk+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d102      	bne.n	8001736 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001730:	4b11      	ldr	r3, [pc, #68]	; (8001778 <_sbrk+0x64>)
 8001732:	4a12      	ldr	r2, [pc, #72]	; (800177c <_sbrk+0x68>)
 8001734:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <_sbrk+0x64>)
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4413      	add	r3, r2
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	429a      	cmp	r2, r3
 8001742:	d207      	bcs.n	8001754 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001744:	f002 faa4 	bl	8003c90 <__errno>
 8001748:	4603      	mov	r3, r0
 800174a:	220c      	movs	r2, #12
 800174c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
 8001752:	e009      	b.n	8001768 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001754:	4b08      	ldr	r3, [pc, #32]	; (8001778 <_sbrk+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175a:	4b07      	ldr	r3, [pc, #28]	; (8001778 <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	4a05      	ldr	r2, [pc, #20]	; (8001778 <_sbrk+0x64>)
 8001764:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001766:	68fb      	ldr	r3, [r7, #12]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3718      	adds	r7, #24
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}
 8001770:	20008000 	.word	0x20008000
 8001774:	00000400 	.word	0x00000400
 8001778:	2000029c 	.word	0x2000029c
 800177c:	20000370 	.word	0x20000370

08001780 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr

0800178c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800178c:	480c      	ldr	r0, [pc, #48]	; (80017c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800178e:	490d      	ldr	r1, [pc, #52]	; (80017c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001790:	4a0d      	ldr	r2, [pc, #52]	; (80017c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001792:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001794:	e002      	b.n	800179c <LoopCopyDataInit>

08001796 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001796:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001798:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800179a:	3304      	adds	r3, #4

0800179c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800179c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800179e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a0:	d3f9      	bcc.n	8001796 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017a2:	4a0a      	ldr	r2, [pc, #40]	; (80017cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017a4:	4c0a      	ldr	r4, [pc, #40]	; (80017d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80017a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017a8:	e001      	b.n	80017ae <LoopFillZerobss>

080017aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ac:	3204      	adds	r2, #4

080017ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b0:	d3fb      	bcc.n	80017aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017b2:	f7ff ffe5 	bl	8001780 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017b6:	f002 fa71 	bl	8003c9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017ba:	f7ff fb57 	bl	8000e6c <main>
  bx lr
 80017be:	4770      	bx	lr
  ldr r0, =_sdata
 80017c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017c4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80017c8:	0800593c 	.word	0x0800593c
  ldr r2, =_sbss
 80017cc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80017d0:	2000036c 	.word	0x2000036c

080017d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017d4:	e7fe      	b.n	80017d4 <ADC1_IRQHandler>

080017d6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e0:	2003      	movs	r0, #3
 80017e2:	f000 f939 	bl	8001a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017e6:	200f      	movs	r0, #15
 80017e8:	f000 f80e 	bl	8001808 <HAL_InitTick>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d002      	beq.n	80017f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	71fb      	strb	r3, [r7, #7]
 80017f6:	e001      	b.n	80017fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017f8:	f7ff feae 	bl	8001558 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017fc:	79fb      	ldrb	r3, [r7, #7]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001810:	2300      	movs	r3, #0
 8001812:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001814:	4b16      	ldr	r3, [pc, #88]	; (8001870 <HAL_InitTick+0x68>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d022      	beq.n	8001862 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800181c:	4b15      	ldr	r3, [pc, #84]	; (8001874 <HAL_InitTick+0x6c>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b13      	ldr	r3, [pc, #76]	; (8001870 <HAL_InitTick+0x68>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001828:	fbb1 f3f3 	udiv	r3, r1, r3
 800182c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001830:	4618      	mov	r0, r3
 8001832:	f000 f938 	bl	8001aa6 <HAL_SYSTICK_Config>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d10f      	bne.n	800185c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b0f      	cmp	r3, #15
 8001840:	d809      	bhi.n	8001856 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001842:	2200      	movs	r2, #0
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	f04f 30ff 	mov.w	r0, #4294967295
 800184a:	f000 f910 	bl	8001a6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800184e:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <HAL_InitTick+0x70>)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	e007      	b.n	8001866 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	73fb      	strb	r3, [r7, #15]
 800185a:	e004      	b.n	8001866 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
 8001860:	e001      	b.n	8001866 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001866:	7bfb      	ldrb	r3, [r7, #15]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20000010 	.word	0x20000010
 8001874:	20000008 	.word	0x20000008
 8001878:	2000000c 	.word	0x2000000c

0800187c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001880:	4b05      	ldr	r3, [pc, #20]	; (8001898 <HAL_IncTick+0x1c>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <HAL_IncTick+0x20>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4413      	add	r3, r2
 800188a:	4a03      	ldr	r2, [pc, #12]	; (8001898 <HAL_IncTick+0x1c>)
 800188c:	6013      	str	r3, [r2, #0]
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	20000358 	.word	0x20000358
 800189c:	20000010 	.word	0x20000010

080018a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return uwTick;
 80018a4:	4b02      	ldr	r3, [pc, #8]	; (80018b0 <HAL_GetTick+0x10>)
 80018a6:	681b      	ldr	r3, [r3, #0]
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bc80      	pop	{r7}
 80018ae:	4770      	bx	lr
 80018b0:	20000358 	.word	0x20000358

080018b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018bc:	f7ff fff0 	bl	80018a0 <HAL_GetTick>
 80018c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d004      	beq.n	80018d8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ce:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_Delay+0x40>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	68fa      	ldr	r2, [r7, #12]
 80018d4:	4413      	add	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80018d8:	bf00      	nop
 80018da:	f7ff ffe1 	bl	80018a0 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d8f7      	bhi.n	80018da <HAL_Delay+0x26>
  {
  }
}
 80018ea:	bf00      	nop
 80018ec:	bf00      	nop
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000010 	.word	0x20000010

080018f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b085      	sub	sp, #20
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001908:	4b0c      	ldr	r3, [pc, #48]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800190e:	68ba      	ldr	r2, [r7, #8]
 8001910:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001914:	4013      	ands	r3, r2
 8001916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001920:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001924:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192a:	4a04      	ldr	r2, [pc, #16]	; (800193c <__NVIC_SetPriorityGrouping+0x44>)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	60d3      	str	r3, [r2, #12]
}
 8001930:	bf00      	nop
 8001932:	3714      	adds	r7, #20
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00

08001940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001944:	4b04      	ldr	r3, [pc, #16]	; (8001958 <__NVIC_GetPriorityGrouping+0x18>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	0a1b      	lsrs	r3, r3, #8
 800194a:	f003 0307 	and.w	r3, r3, #7
}
 800194e:	4618      	mov	r0, r3
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	4603      	mov	r3, r0
 8001964:	6039      	str	r1, [r7, #0]
 8001966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196c:	2b00      	cmp	r3, #0
 800196e:	db0a      	blt.n	8001986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	b2da      	uxtb	r2, r3
 8001974:	490c      	ldr	r1, [pc, #48]	; (80019a8 <__NVIC_SetPriority+0x4c>)
 8001976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197a:	0112      	lsls	r2, r2, #4
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	440b      	add	r3, r1
 8001980:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001984:	e00a      	b.n	800199c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	b2da      	uxtb	r2, r3
 800198a:	4908      	ldr	r1, [pc, #32]	; (80019ac <__NVIC_SetPriority+0x50>)
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	f003 030f 	and.w	r3, r3, #15
 8001992:	3b04      	subs	r3, #4
 8001994:	0112      	lsls	r2, r2, #4
 8001996:	b2d2      	uxtb	r2, r2
 8001998:	440b      	add	r3, r1
 800199a:	761a      	strb	r2, [r3, #24]
}
 800199c:	bf00      	nop
 800199e:	370c      	adds	r7, #12
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	e000e100 	.word	0xe000e100
 80019ac:	e000ed00 	.word	0xe000ed00

080019b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b089      	sub	sp, #36	; 0x24
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	f1c3 0307 	rsb	r3, r3, #7
 80019ca:	2b04      	cmp	r3, #4
 80019cc:	bf28      	it	cs
 80019ce:	2304      	movcs	r3, #4
 80019d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019d2:	69fb      	ldr	r3, [r7, #28]
 80019d4:	3304      	adds	r3, #4
 80019d6:	2b06      	cmp	r3, #6
 80019d8:	d902      	bls.n	80019e0 <NVIC_EncodePriority+0x30>
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3b03      	subs	r3, #3
 80019de:	e000      	b.n	80019e2 <NVIC_EncodePriority+0x32>
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e4:	f04f 32ff 	mov.w	r2, #4294967295
 80019e8:	69bb      	ldr	r3, [r7, #24]
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43da      	mvns	r2, r3
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	401a      	ands	r2, r3
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f8:	f04f 31ff 	mov.w	r1, #4294967295
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001a02:	43d9      	mvns	r1, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a08:	4313      	orrs	r3, r2
         );
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3724      	adds	r7, #36	; 0x24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a24:	d301      	bcc.n	8001a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00f      	b.n	8001a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <SysTick_Config+0x40>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a32:	210f      	movs	r1, #15
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f7ff ff90 	bl	800195c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <SysTick_Config+0x40>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <SysTick_Config+0x40>)
 8001a44:	2207      	movs	r2, #7
 8001a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	e000e010 	.word	0xe000e010

08001a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff49 	bl	80018f8 <__NVIC_SetPriorityGrouping>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a80:	f7ff ff5e 	bl	8001940 <__NVIC_GetPriorityGrouping>
 8001a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	f7ff ff90 	bl	80019b0 <NVIC_EncodePriority>
 8001a90:	4602      	mov	r2, r0
 8001a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff5f 	bl	800195c <__NVIC_SetPriority>
}
 8001a9e:	bf00      	nop
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ffb0 	bl	8001a14 <SysTick_Config>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001ad6:	e154      	b.n	8001d82 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2101      	movs	r1, #1
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	f000 8146 	beq.w	8001d7c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d005      	beq.n	8001b08 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d130      	bne.n	8001b6a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	689b      	ldr	r3, [r3, #8]
 8001b0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	2203      	movs	r2, #3
 8001b14:	fa02 f303 	lsl.w	r3, r2, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	005b      	lsls	r3, r3, #1
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001b3e:	2201      	movs	r2, #1
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43db      	mvns	r3, r3
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	091b      	lsrs	r3, r3, #4
 8001b54:	f003 0201 	and.w	r2, r3, #1
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d017      	beq.n	8001ba6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2203      	movs	r2, #3
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0303 	and.w	r3, r3, #3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d123      	bne.n	8001bfa <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	08da      	lsrs	r2, r3, #3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	3208      	adds	r2, #8
 8001bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bbe:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f003 0307 	and.w	r3, r3, #7
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	220f      	movs	r2, #15
 8001bca:	fa02 f303 	lsl.w	r3, r2, r3
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	691a      	ldr	r2, [r3, #16]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	009b      	lsls	r3, r3, #2
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	08da      	lsrs	r2, r3, #3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	3208      	adds	r2, #8
 8001bf4:	6939      	ldr	r1, [r7, #16]
 8001bf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	2203      	movs	r2, #3
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 0203 	and.w	r2, r3, #3
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	693a      	ldr	r2, [r7, #16]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	693a      	ldr	r2, [r7, #16]
 8001c2c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 80a0 	beq.w	8001d7c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3c:	4b58      	ldr	r3, [pc, #352]	; (8001da0 <HAL_GPIO_Init+0x2e0>)
 8001c3e:	6a1b      	ldr	r3, [r3, #32]
 8001c40:	4a57      	ldr	r2, [pc, #348]	; (8001da0 <HAL_GPIO_Init+0x2e0>)
 8001c42:	f043 0301 	orr.w	r3, r3, #1
 8001c46:	6213      	str	r3, [r2, #32]
 8001c48:	4b55      	ldr	r3, [pc, #340]	; (8001da0 <HAL_GPIO_Init+0x2e0>)
 8001c4a:	6a1b      	ldr	r3, [r3, #32]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	60bb      	str	r3, [r7, #8]
 8001c52:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c54:	4a53      	ldr	r2, [pc, #332]	; (8001da4 <HAL_GPIO_Init+0x2e4>)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c60:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	220f      	movs	r2, #15
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	4013      	ands	r3, r2
 8001c76:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a4b      	ldr	r2, [pc, #300]	; (8001da8 <HAL_GPIO_Init+0x2e8>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d019      	beq.n	8001cb4 <HAL_GPIO_Init+0x1f4>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a4a      	ldr	r2, [pc, #296]	; (8001dac <HAL_GPIO_Init+0x2ec>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d013      	beq.n	8001cb0 <HAL_GPIO_Init+0x1f0>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a49      	ldr	r2, [pc, #292]	; (8001db0 <HAL_GPIO_Init+0x2f0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d00d      	beq.n	8001cac <HAL_GPIO_Init+0x1ec>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	4a48      	ldr	r2, [pc, #288]	; (8001db4 <HAL_GPIO_Init+0x2f4>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d007      	beq.n	8001ca8 <HAL_GPIO_Init+0x1e8>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	4a47      	ldr	r2, [pc, #284]	; (8001db8 <HAL_GPIO_Init+0x2f8>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d101      	bne.n	8001ca4 <HAL_GPIO_Init+0x1e4>
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	e008      	b.n	8001cb6 <HAL_GPIO_Init+0x1f6>
 8001ca4:	2305      	movs	r3, #5
 8001ca6:	e006      	b.n	8001cb6 <HAL_GPIO_Init+0x1f6>
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e004      	b.n	8001cb6 <HAL_GPIO_Init+0x1f6>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e002      	b.n	8001cb6 <HAL_GPIO_Init+0x1f6>
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e000      	b.n	8001cb6 <HAL_GPIO_Init+0x1f6>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	f002 0203 	and.w	r2, r2, #3
 8001cbc:	0092      	lsls	r2, r2, #2
 8001cbe:	4093      	lsls	r3, r2
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001cc6:	4937      	ldr	r1, [pc, #220]	; (8001da4 <HAL_GPIO_Init+0x2e4>)
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	089b      	lsrs	r3, r3, #2
 8001ccc:	3302      	adds	r3, #2
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cd4:	4b39      	ldr	r3, [pc, #228]	; (8001dbc <HAL_GPIO_Init+0x2fc>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	43db      	mvns	r3, r3
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001cf8:	4a30      	ldr	r2, [pc, #192]	; (8001dbc <HAL_GPIO_Init+0x2fc>)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001cfe:	4b2f      	ldr	r3, [pc, #188]	; (8001dbc <HAL_GPIO_Init+0x2fc>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	43db      	mvns	r3, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d22:	4a26      	ldr	r2, [pc, #152]	; (8001dbc <HAL_GPIO_Init+0x2fc>)
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d28:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_GPIO_Init+0x2fc>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4013      	ands	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d003      	beq.n	8001d4c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001d4c:	4a1b      	ldr	r2, [pc, #108]	; (8001dbc <HAL_GPIO_Init+0x2fc>)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d52:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <HAL_GPIO_Init+0x2fc>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	4013      	ands	r3, r2
 8001d60:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d003      	beq.n	8001d76 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001d76:	4a11      	ldr	r2, [pc, #68]	; (8001dbc <HAL_GPIO_Init+0x2fc>)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	f47f aea3 	bne.w	8001ad8 <HAL_GPIO_Init+0x18>
  }
}
 8001d92:	bf00      	nop
 8001d94:	bf00      	nop
 8001d96:	371c      	adds	r7, #28
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	40010000 	.word	0x40010000
 8001da8:	40020000 	.word	0x40020000
 8001dac:	40020400 	.word	0x40020400
 8001db0:	40020800 	.word	0x40020800
 8001db4:	40020c00 	.word	0x40020c00
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40010400 	.word	0x40010400

08001dc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e12b      	b.n	800202a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d106      	bne.n	8001dec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff fbe4 	bl	80015b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2224      	movs	r2, #36	; 0x24
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0201 	bic.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e24:	f001 fc9e 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 8001e28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4a81      	ldr	r2, [pc, #516]	; (8002034 <HAL_I2C_Init+0x274>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d807      	bhi.n	8001e44 <HAL_I2C_Init+0x84>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4a80      	ldr	r2, [pc, #512]	; (8002038 <HAL_I2C_Init+0x278>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	bf94      	ite	ls
 8001e3c:	2301      	movls	r3, #1
 8001e3e:	2300      	movhi	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	e006      	b.n	8001e52 <HAL_I2C_Init+0x92>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4a7d      	ldr	r2, [pc, #500]	; (800203c <HAL_I2C_Init+0x27c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	bf94      	ite	ls
 8001e4c:	2301      	movls	r3, #1
 8001e4e:	2300      	movhi	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e0e7      	b.n	800202a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4a78      	ldr	r2, [pc, #480]	; (8002040 <HAL_I2C_Init+0x280>)
 8001e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e62:	0c9b      	lsrs	r3, r3, #18
 8001e64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	4a6a      	ldr	r2, [pc, #424]	; (8002034 <HAL_I2C_Init+0x274>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d802      	bhi.n	8001e94 <HAL_I2C_Init+0xd4>
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	3301      	adds	r3, #1
 8001e92:	e009      	b.n	8001ea8 <HAL_I2C_Init+0xe8>
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e9a:	fb02 f303 	mul.w	r3, r2, r3
 8001e9e:	4a69      	ldr	r2, [pc, #420]	; (8002044 <HAL_I2C_Init+0x284>)
 8001ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea4:	099b      	lsrs	r3, r3, #6
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	430b      	orrs	r3, r1
 8001eae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001eba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	495c      	ldr	r1, [pc, #368]	; (8002034 <HAL_I2C_Init+0x274>)
 8001ec4:	428b      	cmp	r3, r1
 8001ec6:	d819      	bhi.n	8001efc <HAL_I2C_Init+0x13c>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1e59      	subs	r1, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ed6:	1c59      	adds	r1, r3, #1
 8001ed8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001edc:	400b      	ands	r3, r1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_I2C_Init+0x138>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1e59      	subs	r1, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef6:	e051      	b.n	8001f9c <HAL_I2C_Init+0x1dc>
 8001ef8:	2304      	movs	r3, #4
 8001efa:	e04f      	b.n	8001f9c <HAL_I2C_Init+0x1dc>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d111      	bne.n	8001f28 <HAL_I2C_Init+0x168>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1e58      	subs	r0, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6859      	ldr	r1, [r3, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	440b      	add	r3, r1
 8001f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f16:	3301      	adds	r3, #1
 8001f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf0c      	ite	eq
 8001f20:	2301      	moveq	r3, #1
 8001f22:	2300      	movne	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	e012      	b.n	8001f4e <HAL_I2C_Init+0x18e>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1e58      	subs	r0, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	0099      	lsls	r1, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	bf0c      	ite	eq
 8001f48:	2301      	moveq	r3, #1
 8001f4a:	2300      	movne	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_Init+0x196>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e022      	b.n	8001f9c <HAL_I2C_Init+0x1dc>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10e      	bne.n	8001f7c <HAL_I2C_Init+0x1bc>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1e58      	subs	r0, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6859      	ldr	r1, [r3, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	440b      	add	r3, r1
 8001f6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f7a:	e00f      	b.n	8001f9c <HAL_I2C_Init+0x1dc>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1e58      	subs	r0, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6859      	ldr	r1, [r3, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	0099      	lsls	r1, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f92:	3301      	adds	r3, #1
 8001f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	6809      	ldr	r1, [r1, #0]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69da      	ldr	r2, [r3, #28]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6911      	ldr	r1, [r2, #16]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68d2      	ldr	r2, [r2, #12]
 8001fd6:	4311      	orrs	r1, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0201 	orr.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2220      	movs	r2, #32
 8002016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	000186a0 	.word	0x000186a0
 8002038:	001e847f 	.word	0x001e847f
 800203c:	003d08ff 	.word	0x003d08ff
 8002040:	431bde83 	.word	0x431bde83
 8002044:	10624dd3 	.word	0x10624dd3

08002048 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b088      	sub	sp, #32
 800204c:	af02      	add	r7, sp, #8
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	4608      	mov	r0, r1
 8002052:	4611      	mov	r1, r2
 8002054:	461a      	mov	r2, r3
 8002056:	4603      	mov	r3, r0
 8002058:	817b      	strh	r3, [r7, #10]
 800205a:	460b      	mov	r3, r1
 800205c:	813b      	strh	r3, [r7, #8]
 800205e:	4613      	mov	r3, r2
 8002060:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002062:	f7ff fc1d 	bl	80018a0 <HAL_GetTick>
 8002066:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b20      	cmp	r3, #32
 8002072:	f040 80d9 	bne.w	8002228 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	9300      	str	r3, [sp, #0]
 800207a:	2319      	movs	r3, #25
 800207c:	2201      	movs	r2, #1
 800207e:	496d      	ldr	r1, [pc, #436]	; (8002234 <HAL_I2C_Mem_Write+0x1ec>)
 8002080:	68f8      	ldr	r0, [r7, #12]
 8002082:	f000 fc7f 	bl	8002984 <I2C_WaitOnFlagUntilTimeout>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d001      	beq.n	8002090 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800208c:	2302      	movs	r3, #2
 800208e:	e0cc      	b.n	800222a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002096:	2b01      	cmp	r3, #1
 8002098:	d101      	bne.n	800209e <HAL_I2C_Mem_Write+0x56>
 800209a:	2302      	movs	r3, #2
 800209c:	e0c5      	b.n	800222a <HAL_I2C_Mem_Write+0x1e2>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 0301 	and.w	r3, r3, #1
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d007      	beq.n	80020c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f042 0201 	orr.w	r2, r2, #1
 80020c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2221      	movs	r2, #33	; 0x21
 80020d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2240      	movs	r2, #64	; 0x40
 80020e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a3a      	ldr	r2, [r7, #32]
 80020ee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80020f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4a4d      	ldr	r2, [pc, #308]	; (8002238 <HAL_I2C_Mem_Write+0x1f0>)
 8002104:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002106:	88f8      	ldrh	r0, [r7, #6]
 8002108:	893a      	ldrh	r2, [r7, #8]
 800210a:	8979      	ldrh	r1, [r7, #10]
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	4603      	mov	r3, r0
 8002116:	68f8      	ldr	r0, [r7, #12]
 8002118:	f000 fab6 	bl	8002688 <I2C_RequestMemoryWrite>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d052      	beq.n	80021c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e081      	b.n	800222a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f000 fd00 	bl	8002b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00d      	beq.n	8002152 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	2b04      	cmp	r3, #4
 800213c:	d107      	bne.n	800214e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800214c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e06b      	b.n	800222a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002156:	781a      	ldrb	r2, [r3, #0]
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800216c:	3b01      	subs	r3, #1
 800216e:	b29a      	uxth	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002178:	b29b      	uxth	r3, r3
 800217a:	3b01      	subs	r3, #1
 800217c:	b29a      	uxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b04      	cmp	r3, #4
 800218e:	d11b      	bne.n	80021c8 <HAL_I2C_Mem_Write+0x180>
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002194:	2b00      	cmp	r3, #0
 8002196:	d017      	beq.n	80021c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	781a      	ldrb	r2, [r3, #0]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b2:	3b01      	subs	r3, #1
 80021b4:	b29a      	uxth	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021be:	b29b      	uxth	r3, r3
 80021c0:	3b01      	subs	r3, #1
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1aa      	bne.n	8002126 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021d0:	697a      	ldr	r2, [r7, #20]
 80021d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f000 fcec 	bl	8002bb2 <I2C_WaitOnBTFFlagUntilTimeout>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d00d      	beq.n	80021fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	2b04      	cmp	r3, #4
 80021e6:	d107      	bne.n	80021f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e016      	b.n	800222a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800220a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	e000      	b.n	800222a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002228:	2302      	movs	r3, #2
  }
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	00100002 	.word	0x00100002
 8002238:	ffff0000 	.word	0xffff0000

0800223c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08c      	sub	sp, #48	; 0x30
 8002240:	af02      	add	r7, sp, #8
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	4608      	mov	r0, r1
 8002246:	4611      	mov	r1, r2
 8002248:	461a      	mov	r2, r3
 800224a:	4603      	mov	r3, r0
 800224c:	817b      	strh	r3, [r7, #10]
 800224e:	460b      	mov	r3, r1
 8002250:	813b      	strh	r3, [r7, #8]
 8002252:	4613      	mov	r3, r2
 8002254:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002256:	f7ff fb23 	bl	80018a0 <HAL_GetTick>
 800225a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002262:	b2db      	uxtb	r3, r3
 8002264:	2b20      	cmp	r3, #32
 8002266:	f040 8208 	bne.w	800267a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2319      	movs	r3, #25
 8002270:	2201      	movs	r2, #1
 8002272:	497b      	ldr	r1, [pc, #492]	; (8002460 <HAL_I2C_Mem_Read+0x224>)
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 fb85 	bl	8002984 <I2C_WaitOnFlagUntilTimeout>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002280:	2302      	movs	r3, #2
 8002282:	e1fb      	b.n	800267c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800228a:	2b01      	cmp	r3, #1
 800228c:	d101      	bne.n	8002292 <HAL_I2C_Mem_Read+0x56>
 800228e:	2302      	movs	r3, #2
 8002290:	e1f4      	b.n	800267c <HAL_I2C_Mem_Read+0x440>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0301 	and.w	r3, r3, #1
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d007      	beq.n	80022b8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f042 0201 	orr.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2222      	movs	r2, #34	; 0x22
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2240      	movs	r2, #64	; 0x40
 80022d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80022e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ee:	b29a      	uxth	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4a5b      	ldr	r2, [pc, #364]	; (8002464 <HAL_I2C_Mem_Read+0x228>)
 80022f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80022fa:	88f8      	ldrh	r0, [r7, #6]
 80022fc:	893a      	ldrh	r2, [r7, #8]
 80022fe:	8979      	ldrh	r1, [r7, #10]
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	9301      	str	r3, [sp, #4]
 8002304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002306:	9300      	str	r3, [sp, #0]
 8002308:	4603      	mov	r3, r0
 800230a:	68f8      	ldr	r0, [r7, #12]
 800230c:	f000 fa52 	bl	80027b4 <I2C_RequestMemoryRead>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	e1b0      	b.n	800267c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231e:	2b00      	cmp	r3, #0
 8002320:	d113      	bne.n	800234a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002322:	2300      	movs	r3, #0
 8002324:	623b      	str	r3, [r7, #32]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	623b      	str	r3, [r7, #32]
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	623b      	str	r3, [r7, #32]
 8002336:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	e184      	b.n	8002654 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234e:	2b01      	cmp	r3, #1
 8002350:	d11b      	bne.n	800238a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002360:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	695b      	ldr	r3, [r3, #20]
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	e164      	b.n	8002654 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238e:	2b02      	cmp	r3, #2
 8002390:	d11b      	bne.n	80023ca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023a0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023b2:	2300      	movs	r3, #0
 80023b4:	61bb      	str	r3, [r7, #24]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	695b      	ldr	r3, [r3, #20]
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	699b      	ldr	r3, [r3, #24]
 80023c4:	61bb      	str	r3, [r7, #24]
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	e144      	b.n	8002654 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695b      	ldr	r3, [r3, #20]
 80023d4:	617b      	str	r3, [r7, #20]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	617b      	str	r3, [r7, #20]
 80023de:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80023e0:	e138      	b.n	8002654 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e6:	2b03      	cmp	r3, #3
 80023e8:	f200 80f1 	bhi.w	80025ce <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d123      	bne.n	800243c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80023f8:	68f8      	ldr	r0, [r7, #12]
 80023fa:	f000 fc1b 	bl	8002c34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e139      	b.n	800267c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002430:	b29b      	uxth	r3, r3
 8002432:	3b01      	subs	r3, #1
 8002434:	b29a      	uxth	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	855a      	strh	r2, [r3, #42]	; 0x2a
 800243a:	e10b      	b.n	8002654 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002440:	2b02      	cmp	r3, #2
 8002442:	d14e      	bne.n	80024e2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002446:	9300      	str	r3, [sp, #0]
 8002448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800244a:	2200      	movs	r2, #0
 800244c:	4906      	ldr	r1, [pc, #24]	; (8002468 <HAL_I2C_Mem_Read+0x22c>)
 800244e:	68f8      	ldr	r0, [r7, #12]
 8002450:	f000 fa98 	bl	8002984 <I2C_WaitOnFlagUntilTimeout>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d008      	beq.n	800246c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	e10e      	b.n	800267c <HAL_I2C_Mem_Read+0x440>
 800245e:	bf00      	nop
 8002460:	00100002 	.word	0x00100002
 8002464:	ffff0000 	.word	0xffff0000
 8002468:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	691a      	ldr	r2, [r3, #16]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	1c5a      	adds	r2, r3, #1
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024a4:	b29b      	uxth	r3, r3
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29a      	uxth	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	691a      	ldr	r2, [r3, #16]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	b2d2      	uxtb	r2, r2
 80024ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	1c5a      	adds	r2, r3, #1
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024e0:	e0b8      	b.n	8002654 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80024e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024e8:	2200      	movs	r2, #0
 80024ea:	4966      	ldr	r1, [pc, #408]	; (8002684 <HAL_I2C_Mem_Read+0x448>)
 80024ec:	68f8      	ldr	r0, [r7, #12]
 80024ee:	f000 fa49 	bl	8002984 <I2C_WaitOnFlagUntilTimeout>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80024f8:	2301      	movs	r3, #1
 80024fa:	e0bf      	b.n	800267c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800250a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002516:	b2d2      	uxtb	r2, r2
 8002518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002528:	3b01      	subs	r3, #1
 800252a:	b29a      	uxth	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002544:	2200      	movs	r2, #0
 8002546:	494f      	ldr	r1, [pc, #316]	; (8002684 <HAL_I2C_Mem_Read+0x448>)
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f000 fa1b 	bl	8002984 <I2C_WaitOnFlagUntilTimeout>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	e091      	b.n	800267c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002566:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	691a      	ldr	r2, [r3, #16]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002572:	b2d2      	uxtb	r2, r2
 8002574:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	1c5a      	adds	r2, r3, #1
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002584:	3b01      	subs	r3, #1
 8002586:	b29a      	uxth	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002590:	b29b      	uxth	r3, r3
 8002592:	3b01      	subs	r3, #1
 8002594:	b29a      	uxth	r2, r3
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	b2d2      	uxtb	r2, r2
 80025a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025b6:	3b01      	subs	r3, #1
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	3b01      	subs	r3, #1
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025cc:	e042      	b.n	8002654 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 fb2e 	bl	8002c34 <I2C_WaitOnRXNEFlagUntilTimeout>
 80025d8:	4603      	mov	r3, r0
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e04c      	b.n	800267c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025ec:	b2d2      	uxtb	r2, r2
 80025ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260a:	b29b      	uxth	r3, r3
 800260c:	3b01      	subs	r3, #1
 800260e:	b29a      	uxth	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f003 0304 	and.w	r3, r3, #4
 800261e:	2b04      	cmp	r3, #4
 8002620:	d118      	bne.n	8002654 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800263e:	3b01      	subs	r3, #1
 8002640:	b29a      	uxth	r2, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264a:	b29b      	uxth	r3, r3
 800264c:	3b01      	subs	r3, #1
 800264e:	b29a      	uxth	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002658:	2b00      	cmp	r3, #0
 800265a:	f47f aec2 	bne.w	80023e2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2220      	movs	r2, #32
 8002662:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002676:	2300      	movs	r3, #0
 8002678:	e000      	b.n	800267c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800267a:	2302      	movs	r3, #2
  }
}
 800267c:	4618      	mov	r0, r3
 800267e:	3728      	adds	r7, #40	; 0x28
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	00010004 	.word	0x00010004

08002688 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af02      	add	r7, sp, #8
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	4608      	mov	r0, r1
 8002692:	4611      	mov	r1, r2
 8002694:	461a      	mov	r2, r3
 8002696:	4603      	mov	r3, r0
 8002698:	817b      	strh	r3, [r7, #10]
 800269a:	460b      	mov	r3, r1
 800269c:	813b      	strh	r3, [r7, #8]
 800269e:	4613      	mov	r3, r2
 80026a0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026b0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	9300      	str	r3, [sp, #0]
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f000 f960 	bl	8002984 <I2C_WaitOnFlagUntilTimeout>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00d      	beq.n	80026e6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026d8:	d103      	bne.n	80026e2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e05f      	b.n	80027a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80026e6:	897b      	ldrh	r3, [r7, #10]
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	461a      	mov	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80026f4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	6a3a      	ldr	r2, [r7, #32]
 80026fa:	492d      	ldr	r1, [pc, #180]	; (80027b0 <I2C_RequestMemoryWrite+0x128>)
 80026fc:	68f8      	ldr	r0, [r7, #12]
 80026fe:	f000 f998 	bl	8002a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e04c      	b.n	80027a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	699b      	ldr	r3, [r3, #24]
 800271e:	617b      	str	r3, [r7, #20]
 8002720:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002724:	6a39      	ldr	r1, [r7, #32]
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 fa02 	bl	8002b30 <I2C_WaitOnTXEFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00d      	beq.n	800274e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	2b04      	cmp	r3, #4
 8002738:	d107      	bne.n	800274a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002748:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e02b      	b.n	80027a6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800274e:	88fb      	ldrh	r3, [r7, #6]
 8002750:	2b01      	cmp	r3, #1
 8002752:	d105      	bne.n	8002760 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002754:	893b      	ldrh	r3, [r7, #8]
 8002756:	b2da      	uxtb	r2, r3
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	611a      	str	r2, [r3, #16]
 800275e:	e021      	b.n	80027a4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002760:	893b      	ldrh	r3, [r7, #8]
 8002762:	0a1b      	lsrs	r3, r3, #8
 8002764:	b29b      	uxth	r3, r3
 8002766:	b2da      	uxtb	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800276e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002770:	6a39      	ldr	r1, [r7, #32]
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f000 f9dc 	bl	8002b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00d      	beq.n	800279a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	2b04      	cmp	r3, #4
 8002784:	d107      	bne.n	8002796 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002794:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
 8002798:	e005      	b.n	80027a6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800279a:	893b      	ldrh	r3, [r7, #8]
 800279c:	b2da      	uxtb	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	00010002 	.word	0x00010002

080027b4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b088      	sub	sp, #32
 80027b8:	af02      	add	r7, sp, #8
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	4608      	mov	r0, r1
 80027be:	4611      	mov	r1, r2
 80027c0:	461a      	mov	r2, r3
 80027c2:	4603      	mov	r3, r0
 80027c4:	817b      	strh	r3, [r7, #10]
 80027c6:	460b      	mov	r3, r1
 80027c8:	813b      	strh	r3, [r7, #8]
 80027ca:	4613      	mov	r3, r2
 80027cc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027dc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ec:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	2200      	movs	r2, #0
 80027f6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027fa:	68f8      	ldr	r0, [r7, #12]
 80027fc:	f000 f8c2 	bl	8002984 <I2C_WaitOnFlagUntilTimeout>
 8002800:	4603      	mov	r3, r0
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00d      	beq.n	8002822 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002810:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002814:	d103      	bne.n	800281e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f44f 7200 	mov.w	r2, #512	; 0x200
 800281c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e0aa      	b.n	8002978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002822:	897b      	ldrh	r3, [r7, #10]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	461a      	mov	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002830:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	6a3a      	ldr	r2, [r7, #32]
 8002836:	4952      	ldr	r1, [pc, #328]	; (8002980 <I2C_RequestMemoryRead+0x1cc>)
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f8fa 	bl	8002a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e097      	b.n	8002978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002848:	2300      	movs	r3, #0
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	695b      	ldr	r3, [r3, #20]
 8002852:	617b      	str	r3, [r7, #20]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800285e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002860:	6a39      	ldr	r1, [r7, #32]
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f000 f964 	bl	8002b30 <I2C_WaitOnTXEFlagUntilTimeout>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00d      	beq.n	800288a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	2b04      	cmp	r3, #4
 8002874:	d107      	bne.n	8002886 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002884:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e076      	b.n	8002978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800288a:	88fb      	ldrh	r3, [r7, #6]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d105      	bne.n	800289c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002890:	893b      	ldrh	r3, [r7, #8]
 8002892:	b2da      	uxtb	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	611a      	str	r2, [r3, #16]
 800289a:	e021      	b.n	80028e0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800289c:	893b      	ldrh	r3, [r7, #8]
 800289e:	0a1b      	lsrs	r3, r3, #8
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	b2da      	uxtb	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ac:	6a39      	ldr	r1, [r7, #32]
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 f93e 	bl	8002b30 <I2C_WaitOnTXEFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00d      	beq.n	80028d6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d107      	bne.n	80028d2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028d0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e050      	b.n	8002978 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80028d6:	893b      	ldrh	r3, [r7, #8]
 80028d8:	b2da      	uxtb	r2, r3
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028e2:	6a39      	ldr	r1, [r7, #32]
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 f923 	bl	8002b30 <I2C_WaitOnTXEFlagUntilTimeout>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00d      	beq.n	800290c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f4:	2b04      	cmp	r3, #4
 80028f6:	d107      	bne.n	8002908 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002906:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	e035      	b.n	8002978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800291a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800291c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291e:	9300      	str	r3, [sp, #0]
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	2200      	movs	r2, #0
 8002924:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 f82b 	bl	8002984 <I2C_WaitOnFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00d      	beq.n	8002950 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002942:	d103      	bne.n	800294c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f44f 7200 	mov.w	r2, #512	; 0x200
 800294a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e013      	b.n	8002978 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002950:	897b      	ldrh	r3, [r7, #10]
 8002952:	b2db      	uxtb	r3, r3
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	b2da      	uxtb	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002962:	6a3a      	ldr	r2, [r7, #32]
 8002964:	4906      	ldr	r1, [pc, #24]	; (8002980 <I2C_RequestMemoryRead+0x1cc>)
 8002966:	68f8      	ldr	r0, [r7, #12]
 8002968:	f000 f863 	bl	8002a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	3718      	adds	r7, #24
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	00010002 	.word	0x00010002

08002984 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	603b      	str	r3, [r7, #0]
 8002990:	4613      	mov	r3, r2
 8002992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002994:	e025      	b.n	80029e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800299c:	d021      	beq.n	80029e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800299e:	f7fe ff7f 	bl	80018a0 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d302      	bcc.n	80029b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d116      	bne.n	80029e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2200      	movs	r2, #0
 80029b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2220      	movs	r2, #32
 80029be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	f043 0220 	orr.w	r2, r3, #32
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e023      	b.n	8002a2a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	0c1b      	lsrs	r3, r3, #16
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d10d      	bne.n	8002a08 <I2C_WaitOnFlagUntilTimeout+0x84>
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	695b      	ldr	r3, [r3, #20]
 80029f2:	43da      	mvns	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	4013      	ands	r3, r2
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	bf0c      	ite	eq
 80029fe:	2301      	moveq	r3, #1
 8002a00:	2300      	movne	r3, #0
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	e00c      	b.n	8002a22 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	43da      	mvns	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	4013      	ands	r3, r2
 8002a14:	b29b      	uxth	r3, r3
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	bf0c      	ite	eq
 8002a1a:	2301      	moveq	r3, #1
 8002a1c:	2300      	movne	r3, #0
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	461a      	mov	r2, r3
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d0b6      	beq.n	8002996 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3710      	adds	r7, #16
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}

08002a32 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	60f8      	str	r0, [r7, #12]
 8002a3a:	60b9      	str	r1, [r7, #8]
 8002a3c:	607a      	str	r2, [r7, #4]
 8002a3e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a40:	e051      	b.n	8002ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a4c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a50:	d123      	bne.n	8002a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a60:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002a6a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2220      	movs	r2, #32
 8002a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f043 0204 	orr.w	r2, r3, #4
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2200      	movs	r2, #0
 8002a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e046      	b.n	8002b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aa0:	d021      	beq.n	8002ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa2:	f7fe fefd 	bl	80018a0 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	d302      	bcc.n	8002ab8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d116      	bne.n	8002ae6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f043 0220 	orr.w	r2, r3, #32
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e020      	b.n	8002b28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	0c1b      	lsrs	r3, r3, #16
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d10c      	bne.n	8002b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	43da      	mvns	r2, r3
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	4013      	ands	r3, r2
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	bf14      	ite	ne
 8002b02:	2301      	movne	r3, #1
 8002b04:	2300      	moveq	r3, #0
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	e00b      	b.n	8002b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	699b      	ldr	r3, [r3, #24]
 8002b10:	43da      	mvns	r2, r3
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	4013      	ands	r3, r2
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	bf14      	ite	ne
 8002b1c:	2301      	movne	r3, #1
 8002b1e:	2300      	moveq	r3, #0
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d18d      	bne.n	8002a42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b084      	sub	sp, #16
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b3c:	e02d      	b.n	8002b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 f8ce 	bl	8002ce0 <I2C_IsAcknowledgeFailed>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e02d      	b.n	8002baa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b54:	d021      	beq.n	8002b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b56:	f7fe fea3 	bl	80018a0 <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d302      	bcc.n	8002b6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d116      	bne.n	8002b9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2220      	movs	r2, #32
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	f043 0220 	orr.w	r2, r3, #32
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e007      	b.n	8002baa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba4:	2b80      	cmp	r3, #128	; 0x80
 8002ba6:	d1ca      	bne.n	8002b3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	60f8      	str	r0, [r7, #12]
 8002bba:	60b9      	str	r1, [r7, #8]
 8002bbc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bbe:	e02d      	b.n	8002c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f000 f88d 	bl	8002ce0 <I2C_IsAcknowledgeFailed>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e02d      	b.n	8002c2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd6:	d021      	beq.n	8002c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bd8:	f7fe fe62 	bl	80018a0 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d302      	bcc.n	8002bee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d116      	bne.n	8002c1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	f043 0220 	orr.w	r2, r3, #32
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2200      	movs	r2, #0
 8002c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e007      	b.n	8002c2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	d1ca      	bne.n	8002bc0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002c40:	e042      	b.n	8002cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f003 0310 	and.w	r3, r3, #16
 8002c4c:	2b10      	cmp	r3, #16
 8002c4e:	d119      	bne.n	8002c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f06f 0210 	mvn.w	r2, #16
 8002c58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2220      	movs	r2, #32
 8002c64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e029      	b.n	8002cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c84:	f7fe fe0c 	bl	80018a0 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d302      	bcc.n	8002c9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d116      	bne.n	8002cc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	f043 0220 	orr.w	r2, r3, #32
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e007      	b.n	8002cd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd2:	2b40      	cmp	r3, #64	; 0x40
 8002cd4:	d1b5      	bne.n	8002c42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	695b      	ldr	r3, [r3, #20]
 8002cee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf6:	d11b      	bne.n	8002d30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	f043 0204 	orr.w	r2, r3, #4
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e000      	b.n	8002d32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bc80      	pop	{r7}
 8002d3a:	4770      	bx	lr

08002d3c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d101      	bne.n	8002d4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e31d      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d4e:	4b94      	ldr	r3, [pc, #592]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d58:	4b91      	ldr	r3, [pc, #580]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d60:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d07b      	beq.n	8002e66 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d006      	beq.n	8002d82 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	2b0c      	cmp	r3, #12
 8002d78:	d10f      	bne.n	8002d9a <HAL_RCC_OscConfig+0x5e>
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d80:	d10b      	bne.n	8002d9a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d82:	4b87      	ldr	r3, [pc, #540]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d06a      	beq.n	8002e64 <HAL_RCC_OscConfig+0x128>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d166      	bne.n	8002e64 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e2f7      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d106      	bne.n	8002db0 <HAL_RCC_OscConfig+0x74>
 8002da2:	4b7f      	ldr	r3, [pc, #508]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a7e      	ldr	r2, [pc, #504]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dac:	6013      	str	r3, [r2, #0]
 8002dae:	e02d      	b.n	8002e0c <HAL_RCC_OscConfig+0xd0>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10c      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x96>
 8002db8:	4b79      	ldr	r3, [pc, #484]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a78      	ldr	r2, [pc, #480]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002dbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dc2:	6013      	str	r3, [r2, #0]
 8002dc4:	4b76      	ldr	r3, [pc, #472]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a75      	ldr	r2, [pc, #468]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002dca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	e01c      	b.n	8002e0c <HAL_RCC_OscConfig+0xd0>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b05      	cmp	r3, #5
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0xb8>
 8002dda:	4b71      	ldr	r3, [pc, #452]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a70      	ldr	r2, [pc, #448]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	4b6e      	ldr	r3, [pc, #440]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a6d      	ldr	r2, [pc, #436]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e00b      	b.n	8002e0c <HAL_RCC_OscConfig+0xd0>
 8002df4:	4b6a      	ldr	r3, [pc, #424]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a69      	ldr	r2, [pc, #420]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	4b67      	ldr	r3, [pc, #412]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a66      	ldr	r2, [pc, #408]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d013      	beq.n	8002e3c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7fe fd44 	bl	80018a0 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e1c:	f7fe fd40 	bl	80018a0 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	; 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e2ad      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e2e:	4b5c      	ldr	r3, [pc, #368]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0xe0>
 8002e3a:	e014      	b.n	8002e66 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fd30 	bl	80018a0 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e44:	f7fe fd2c 	bl	80018a0 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	; 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e299      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002e56:	4b52      	ldr	r3, [pc, #328]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0x108>
 8002e62:	e000      	b.n	8002e66 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d05a      	beq.n	8002f28 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d005      	beq.n	8002e84 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	2b0c      	cmp	r3, #12
 8002e7c:	d119      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x176>
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d116      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e84:	4b46      	ldr	r3, [pc, #280]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_RCC_OscConfig+0x160>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d001      	beq.n	8002e9c <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e276      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e9c:	4b40      	ldr	r3, [pc, #256]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	691b      	ldr	r3, [r3, #16]
 8002ea8:	021b      	lsls	r3, r3, #8
 8002eaa:	493d      	ldr	r1, [pc, #244]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eb0:	e03a      	b.n	8002f28 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d020      	beq.n	8002efc <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eba:	4b3a      	ldr	r3, [pc, #232]	; (8002fa4 <HAL_RCC_OscConfig+0x268>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ec0:	f7fe fcee 	bl	80018a0 <HAL_GetTick>
 8002ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002ec6:	e008      	b.n	8002eda <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ec8:	f7fe fcea 	bl	80018a0 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e257      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eda:	4b31      	ldr	r3, [pc, #196]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f0      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ee6:	4b2e      	ldr	r3, [pc, #184]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	021b      	lsls	r3, r3, #8
 8002ef4:	492a      	ldr	r1, [pc, #168]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	604b      	str	r3, [r1, #4]
 8002efa:	e015      	b.n	8002f28 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002efc:	4b29      	ldr	r3, [pc, #164]	; (8002fa4 <HAL_RCC_OscConfig+0x268>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f02:	f7fe fccd 	bl	80018a0 <HAL_GetTick>
 8002f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f0a:	f7fe fcc9 	bl	80018a0 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e236      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002f1c:	4b20      	ldr	r3, [pc, #128]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0302 	and.w	r3, r3, #2
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f0      	bne.n	8002f0a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0310 	and.w	r3, r3, #16
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 80b8 	beq.w	80030a6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d170      	bne.n	800301e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f3c:	4b18      	ldr	r3, [pc, #96]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <HAL_RCC_OscConfig+0x218>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d101      	bne.n	8002f54 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e21a      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6a1a      	ldr	r2, [r3, #32]
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d921      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a1b      	ldr	r3, [r3, #32]
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fc23 	bl	80037b4 <RCC_SetFlashLatencyFromMSIRange>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d001      	beq.n	8002f78 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e208      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f78:	4b09      	ldr	r3, [pc, #36]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a1b      	ldr	r3, [r3, #32]
 8002f84:	4906      	ldr	r1, [pc, #24]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f8a:	4b05      	ldr	r3, [pc, #20]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69db      	ldr	r3, [r3, #28]
 8002f96:	061b      	lsls	r3, r3, #24
 8002f98:	4901      	ldr	r1, [pc, #4]	; (8002fa0 <HAL_RCC_OscConfig+0x264>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
 8002f9e:	e020      	b.n	8002fe2 <HAL_RCC_OscConfig+0x2a6>
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002fa8:	4ba4      	ldr	r3, [pc, #656]	; (800323c <HAL_RCC_OscConfig+0x500>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	49a1      	ldr	r1, [pc, #644]	; (800323c <HAL_RCC_OscConfig+0x500>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fba:	4ba0      	ldr	r3, [pc, #640]	; (800323c <HAL_RCC_OscConfig+0x500>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	69db      	ldr	r3, [r3, #28]
 8002fc6:	061b      	lsls	r3, r3, #24
 8002fc8:	499c      	ldr	r1, [pc, #624]	; (800323c <HAL_RCC_OscConfig+0x500>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fbee 	bl	80037b4 <RCC_SetFlashLatencyFromMSIRange>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d001      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e1d3      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	0b5b      	lsrs	r3, r3, #13
 8002fe8:	3301      	adds	r3, #1
 8002fea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002fee:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002ff2:	4a92      	ldr	r2, [pc, #584]	; (800323c <HAL_RCC_OscConfig+0x500>)
 8002ff4:	6892      	ldr	r2, [r2, #8]
 8002ff6:	0912      	lsrs	r2, r2, #4
 8002ff8:	f002 020f 	and.w	r2, r2, #15
 8002ffc:	4990      	ldr	r1, [pc, #576]	; (8003240 <HAL_RCC_OscConfig+0x504>)
 8002ffe:	5c8a      	ldrb	r2, [r1, r2]
 8003000:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003002:	4a90      	ldr	r2, [pc, #576]	; (8003244 <HAL_RCC_OscConfig+0x508>)
 8003004:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003006:	4b90      	ldr	r3, [pc, #576]	; (8003248 <HAL_RCC_OscConfig+0x50c>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7fe fbfc 	bl	8001808 <HAL_InitTick>
 8003010:	4603      	mov	r3, r0
 8003012:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003014:	7bfb      	ldrb	r3, [r7, #15]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d045      	beq.n	80030a6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	e1b5      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d029      	beq.n	800307a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003026:	4b89      	ldr	r3, [pc, #548]	; (800324c <HAL_RCC_OscConfig+0x510>)
 8003028:	2201      	movs	r2, #1
 800302a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302c:	f7fe fc38 	bl	80018a0 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003032:	e008      	b.n	8003046 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003034:	f7fe fc34 	bl	80018a0 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d901      	bls.n	8003046 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e1a1      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003046:	4b7d      	ldr	r3, [pc, #500]	; (800323c <HAL_RCC_OscConfig+0x500>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800304e:	2b00      	cmp	r3, #0
 8003050:	d0f0      	beq.n	8003034 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003052:	4b7a      	ldr	r3, [pc, #488]	; (800323c <HAL_RCC_OscConfig+0x500>)
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a1b      	ldr	r3, [r3, #32]
 800305e:	4977      	ldr	r1, [pc, #476]	; (800323c <HAL_RCC_OscConfig+0x500>)
 8003060:	4313      	orrs	r3, r2
 8003062:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003064:	4b75      	ldr	r3, [pc, #468]	; (800323c <HAL_RCC_OscConfig+0x500>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	69db      	ldr	r3, [r3, #28]
 8003070:	061b      	lsls	r3, r3, #24
 8003072:	4972      	ldr	r1, [pc, #456]	; (800323c <HAL_RCC_OscConfig+0x500>)
 8003074:	4313      	orrs	r3, r2
 8003076:	604b      	str	r3, [r1, #4]
 8003078:	e015      	b.n	80030a6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800307a:	4b74      	ldr	r3, [pc, #464]	; (800324c <HAL_RCC_OscConfig+0x510>)
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003080:	f7fe fc0e 	bl	80018a0 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003088:	f7fe fc0a 	bl	80018a0 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e177      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800309a:	4b68      	ldr	r3, [pc, #416]	; (800323c <HAL_RCC_OscConfig+0x500>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d030      	beq.n	8003114 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d016      	beq.n	80030e8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ba:	4b65      	ldr	r3, [pc, #404]	; (8003250 <HAL_RCC_OscConfig+0x514>)
 80030bc:	2201      	movs	r2, #1
 80030be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c0:	f7fe fbee 	bl	80018a0 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030c8:	f7fe fbea 	bl	80018a0 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e157      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80030da:	4b58      	ldr	r3, [pc, #352]	; (800323c <HAL_RCC_OscConfig+0x500>)
 80030dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x38c>
 80030e6:	e015      	b.n	8003114 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030e8:	4b59      	ldr	r3, [pc, #356]	; (8003250 <HAL_RCC_OscConfig+0x514>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030ee:	f7fe fbd7 	bl	80018a0 <HAL_GetTick>
 80030f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80030f4:	e008      	b.n	8003108 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030f6:	f7fe fbd3 	bl	80018a0 <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d901      	bls.n	8003108 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	e140      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003108:	4b4c      	ldr	r3, [pc, #304]	; (800323c <HAL_RCC_OscConfig+0x500>)
 800310a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800310c:	f003 0302 	and.w	r3, r3, #2
 8003110:	2b00      	cmp	r3, #0
 8003112:	d1f0      	bne.n	80030f6 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0304 	and.w	r3, r3, #4
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 80b5 	beq.w	800328c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003122:	2300      	movs	r3, #0
 8003124:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003126:	4b45      	ldr	r3, [pc, #276]	; (800323c <HAL_RCC_OscConfig+0x500>)
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d10d      	bne.n	800314e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003132:	4b42      	ldr	r3, [pc, #264]	; (800323c <HAL_RCC_OscConfig+0x500>)
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	4a41      	ldr	r2, [pc, #260]	; (800323c <HAL_RCC_OscConfig+0x500>)
 8003138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800313c:	6253      	str	r3, [r2, #36]	; 0x24
 800313e:	4b3f      	ldr	r3, [pc, #252]	; (800323c <HAL_RCC_OscConfig+0x500>)
 8003140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003146:	60bb      	str	r3, [r7, #8]
 8003148:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800314a:	2301      	movs	r3, #1
 800314c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314e:	4b41      	ldr	r3, [pc, #260]	; (8003254 <HAL_RCC_OscConfig+0x518>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003156:	2b00      	cmp	r3, #0
 8003158:	d118      	bne.n	800318c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800315a:	4b3e      	ldr	r3, [pc, #248]	; (8003254 <HAL_RCC_OscConfig+0x518>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a3d      	ldr	r2, [pc, #244]	; (8003254 <HAL_RCC_OscConfig+0x518>)
 8003160:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003164:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003166:	f7fe fb9b 	bl	80018a0 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800316e:	f7fe fb97 	bl	80018a0 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b64      	cmp	r3, #100	; 0x64
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e104      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003180:	4b34      	ldr	r3, [pc, #208]	; (8003254 <HAL_RCC_OscConfig+0x518>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b01      	cmp	r3, #1
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_OscConfig+0x466>
 8003194:	4b29      	ldr	r3, [pc, #164]	; (800323c <HAL_RCC_OscConfig+0x500>)
 8003196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003198:	4a28      	ldr	r2, [pc, #160]	; (800323c <HAL_RCC_OscConfig+0x500>)
 800319a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800319e:	6353      	str	r3, [r2, #52]	; 0x34
 80031a0:	e02d      	b.n	80031fe <HAL_RCC_OscConfig+0x4c2>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCC_OscConfig+0x488>
 80031aa:	4b24      	ldr	r3, [pc, #144]	; (800323c <HAL_RCC_OscConfig+0x500>)
 80031ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ae:	4a23      	ldr	r2, [pc, #140]	; (800323c <HAL_RCC_OscConfig+0x500>)
 80031b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031b4:	6353      	str	r3, [r2, #52]	; 0x34
 80031b6:	4b21      	ldr	r3, [pc, #132]	; (800323c <HAL_RCC_OscConfig+0x500>)
 80031b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ba:	4a20      	ldr	r2, [pc, #128]	; (800323c <HAL_RCC_OscConfig+0x500>)
 80031bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031c0:	6353      	str	r3, [r2, #52]	; 0x34
 80031c2:	e01c      	b.n	80031fe <HAL_RCC_OscConfig+0x4c2>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	2b05      	cmp	r3, #5
 80031ca:	d10c      	bne.n	80031e6 <HAL_RCC_OscConfig+0x4aa>
 80031cc:	4b1b      	ldr	r3, [pc, #108]	; (800323c <HAL_RCC_OscConfig+0x500>)
 80031ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d0:	4a1a      	ldr	r2, [pc, #104]	; (800323c <HAL_RCC_OscConfig+0x500>)
 80031d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031d6:	6353      	str	r3, [r2, #52]	; 0x34
 80031d8:	4b18      	ldr	r3, [pc, #96]	; (800323c <HAL_RCC_OscConfig+0x500>)
 80031da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031dc:	4a17      	ldr	r2, [pc, #92]	; (800323c <HAL_RCC_OscConfig+0x500>)
 80031de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031e2:	6353      	str	r3, [r2, #52]	; 0x34
 80031e4:	e00b      	b.n	80031fe <HAL_RCC_OscConfig+0x4c2>
 80031e6:	4b15      	ldr	r3, [pc, #84]	; (800323c <HAL_RCC_OscConfig+0x500>)
 80031e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031ea:	4a14      	ldr	r2, [pc, #80]	; (800323c <HAL_RCC_OscConfig+0x500>)
 80031ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031f0:	6353      	str	r3, [r2, #52]	; 0x34
 80031f2:	4b12      	ldr	r3, [pc, #72]	; (800323c <HAL_RCC_OscConfig+0x500>)
 80031f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031f6:	4a11      	ldr	r2, [pc, #68]	; (800323c <HAL_RCC_OscConfig+0x500>)
 80031f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80031fc:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d015      	beq.n	8003232 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003206:	f7fe fb4b 	bl	80018a0 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800320c:	e00a      	b.n	8003224 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800320e:	f7fe fb47 	bl	80018a0 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	f241 3288 	movw	r2, #5000	; 0x1388
 800321c:	4293      	cmp	r3, r2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e0b2      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <HAL_RCC_OscConfig+0x500>)
 8003226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003228:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800322c:	2b00      	cmp	r3, #0
 800322e:	d0ee      	beq.n	800320e <HAL_RCC_OscConfig+0x4d2>
 8003230:	e023      	b.n	800327a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003232:	f7fe fb35 	bl	80018a0 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003238:	e019      	b.n	800326e <HAL_RCC_OscConfig+0x532>
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800
 8003240:	080058e0 	.word	0x080058e0
 8003244:	20000008 	.word	0x20000008
 8003248:	2000000c 	.word	0x2000000c
 800324c:	42470020 	.word	0x42470020
 8003250:	42470680 	.word	0x42470680
 8003254:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003258:	f7fe fb22 	bl	80018a0 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	f241 3288 	movw	r2, #5000	; 0x1388
 8003266:	4293      	cmp	r3, r2
 8003268:	d901      	bls.n	800326e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800326a:	2303      	movs	r3, #3
 800326c:	e08d      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800326e:	4b49      	ldr	r3, [pc, #292]	; (8003394 <HAL_RCC_OscConfig+0x658>)
 8003270:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003272:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1ee      	bne.n	8003258 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800327a:	7ffb      	ldrb	r3, [r7, #31]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d105      	bne.n	800328c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003280:	4b44      	ldr	r3, [pc, #272]	; (8003394 <HAL_RCC_OscConfig+0x658>)
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	4a43      	ldr	r2, [pc, #268]	; (8003394 <HAL_RCC_OscConfig+0x658>)
 8003286:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800328a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003290:	2b00      	cmp	r3, #0
 8003292:	d079      	beq.n	8003388 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	2b0c      	cmp	r3, #12
 8003298:	d056      	beq.n	8003348 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329e:	2b02      	cmp	r3, #2
 80032a0:	d13b      	bne.n	800331a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a2:	4b3d      	ldr	r3, [pc, #244]	; (8003398 <HAL_RCC_OscConfig+0x65c>)
 80032a4:	2200      	movs	r2, #0
 80032a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a8:	f7fe fafa 	bl	80018a0 <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032b0:	f7fe faf6 	bl	80018a0 <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e063      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80032c2:	4b34      	ldr	r3, [pc, #208]	; (8003394 <HAL_RCC_OscConfig+0x658>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d1f0      	bne.n	80032b0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032ce:	4b31      	ldr	r3, [pc, #196]	; (8003394 <HAL_RCC_OscConfig+0x658>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032de:	4319      	orrs	r1, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	430b      	orrs	r3, r1
 80032e6:	492b      	ldr	r1, [pc, #172]	; (8003394 <HAL_RCC_OscConfig+0x658>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ec:	4b2a      	ldr	r3, [pc, #168]	; (8003398 <HAL_RCC_OscConfig+0x65c>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032f2:	f7fe fad5 	bl	80018a0 <HAL_GetTick>
 80032f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80032f8:	e008      	b.n	800330c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032fa:	f7fe fad1 	bl	80018a0 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	2b02      	cmp	r3, #2
 8003306:	d901      	bls.n	800330c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003308:	2303      	movs	r3, #3
 800330a:	e03e      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800330c:	4b21      	ldr	r3, [pc, #132]	; (8003394 <HAL_RCC_OscConfig+0x658>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d0f0      	beq.n	80032fa <HAL_RCC_OscConfig+0x5be>
 8003318:	e036      	b.n	8003388 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331a:	4b1f      	ldr	r3, [pc, #124]	; (8003398 <HAL_RCC_OscConfig+0x65c>)
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7fe fabe 	bl	80018a0 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003328:	f7fe faba 	bl	80018a0 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e027      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800333a:	4b16      	ldr	r3, [pc, #88]	; (8003394 <HAL_RCC_OscConfig+0x658>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x5ec>
 8003346:	e01f      	b.n	8003388 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e01a      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003354:	4b0f      	ldr	r3, [pc, #60]	; (8003394 <HAL_RCC_OscConfig+0x658>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003364:	429a      	cmp	r2, r3
 8003366:	d10d      	bne.n	8003384 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003372:	429a      	cmp	r2, r3
 8003374:	d106      	bne.n	8003384 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d001      	beq.n	8003388 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3720      	adds	r7, #32
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	40023800 	.word	0x40023800
 8003398:	42470060 	.word	0x42470060

0800339c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d101      	bne.n	80033b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e11a      	b.n	80035e6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033b0:	4b8f      	ldr	r3, [pc, #572]	; (80035f0 <HAL_RCC_ClockConfig+0x254>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0301 	and.w	r3, r3, #1
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d919      	bls.n	80033f2 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d105      	bne.n	80033d0 <HAL_RCC_ClockConfig+0x34>
 80033c4:	4b8a      	ldr	r3, [pc, #552]	; (80035f0 <HAL_RCC_ClockConfig+0x254>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a89      	ldr	r2, [pc, #548]	; (80035f0 <HAL_RCC_ClockConfig+0x254>)
 80033ca:	f043 0304 	orr.w	r3, r3, #4
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b87      	ldr	r3, [pc, #540]	; (80035f0 <HAL_RCC_ClockConfig+0x254>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f023 0201 	bic.w	r2, r3, #1
 80033d8:	4985      	ldr	r1, [pc, #532]	; (80035f0 <HAL_RCC_ClockConfig+0x254>)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	4313      	orrs	r3, r2
 80033de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033e0:	4b83      	ldr	r3, [pc, #524]	; (80035f0 <HAL_RCC_ClockConfig+0x254>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d001      	beq.n	80033f2 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e0f9      	b.n	80035e6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d008      	beq.n	8003410 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033fe:	4b7d      	ldr	r3, [pc, #500]	; (80035f4 <HAL_RCC_ClockConfig+0x258>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689b      	ldr	r3, [r3, #8]
 800340a:	497a      	ldr	r1, [pc, #488]	; (80035f4 <HAL_RCC_ClockConfig+0x258>)
 800340c:	4313      	orrs	r3, r2
 800340e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0301 	and.w	r3, r3, #1
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 808e 	beq.w	800353a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b02      	cmp	r3, #2
 8003424:	d107      	bne.n	8003436 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003426:	4b73      	ldr	r3, [pc, #460]	; (80035f4 <HAL_RCC_ClockConfig+0x258>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d121      	bne.n	8003476 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e0d7      	b.n	80035e6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b03      	cmp	r3, #3
 800343c:	d107      	bne.n	800344e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800343e:	4b6d      	ldr	r3, [pc, #436]	; (80035f4 <HAL_RCC_ClockConfig+0x258>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d115      	bne.n	8003476 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e0cb      	b.n	80035e6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d107      	bne.n	8003466 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003456:	4b67      	ldr	r3, [pc, #412]	; (80035f4 <HAL_RCC_ClockConfig+0x258>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e0bf      	b.n	80035e6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003466:	4b63      	ldr	r3, [pc, #396]	; (80035f4 <HAL_RCC_ClockConfig+0x258>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e0b7      	b.n	80035e6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003476:	4b5f      	ldr	r3, [pc, #380]	; (80035f4 <HAL_RCC_ClockConfig+0x258>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f023 0203 	bic.w	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	495c      	ldr	r1, [pc, #368]	; (80035f4 <HAL_RCC_ClockConfig+0x258>)
 8003484:	4313      	orrs	r3, r2
 8003486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003488:	f7fe fa0a 	bl	80018a0 <HAL_GetTick>
 800348c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b02      	cmp	r3, #2
 8003494:	d112      	bne.n	80034bc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003496:	e00a      	b.n	80034ae <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003498:	f7fe fa02 	bl	80018a0 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e09b      	b.n	80035e6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80034ae:	4b51      	ldr	r3, [pc, #324]	; (80035f4 <HAL_RCC_ClockConfig+0x258>)
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	f003 030c 	and.w	r3, r3, #12
 80034b6:	2b08      	cmp	r3, #8
 80034b8:	d1ee      	bne.n	8003498 <HAL_RCC_ClockConfig+0xfc>
 80034ba:	e03e      	b.n	800353a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b03      	cmp	r3, #3
 80034c2:	d112      	bne.n	80034ea <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034c4:	e00a      	b.n	80034dc <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034c6:	f7fe f9eb 	bl	80018a0 <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e084      	b.n	80035e6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034dc:	4b45      	ldr	r3, [pc, #276]	; (80035f4 <HAL_RCC_ClockConfig+0x258>)
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	f003 030c 	and.w	r3, r3, #12
 80034e4:	2b0c      	cmp	r3, #12
 80034e6:	d1ee      	bne.n	80034c6 <HAL_RCC_ClockConfig+0x12a>
 80034e8:	e027      	b.n	800353a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d11d      	bne.n	800352e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80034f2:	e00a      	b.n	800350a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034f4:	f7fe f9d4 	bl	80018a0 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003502:	4293      	cmp	r3, r2
 8003504:	d901      	bls.n	800350a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003506:	2303      	movs	r3, #3
 8003508:	e06d      	b.n	80035e6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800350a:	4b3a      	ldr	r3, [pc, #232]	; (80035f4 <HAL_RCC_ClockConfig+0x258>)
 800350c:	689b      	ldr	r3, [r3, #8]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b04      	cmp	r3, #4
 8003514:	d1ee      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x158>
 8003516:	e010      	b.n	800353a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003518:	f7fe f9c2 	bl	80018a0 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	; 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e05b      	b.n	80035e6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800352e:	4b31      	ldr	r3, [pc, #196]	; (80035f4 <HAL_RCC_ClockConfig+0x258>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 030c 	and.w	r3, r3, #12
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1ee      	bne.n	8003518 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800353a:	4b2d      	ldr	r3, [pc, #180]	; (80035f0 <HAL_RCC_ClockConfig+0x254>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	683a      	ldr	r2, [r7, #0]
 8003544:	429a      	cmp	r2, r3
 8003546:	d219      	bcs.n	800357c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d105      	bne.n	800355a <HAL_RCC_ClockConfig+0x1be>
 800354e:	4b28      	ldr	r3, [pc, #160]	; (80035f0 <HAL_RCC_ClockConfig+0x254>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a27      	ldr	r2, [pc, #156]	; (80035f0 <HAL_RCC_ClockConfig+0x254>)
 8003554:	f043 0304 	orr.w	r3, r3, #4
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	4b25      	ldr	r3, [pc, #148]	; (80035f0 <HAL_RCC_ClockConfig+0x254>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 0201 	bic.w	r2, r3, #1
 8003562:	4923      	ldr	r1, [pc, #140]	; (80035f0 <HAL_RCC_ClockConfig+0x254>)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b21      	ldr	r3, [pc, #132]	; (80035f0 <HAL_RCC_ClockConfig+0x254>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e034      	b.n	80035e6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0304 	and.w	r3, r3, #4
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003588:	4b1a      	ldr	r3, [pc, #104]	; (80035f4 <HAL_RCC_ClockConfig+0x258>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	4917      	ldr	r1, [pc, #92]	; (80035f4 <HAL_RCC_ClockConfig+0x258>)
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0308 	and.w	r3, r3, #8
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d009      	beq.n	80035ba <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035a6:	4b13      	ldr	r3, [pc, #76]	; (80035f4 <HAL_RCC_ClockConfig+0x258>)
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	691b      	ldr	r3, [r3, #16]
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	490f      	ldr	r1, [pc, #60]	; (80035f4 <HAL_RCC_ClockConfig+0x258>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035ba:	f000 f823 	bl	8003604 <HAL_RCC_GetSysClockFreq>
 80035be:	4602      	mov	r2, r0
 80035c0:	4b0c      	ldr	r3, [pc, #48]	; (80035f4 <HAL_RCC_ClockConfig+0x258>)
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	091b      	lsrs	r3, r3, #4
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	490b      	ldr	r1, [pc, #44]	; (80035f8 <HAL_RCC_ClockConfig+0x25c>)
 80035cc:	5ccb      	ldrb	r3, [r1, r3]
 80035ce:	fa22 f303 	lsr.w	r3, r2, r3
 80035d2:	4a0a      	ldr	r2, [pc, #40]	; (80035fc <HAL_RCC_ClockConfig+0x260>)
 80035d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80035d6:	4b0a      	ldr	r3, [pc, #40]	; (8003600 <HAL_RCC_ClockConfig+0x264>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7fe f914 	bl	8001808 <HAL_InitTick>
 80035e0:	4603      	mov	r3, r0
 80035e2:	72fb      	strb	r3, [r7, #11]

  return status;
 80035e4:	7afb      	ldrb	r3, [r7, #11]
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	40023c00 	.word	0x40023c00
 80035f4:	40023800 	.word	0x40023800
 80035f8:	080058e0 	.word	0x080058e0
 80035fc:	20000008 	.word	0x20000008
 8003600:	2000000c 	.word	0x2000000c

08003604 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003604:	b5b0      	push	{r4, r5, r7, lr}
 8003606:	b086      	sub	sp, #24
 8003608:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 800360a:	4b4d      	ldr	r3, [pc, #308]	; (8003740 <HAL_RCC_GetSysClockFreq+0x13c>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b0c      	cmp	r3, #12
 8003618:	d00c      	beq.n	8003634 <HAL_RCC_GetSysClockFreq+0x30>
 800361a:	2b0c      	cmp	r3, #12
 800361c:	d87c      	bhi.n	8003718 <HAL_RCC_GetSysClockFreq+0x114>
 800361e:	2b04      	cmp	r3, #4
 8003620:	d002      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0x24>
 8003622:	2b08      	cmp	r3, #8
 8003624:	d003      	beq.n	800362e <HAL_RCC_GetSysClockFreq+0x2a>
 8003626:	e077      	b.n	8003718 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003628:	4b46      	ldr	r3, [pc, #280]	; (8003744 <HAL_RCC_GetSysClockFreq+0x140>)
 800362a:	613b      	str	r3, [r7, #16]
      break;
 800362c:	e082      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800362e:	4b46      	ldr	r3, [pc, #280]	; (8003748 <HAL_RCC_GetSysClockFreq+0x144>)
 8003630:	613b      	str	r3, [r7, #16]
      break;
 8003632:	e07f      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	0c9b      	lsrs	r3, r3, #18
 8003638:	f003 030f 	and.w	r3, r3, #15
 800363c:	4a43      	ldr	r2, [pc, #268]	; (800374c <HAL_RCC_GetSysClockFreq+0x148>)
 800363e:	5cd3      	ldrb	r3, [r2, r3]
 8003640:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	0d9b      	lsrs	r3, r3, #22
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	3301      	adds	r3, #1
 800364c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800364e:	4b3c      	ldr	r3, [pc, #240]	; (8003740 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d01a      	beq.n	8003690 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	461a      	mov	r2, r3
 800365e:	f04f 0300 	mov.w	r3, #0
 8003662:	4939      	ldr	r1, [pc, #228]	; (8003748 <HAL_RCC_GetSysClockFreq+0x144>)
 8003664:	fb01 f003 	mul.w	r0, r1, r3
 8003668:	2100      	movs	r1, #0
 800366a:	fb01 f102 	mul.w	r1, r1, r2
 800366e:	1844      	adds	r4, r0, r1
 8003670:	4935      	ldr	r1, [pc, #212]	; (8003748 <HAL_RCC_GetSysClockFreq+0x144>)
 8003672:	fba2 0101 	umull	r0, r1, r2, r1
 8003676:	1863      	adds	r3, r4, r1
 8003678:	4619      	mov	r1, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	461a      	mov	r2, r3
 800367e:	f04f 0300 	mov.w	r3, #0
 8003682:	f7fd fa77 	bl	8000b74 <__aeabi_uldivmod>
 8003686:	4602      	mov	r2, r0
 8003688:	460b      	mov	r3, r1
 800368a:	4613      	mov	r3, r2
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	e040      	b.n	8003712 <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	461c      	mov	r4, r3
 8003694:	f04f 0500 	mov.w	r5, #0
 8003698:	4620      	mov	r0, r4
 800369a:	4629      	mov	r1, r5
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	f04f 0300 	mov.w	r3, #0
 80036a4:	014b      	lsls	r3, r1, #5
 80036a6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036aa:	0142      	lsls	r2, r0, #5
 80036ac:	4610      	mov	r0, r2
 80036ae:	4619      	mov	r1, r3
 80036b0:	1b00      	subs	r0, r0, r4
 80036b2:	eb61 0105 	sbc.w	r1, r1, r5
 80036b6:	f04f 0200 	mov.w	r2, #0
 80036ba:	f04f 0300 	mov.w	r3, #0
 80036be:	018b      	lsls	r3, r1, #6
 80036c0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036c4:	0182      	lsls	r2, r0, #6
 80036c6:	1a12      	subs	r2, r2, r0
 80036c8:	eb63 0301 	sbc.w	r3, r3, r1
 80036cc:	f04f 0000 	mov.w	r0, #0
 80036d0:	f04f 0100 	mov.w	r1, #0
 80036d4:	00d9      	lsls	r1, r3, #3
 80036d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036da:	00d0      	lsls	r0, r2, #3
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	1912      	adds	r2, r2, r4
 80036e2:	eb45 0303 	adc.w	r3, r5, r3
 80036e6:	f04f 0000 	mov.w	r0, #0
 80036ea:	f04f 0100 	mov.w	r1, #0
 80036ee:	0299      	lsls	r1, r3, #10
 80036f0:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80036f4:	0290      	lsls	r0, r2, #10
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	4610      	mov	r0, r2
 80036fc:	4619      	mov	r1, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	461a      	mov	r2, r3
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	f7fd fa35 	bl	8000b74 <__aeabi_uldivmod>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4613      	mov	r3, r2
 8003710:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	613b      	str	r3, [r7, #16]
      break;
 8003716:	e00d      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003718:	4b09      	ldr	r3, [pc, #36]	; (8003740 <HAL_RCC_GetSysClockFreq+0x13c>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	0b5b      	lsrs	r3, r3, #13
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	3301      	adds	r3, #1
 8003728:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	613b      	str	r3, [r7, #16]
      break;
 8003732:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003734:	693b      	ldr	r3, [r7, #16]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bdb0      	pop	{r4, r5, r7, pc}
 800373e:	bf00      	nop
 8003740:	40023800 	.word	0x40023800
 8003744:	00f42400 	.word	0x00f42400
 8003748:	016e3600 	.word	0x016e3600
 800374c:	080058d4 	.word	0x080058d4

08003750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003754:	4b02      	ldr	r3, [pc, #8]	; (8003760 <HAL_RCC_GetHCLKFreq+0x10>)
 8003756:	681b      	ldr	r3, [r3, #0]
}
 8003758:	4618      	mov	r0, r3
 800375a:	46bd      	mov	sp, r7
 800375c:	bc80      	pop	{r7}
 800375e:	4770      	bx	lr
 8003760:	20000008 	.word	0x20000008

08003764 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003768:	f7ff fff2 	bl	8003750 <HAL_RCC_GetHCLKFreq>
 800376c:	4602      	mov	r2, r0
 800376e:	4b05      	ldr	r3, [pc, #20]	; (8003784 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	0a1b      	lsrs	r3, r3, #8
 8003774:	f003 0307 	and.w	r3, r3, #7
 8003778:	4903      	ldr	r1, [pc, #12]	; (8003788 <HAL_RCC_GetPCLK1Freq+0x24>)
 800377a:	5ccb      	ldrb	r3, [r1, r3]
 800377c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003780:	4618      	mov	r0, r3
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40023800 	.word	0x40023800
 8003788:	080058f0 	.word	0x080058f0

0800378c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003790:	f7ff ffde 	bl	8003750 <HAL_RCC_GetHCLKFreq>
 8003794:	4602      	mov	r2, r0
 8003796:	4b05      	ldr	r3, [pc, #20]	; (80037ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	0adb      	lsrs	r3, r3, #11
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	4903      	ldr	r1, [pc, #12]	; (80037b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037a2:	5ccb      	ldrb	r3, [r1, r3]
 80037a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	40023800 	.word	0x40023800
 80037b0:	080058f0 	.word	0x080058f0

080037b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b087      	sub	sp, #28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80037bc:	2300      	movs	r3, #0
 80037be:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80037c0:	4b29      	ldr	r3, [pc, #164]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d12c      	bne.n	8003826 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80037cc:	4b26      	ldr	r3, [pc, #152]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80037d8:	4b24      	ldr	r3, [pc, #144]	; (800386c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80037e0:	617b      	str	r3, [r7, #20]
 80037e2:	e016      	b.n	8003812 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e4:	4b20      	ldr	r3, [pc, #128]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	4a1f      	ldr	r2, [pc, #124]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ee:	6253      	str	r3, [r2, #36]	; 0x24
 80037f0:	4b1d      	ldr	r3, [pc, #116]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80037f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037f8:	60fb      	str	r3, [r7, #12]
 80037fa:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80037fc:	4b1b      	ldr	r3, [pc, #108]	; (800386c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003804:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003806:	4b18      	ldr	r3, [pc, #96]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800380a:	4a17      	ldr	r2, [pc, #92]	; (8003868 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800380c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003810:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003818:	d105      	bne.n	8003826 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003820:	d101      	bne.n	8003826 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003822:	2301      	movs	r3, #1
 8003824:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d105      	bne.n	8003838 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800382c:	4b10      	ldr	r3, [pc, #64]	; (8003870 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a0f      	ldr	r2, [pc, #60]	; (8003870 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003832:	f043 0304 	orr.w	r3, r3, #4
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	4b0d      	ldr	r3, [pc, #52]	; (8003870 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f023 0201 	bic.w	r2, r3, #1
 8003840:	490b      	ldr	r1, [pc, #44]	; (8003870 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	4313      	orrs	r3, r2
 8003846:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003848:	4b09      	ldr	r3, [pc, #36]	; (8003870 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0301 	and.w	r3, r3, #1
 8003850:	693a      	ldr	r2, [r7, #16]
 8003852:	429a      	cmp	r2, r3
 8003854:	d001      	beq.n	800385a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	371c      	adds	r7, #28
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr
 8003866:	bf00      	nop
 8003868:	40023800 	.word	0x40023800
 800386c:	40007000 	.word	0x40007000
 8003870:	40023c00 	.word	0x40023c00

08003874 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e03f      	b.n	8003906 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fd fece 	bl	800163c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2224      	movs	r2, #36	; 0x24
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f905 	bl	8003ac8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	691a      	ldr	r2, [r3, #16]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80038cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695a      	ldr	r2, [r3, #20]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80038dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2200      	movs	r2, #0
 80038f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003904:	2300      	movs	r3, #0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b08a      	sub	sp, #40	; 0x28
 8003912:	af02      	add	r7, sp, #8
 8003914:	60f8      	str	r0, [r7, #12]
 8003916:	60b9      	str	r1, [r7, #8]
 8003918:	603b      	str	r3, [r7, #0]
 800391a:	4613      	mov	r3, r2
 800391c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003928:	b2db      	uxtb	r3, r3
 800392a:	2b20      	cmp	r3, #32
 800392c:	d17c      	bne.n	8003a28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <HAL_UART_Transmit+0x2c>
 8003934:	88fb      	ldrh	r3, [r7, #6]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e075      	b.n	8003a2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003944:	2b01      	cmp	r3, #1
 8003946:	d101      	bne.n	800394c <HAL_UART_Transmit+0x3e>
 8003948:	2302      	movs	r3, #2
 800394a:	e06e      	b.n	8003a2a <HAL_UART_Transmit+0x11c>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2221      	movs	r2, #33	; 0x21
 800395e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003962:	f7fd ff9d 	bl	80018a0 <HAL_GetTick>
 8003966:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	88fa      	ldrh	r2, [r7, #6]
 800396c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	88fa      	ldrh	r2, [r7, #6]
 8003972:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800397c:	d108      	bne.n	8003990 <HAL_UART_Transmit+0x82>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d104      	bne.n	8003990 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	61bb      	str	r3, [r7, #24]
 800398e:	e003      	b.n	8003998 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003994:	2300      	movs	r3, #0
 8003996:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80039a0:	e02a      	b.n	80039f8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	2200      	movs	r2, #0
 80039aa:	2180      	movs	r1, #128	; 0x80
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f840 	bl	8003a32 <UART_WaitOnFlagUntilTimeout>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d001      	beq.n	80039bc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e036      	b.n	8003a2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10b      	bne.n	80039da <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	461a      	mov	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039d0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039d2:	69bb      	ldr	r3, [r7, #24]
 80039d4:	3302      	adds	r3, #2
 80039d6:	61bb      	str	r3, [r7, #24]
 80039d8:	e007      	b.n	80039ea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	781a      	ldrb	r2, [r3, #0]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	3301      	adds	r3, #1
 80039e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1cf      	bne.n	80039a2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	9300      	str	r3, [sp, #0]
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2140      	movs	r1, #64	; 0x40
 8003a0c:	68f8      	ldr	r0, [r7, #12]
 8003a0e:	f000 f810 	bl	8003a32 <UART_WaitOnFlagUntilTimeout>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e006      	b.n	8003a2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	e000      	b.n	8003a2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003a28:	2302      	movs	r3, #2
  }
}
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3720      	adds	r7, #32
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b084      	sub	sp, #16
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	60f8      	str	r0, [r7, #12]
 8003a3a:	60b9      	str	r1, [r7, #8]
 8003a3c:	603b      	str	r3, [r7, #0]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a42:	e02c      	b.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a44:	69bb      	ldr	r3, [r7, #24]
 8003a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4a:	d028      	beq.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d007      	beq.n	8003a62 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a52:	f7fd ff25 	bl	80018a0 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d21d      	bcs.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68da      	ldr	r2, [r3, #12]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003a70:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695a      	ldr	r2, [r3, #20]
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f022 0201 	bic.w	r2, r2, #1
 8003a80:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2220      	movs	r2, #32
 8003a86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2220      	movs	r2, #32
 8003a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e00f      	b.n	8003abe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	68ba      	ldr	r2, [r7, #8]
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	bf0c      	ite	eq
 8003aae:	2301      	moveq	r3, #1
 8003ab0:	2300      	movne	r3, #0
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d0c3      	beq.n	8003a44 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	689a      	ldr	r2, [r3, #8]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	691b      	ldr	r3, [r3, #16]
 8003aee:	431a      	orrs	r2, r3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	68db      	ldr	r3, [r3, #12]
 8003b04:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003b08:	f023 030c 	bic.w	r3, r3, #12
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6812      	ldr	r2, [r2, #0]
 8003b10:	68b9      	ldr	r1, [r7, #8]
 8003b12:	430b      	orrs	r3, r1
 8003b14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	695b      	ldr	r3, [r3, #20]
 8003b1c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	699a      	ldr	r2, [r3, #24]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a55      	ldr	r2, [pc, #340]	; (8003c88 <UART_SetConfig+0x1c0>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d103      	bne.n	8003b3e <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b36:	f7ff fe29 	bl	800378c <HAL_RCC_GetPCLK2Freq>
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	e002      	b.n	8003b44 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b3e:	f7ff fe11 	bl	8003764 <HAL_RCC_GetPCLK1Freq>
 8003b42:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b4c:	d14c      	bne.n	8003be8 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	009a      	lsls	r2, r3, #2
 8003b58:	441a      	add	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b64:	4a49      	ldr	r2, [pc, #292]	; (8003c8c <UART_SetConfig+0x1c4>)
 8003b66:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6a:	095b      	lsrs	r3, r3, #5
 8003b6c:	0119      	lsls	r1, r3, #4
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	009a      	lsls	r2, r3, #2
 8003b78:	441a      	add	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b84:	4b41      	ldr	r3, [pc, #260]	; (8003c8c <UART_SetConfig+0x1c4>)
 8003b86:	fba3 0302 	umull	r0, r3, r3, r2
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	2064      	movs	r0, #100	; 0x64
 8003b8e:	fb00 f303 	mul.w	r3, r0, r3
 8003b92:	1ad3      	subs	r3, r2, r3
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	3332      	adds	r3, #50	; 0x32
 8003b98:	4a3c      	ldr	r2, [pc, #240]	; (8003c8c <UART_SetConfig+0x1c4>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ba6:	4419      	add	r1, r3
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4613      	mov	r3, r2
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	4413      	add	r3, r2
 8003bb0:	009a      	lsls	r2, r3, #2
 8003bb2:	441a      	add	r2, r3
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bbe:	4b33      	ldr	r3, [pc, #204]	; (8003c8c <UART_SetConfig+0x1c4>)
 8003bc0:	fba3 0302 	umull	r0, r3, r3, r2
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	2064      	movs	r0, #100	; 0x64
 8003bc8:	fb00 f303 	mul.w	r3, r0, r3
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	00db      	lsls	r3, r3, #3
 8003bd0:	3332      	adds	r3, #50	; 0x32
 8003bd2:	4a2e      	ldr	r2, [pc, #184]	; (8003c8c <UART_SetConfig+0x1c4>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	f003 0207 	and.w	r2, r3, #7
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	440a      	add	r2, r1
 8003be4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003be6:	e04a      	b.n	8003c7e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	4613      	mov	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	009a      	lsls	r2, r3, #2
 8003bf2:	441a      	add	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfe:	4a23      	ldr	r2, [pc, #140]	; (8003c8c <UART_SetConfig+0x1c4>)
 8003c00:	fba2 2303 	umull	r2, r3, r2, r3
 8003c04:	095b      	lsrs	r3, r3, #5
 8003c06:	0119      	lsls	r1, r3, #4
 8003c08:	68fa      	ldr	r2, [r7, #12]
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	009a      	lsls	r2, r3, #2
 8003c12:	441a      	add	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c1e:	4b1b      	ldr	r3, [pc, #108]	; (8003c8c <UART_SetConfig+0x1c4>)
 8003c20:	fba3 0302 	umull	r0, r3, r3, r2
 8003c24:	095b      	lsrs	r3, r3, #5
 8003c26:	2064      	movs	r0, #100	; 0x64
 8003c28:	fb00 f303 	mul.w	r3, r0, r3
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	3332      	adds	r3, #50	; 0x32
 8003c32:	4a16      	ldr	r2, [pc, #88]	; (8003c8c <UART_SetConfig+0x1c4>)
 8003c34:	fba2 2303 	umull	r2, r3, r2, r3
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003c3e:	4419      	add	r1, r3
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4613      	mov	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	4413      	add	r3, r2
 8003c48:	009a      	lsls	r2, r3, #2
 8003c4a:	441a      	add	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	fbb2 f2f3 	udiv	r2, r2, r3
 8003c56:	4b0d      	ldr	r3, [pc, #52]	; (8003c8c <UART_SetConfig+0x1c4>)
 8003c58:	fba3 0302 	umull	r0, r3, r3, r2
 8003c5c:	095b      	lsrs	r3, r3, #5
 8003c5e:	2064      	movs	r0, #100	; 0x64
 8003c60:	fb00 f303 	mul.w	r3, r0, r3
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	3332      	adds	r3, #50	; 0x32
 8003c6a:	4a08      	ldr	r2, [pc, #32]	; (8003c8c <UART_SetConfig+0x1c4>)
 8003c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c70:	095b      	lsrs	r3, r3, #5
 8003c72:	f003 020f 	and.w	r2, r3, #15
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	440a      	add	r2, r1
 8003c7c:	609a      	str	r2, [r3, #8]
}
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40013800 	.word	0x40013800
 8003c8c:	51eb851f 	.word	0x51eb851f

08003c90 <__errno>:
 8003c90:	4b01      	ldr	r3, [pc, #4]	; (8003c98 <__errno+0x8>)
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	20000014 	.word	0x20000014

08003c9c <__libc_init_array>:
 8003c9c:	b570      	push	{r4, r5, r6, lr}
 8003c9e:	2600      	movs	r6, #0
 8003ca0:	4d0c      	ldr	r5, [pc, #48]	; (8003cd4 <__libc_init_array+0x38>)
 8003ca2:	4c0d      	ldr	r4, [pc, #52]	; (8003cd8 <__libc_init_array+0x3c>)
 8003ca4:	1b64      	subs	r4, r4, r5
 8003ca6:	10a4      	asrs	r4, r4, #2
 8003ca8:	42a6      	cmp	r6, r4
 8003caa:	d109      	bne.n	8003cc0 <__libc_init_array+0x24>
 8003cac:	f000 fc5c 	bl	8004568 <_init>
 8003cb0:	2600      	movs	r6, #0
 8003cb2:	4d0a      	ldr	r5, [pc, #40]	; (8003cdc <__libc_init_array+0x40>)
 8003cb4:	4c0a      	ldr	r4, [pc, #40]	; (8003ce0 <__libc_init_array+0x44>)
 8003cb6:	1b64      	subs	r4, r4, r5
 8003cb8:	10a4      	asrs	r4, r4, #2
 8003cba:	42a6      	cmp	r6, r4
 8003cbc:	d105      	bne.n	8003cca <__libc_init_array+0x2e>
 8003cbe:	bd70      	pop	{r4, r5, r6, pc}
 8003cc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cc4:	4798      	blx	r3
 8003cc6:	3601      	adds	r6, #1
 8003cc8:	e7ee      	b.n	8003ca8 <__libc_init_array+0xc>
 8003cca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cce:	4798      	blx	r3
 8003cd0:	3601      	adds	r6, #1
 8003cd2:	e7f2      	b.n	8003cba <__libc_init_array+0x1e>
 8003cd4:	08005934 	.word	0x08005934
 8003cd8:	08005934 	.word	0x08005934
 8003cdc:	08005934 	.word	0x08005934
 8003ce0:	08005938 	.word	0x08005938

08003ce4 <memcpy>:
 8003ce4:	440a      	add	r2, r1
 8003ce6:	4291      	cmp	r1, r2
 8003ce8:	f100 33ff 	add.w	r3, r0, #4294967295
 8003cec:	d100      	bne.n	8003cf0 <memcpy+0xc>
 8003cee:	4770      	bx	lr
 8003cf0:	b510      	push	{r4, lr}
 8003cf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003cf6:	4291      	cmp	r1, r2
 8003cf8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003cfc:	d1f9      	bne.n	8003cf2 <memcpy+0xe>
 8003cfe:	bd10      	pop	{r4, pc}

08003d00 <memmove>:
 8003d00:	4288      	cmp	r0, r1
 8003d02:	b510      	push	{r4, lr}
 8003d04:	eb01 0402 	add.w	r4, r1, r2
 8003d08:	d902      	bls.n	8003d10 <memmove+0x10>
 8003d0a:	4284      	cmp	r4, r0
 8003d0c:	4623      	mov	r3, r4
 8003d0e:	d807      	bhi.n	8003d20 <memmove+0x20>
 8003d10:	1e43      	subs	r3, r0, #1
 8003d12:	42a1      	cmp	r1, r4
 8003d14:	d008      	beq.n	8003d28 <memmove+0x28>
 8003d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003d1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003d1e:	e7f8      	b.n	8003d12 <memmove+0x12>
 8003d20:	4601      	mov	r1, r0
 8003d22:	4402      	add	r2, r0
 8003d24:	428a      	cmp	r2, r1
 8003d26:	d100      	bne.n	8003d2a <memmove+0x2a>
 8003d28:	bd10      	pop	{r4, pc}
 8003d2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003d2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003d32:	e7f7      	b.n	8003d24 <memmove+0x24>

08003d34 <memset>:
 8003d34:	4603      	mov	r3, r0
 8003d36:	4402      	add	r2, r0
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d100      	bne.n	8003d3e <memset+0xa>
 8003d3c:	4770      	bx	lr
 8003d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d42:	e7f9      	b.n	8003d38 <memset+0x4>

08003d44 <siprintf>:
 8003d44:	b40e      	push	{r1, r2, r3}
 8003d46:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003d4a:	b500      	push	{lr}
 8003d4c:	b09c      	sub	sp, #112	; 0x70
 8003d4e:	ab1d      	add	r3, sp, #116	; 0x74
 8003d50:	9002      	str	r0, [sp, #8]
 8003d52:	9006      	str	r0, [sp, #24]
 8003d54:	9107      	str	r1, [sp, #28]
 8003d56:	9104      	str	r1, [sp, #16]
 8003d58:	4808      	ldr	r0, [pc, #32]	; (8003d7c <siprintf+0x38>)
 8003d5a:	4909      	ldr	r1, [pc, #36]	; (8003d80 <siprintf+0x3c>)
 8003d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003d60:	9105      	str	r1, [sp, #20]
 8003d62:	6800      	ldr	r0, [r0, #0]
 8003d64:	a902      	add	r1, sp, #8
 8003d66:	9301      	str	r3, [sp, #4]
 8003d68:	f000 f868 	bl	8003e3c <_svfiprintf_r>
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	9b02      	ldr	r3, [sp, #8]
 8003d70:	701a      	strb	r2, [r3, #0]
 8003d72:	b01c      	add	sp, #112	; 0x70
 8003d74:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d78:	b003      	add	sp, #12
 8003d7a:	4770      	bx	lr
 8003d7c:	20000014 	.word	0x20000014
 8003d80:	ffff0208 	.word	0xffff0208

08003d84 <__ssputs_r>:
 8003d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d88:	688e      	ldr	r6, [r1, #8]
 8003d8a:	4682      	mov	sl, r0
 8003d8c:	429e      	cmp	r6, r3
 8003d8e:	460c      	mov	r4, r1
 8003d90:	4690      	mov	r8, r2
 8003d92:	461f      	mov	r7, r3
 8003d94:	d838      	bhi.n	8003e08 <__ssputs_r+0x84>
 8003d96:	898a      	ldrh	r2, [r1, #12]
 8003d98:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003d9c:	d032      	beq.n	8003e04 <__ssputs_r+0x80>
 8003d9e:	6825      	ldr	r5, [r4, #0]
 8003da0:	6909      	ldr	r1, [r1, #16]
 8003da2:	3301      	adds	r3, #1
 8003da4:	eba5 0901 	sub.w	r9, r5, r1
 8003da8:	6965      	ldr	r5, [r4, #20]
 8003daa:	444b      	add	r3, r9
 8003dac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003db0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003db4:	106d      	asrs	r5, r5, #1
 8003db6:	429d      	cmp	r5, r3
 8003db8:	bf38      	it	cc
 8003dba:	461d      	movcc	r5, r3
 8003dbc:	0553      	lsls	r3, r2, #21
 8003dbe:	d531      	bpl.n	8003e24 <__ssputs_r+0xa0>
 8003dc0:	4629      	mov	r1, r5
 8003dc2:	f000 fb2b 	bl	800441c <_malloc_r>
 8003dc6:	4606      	mov	r6, r0
 8003dc8:	b950      	cbnz	r0, 8003de0 <__ssputs_r+0x5c>
 8003dca:	230c      	movs	r3, #12
 8003dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd0:	f8ca 3000 	str.w	r3, [sl]
 8003dd4:	89a3      	ldrh	r3, [r4, #12]
 8003dd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dda:	81a3      	strh	r3, [r4, #12]
 8003ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003de0:	464a      	mov	r2, r9
 8003de2:	6921      	ldr	r1, [r4, #16]
 8003de4:	f7ff ff7e 	bl	8003ce4 <memcpy>
 8003de8:	89a3      	ldrh	r3, [r4, #12]
 8003dea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003df2:	81a3      	strh	r3, [r4, #12]
 8003df4:	6126      	str	r6, [r4, #16]
 8003df6:	444e      	add	r6, r9
 8003df8:	6026      	str	r6, [r4, #0]
 8003dfa:	463e      	mov	r6, r7
 8003dfc:	6165      	str	r5, [r4, #20]
 8003dfe:	eba5 0509 	sub.w	r5, r5, r9
 8003e02:	60a5      	str	r5, [r4, #8]
 8003e04:	42be      	cmp	r6, r7
 8003e06:	d900      	bls.n	8003e0a <__ssputs_r+0x86>
 8003e08:	463e      	mov	r6, r7
 8003e0a:	4632      	mov	r2, r6
 8003e0c:	4641      	mov	r1, r8
 8003e0e:	6820      	ldr	r0, [r4, #0]
 8003e10:	f7ff ff76 	bl	8003d00 <memmove>
 8003e14:	68a3      	ldr	r3, [r4, #8]
 8003e16:	6822      	ldr	r2, [r4, #0]
 8003e18:	1b9b      	subs	r3, r3, r6
 8003e1a:	4432      	add	r2, r6
 8003e1c:	2000      	movs	r0, #0
 8003e1e:	60a3      	str	r3, [r4, #8]
 8003e20:	6022      	str	r2, [r4, #0]
 8003e22:	e7db      	b.n	8003ddc <__ssputs_r+0x58>
 8003e24:	462a      	mov	r2, r5
 8003e26:	f000 fb53 	bl	80044d0 <_realloc_r>
 8003e2a:	4606      	mov	r6, r0
 8003e2c:	2800      	cmp	r0, #0
 8003e2e:	d1e1      	bne.n	8003df4 <__ssputs_r+0x70>
 8003e30:	4650      	mov	r0, sl
 8003e32:	6921      	ldr	r1, [r4, #16]
 8003e34:	f000 faa6 	bl	8004384 <_free_r>
 8003e38:	e7c7      	b.n	8003dca <__ssputs_r+0x46>
	...

08003e3c <_svfiprintf_r>:
 8003e3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e40:	4698      	mov	r8, r3
 8003e42:	898b      	ldrh	r3, [r1, #12]
 8003e44:	4607      	mov	r7, r0
 8003e46:	061b      	lsls	r3, r3, #24
 8003e48:	460d      	mov	r5, r1
 8003e4a:	4614      	mov	r4, r2
 8003e4c:	b09d      	sub	sp, #116	; 0x74
 8003e4e:	d50e      	bpl.n	8003e6e <_svfiprintf_r+0x32>
 8003e50:	690b      	ldr	r3, [r1, #16]
 8003e52:	b963      	cbnz	r3, 8003e6e <_svfiprintf_r+0x32>
 8003e54:	2140      	movs	r1, #64	; 0x40
 8003e56:	f000 fae1 	bl	800441c <_malloc_r>
 8003e5a:	6028      	str	r0, [r5, #0]
 8003e5c:	6128      	str	r0, [r5, #16]
 8003e5e:	b920      	cbnz	r0, 8003e6a <_svfiprintf_r+0x2e>
 8003e60:	230c      	movs	r3, #12
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	f04f 30ff 	mov.w	r0, #4294967295
 8003e68:	e0d1      	b.n	800400e <_svfiprintf_r+0x1d2>
 8003e6a:	2340      	movs	r3, #64	; 0x40
 8003e6c:	616b      	str	r3, [r5, #20]
 8003e6e:	2300      	movs	r3, #0
 8003e70:	9309      	str	r3, [sp, #36]	; 0x24
 8003e72:	2320      	movs	r3, #32
 8003e74:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e78:	2330      	movs	r3, #48	; 0x30
 8003e7a:	f04f 0901 	mov.w	r9, #1
 8003e7e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003e82:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004028 <_svfiprintf_r+0x1ec>
 8003e86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e8a:	4623      	mov	r3, r4
 8003e8c:	469a      	mov	sl, r3
 8003e8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e92:	b10a      	cbz	r2, 8003e98 <_svfiprintf_r+0x5c>
 8003e94:	2a25      	cmp	r2, #37	; 0x25
 8003e96:	d1f9      	bne.n	8003e8c <_svfiprintf_r+0x50>
 8003e98:	ebba 0b04 	subs.w	fp, sl, r4
 8003e9c:	d00b      	beq.n	8003eb6 <_svfiprintf_r+0x7a>
 8003e9e:	465b      	mov	r3, fp
 8003ea0:	4622      	mov	r2, r4
 8003ea2:	4629      	mov	r1, r5
 8003ea4:	4638      	mov	r0, r7
 8003ea6:	f7ff ff6d 	bl	8003d84 <__ssputs_r>
 8003eaa:	3001      	adds	r0, #1
 8003eac:	f000 80aa 	beq.w	8004004 <_svfiprintf_r+0x1c8>
 8003eb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003eb2:	445a      	add	r2, fp
 8003eb4:	9209      	str	r2, [sp, #36]	; 0x24
 8003eb6:	f89a 3000 	ldrb.w	r3, [sl]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 80a2 	beq.w	8004004 <_svfiprintf_r+0x1c8>
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ec6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003eca:	f10a 0a01 	add.w	sl, sl, #1
 8003ece:	9304      	str	r3, [sp, #16]
 8003ed0:	9307      	str	r3, [sp, #28]
 8003ed2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003ed6:	931a      	str	r3, [sp, #104]	; 0x68
 8003ed8:	4654      	mov	r4, sl
 8003eda:	2205      	movs	r2, #5
 8003edc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ee0:	4851      	ldr	r0, [pc, #324]	; (8004028 <_svfiprintf_r+0x1ec>)
 8003ee2:	f000 fa41 	bl	8004368 <memchr>
 8003ee6:	9a04      	ldr	r2, [sp, #16]
 8003ee8:	b9d8      	cbnz	r0, 8003f22 <_svfiprintf_r+0xe6>
 8003eea:	06d0      	lsls	r0, r2, #27
 8003eec:	bf44      	itt	mi
 8003eee:	2320      	movmi	r3, #32
 8003ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003ef4:	0711      	lsls	r1, r2, #28
 8003ef6:	bf44      	itt	mi
 8003ef8:	232b      	movmi	r3, #43	; 0x2b
 8003efa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003efe:	f89a 3000 	ldrb.w	r3, [sl]
 8003f02:	2b2a      	cmp	r3, #42	; 0x2a
 8003f04:	d015      	beq.n	8003f32 <_svfiprintf_r+0xf6>
 8003f06:	4654      	mov	r4, sl
 8003f08:	2000      	movs	r0, #0
 8003f0a:	f04f 0c0a 	mov.w	ip, #10
 8003f0e:	9a07      	ldr	r2, [sp, #28]
 8003f10:	4621      	mov	r1, r4
 8003f12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003f16:	3b30      	subs	r3, #48	; 0x30
 8003f18:	2b09      	cmp	r3, #9
 8003f1a:	d94e      	bls.n	8003fba <_svfiprintf_r+0x17e>
 8003f1c:	b1b0      	cbz	r0, 8003f4c <_svfiprintf_r+0x110>
 8003f1e:	9207      	str	r2, [sp, #28]
 8003f20:	e014      	b.n	8003f4c <_svfiprintf_r+0x110>
 8003f22:	eba0 0308 	sub.w	r3, r0, r8
 8003f26:	fa09 f303 	lsl.w	r3, r9, r3
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	46a2      	mov	sl, r4
 8003f2e:	9304      	str	r3, [sp, #16]
 8003f30:	e7d2      	b.n	8003ed8 <_svfiprintf_r+0x9c>
 8003f32:	9b03      	ldr	r3, [sp, #12]
 8003f34:	1d19      	adds	r1, r3, #4
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	9103      	str	r1, [sp, #12]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	bfbb      	ittet	lt
 8003f3e:	425b      	neglt	r3, r3
 8003f40:	f042 0202 	orrlt.w	r2, r2, #2
 8003f44:	9307      	strge	r3, [sp, #28]
 8003f46:	9307      	strlt	r3, [sp, #28]
 8003f48:	bfb8      	it	lt
 8003f4a:	9204      	strlt	r2, [sp, #16]
 8003f4c:	7823      	ldrb	r3, [r4, #0]
 8003f4e:	2b2e      	cmp	r3, #46	; 0x2e
 8003f50:	d10c      	bne.n	8003f6c <_svfiprintf_r+0x130>
 8003f52:	7863      	ldrb	r3, [r4, #1]
 8003f54:	2b2a      	cmp	r3, #42	; 0x2a
 8003f56:	d135      	bne.n	8003fc4 <_svfiprintf_r+0x188>
 8003f58:	9b03      	ldr	r3, [sp, #12]
 8003f5a:	3402      	adds	r4, #2
 8003f5c:	1d1a      	adds	r2, r3, #4
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	9203      	str	r2, [sp, #12]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	bfb8      	it	lt
 8003f66:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f6a:	9305      	str	r3, [sp, #20]
 8003f6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004038 <_svfiprintf_r+0x1fc>
 8003f70:	2203      	movs	r2, #3
 8003f72:	4650      	mov	r0, sl
 8003f74:	7821      	ldrb	r1, [r4, #0]
 8003f76:	f000 f9f7 	bl	8004368 <memchr>
 8003f7a:	b140      	cbz	r0, 8003f8e <_svfiprintf_r+0x152>
 8003f7c:	2340      	movs	r3, #64	; 0x40
 8003f7e:	eba0 000a 	sub.w	r0, r0, sl
 8003f82:	fa03 f000 	lsl.w	r0, r3, r0
 8003f86:	9b04      	ldr	r3, [sp, #16]
 8003f88:	3401      	adds	r4, #1
 8003f8a:	4303      	orrs	r3, r0
 8003f8c:	9304      	str	r3, [sp, #16]
 8003f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003f92:	2206      	movs	r2, #6
 8003f94:	4825      	ldr	r0, [pc, #148]	; (800402c <_svfiprintf_r+0x1f0>)
 8003f96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f9a:	f000 f9e5 	bl	8004368 <memchr>
 8003f9e:	2800      	cmp	r0, #0
 8003fa0:	d038      	beq.n	8004014 <_svfiprintf_r+0x1d8>
 8003fa2:	4b23      	ldr	r3, [pc, #140]	; (8004030 <_svfiprintf_r+0x1f4>)
 8003fa4:	bb1b      	cbnz	r3, 8003fee <_svfiprintf_r+0x1b2>
 8003fa6:	9b03      	ldr	r3, [sp, #12]
 8003fa8:	3307      	adds	r3, #7
 8003faa:	f023 0307 	bic.w	r3, r3, #7
 8003fae:	3308      	adds	r3, #8
 8003fb0:	9303      	str	r3, [sp, #12]
 8003fb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fb4:	4433      	add	r3, r6
 8003fb6:	9309      	str	r3, [sp, #36]	; 0x24
 8003fb8:	e767      	b.n	8003e8a <_svfiprintf_r+0x4e>
 8003fba:	460c      	mov	r4, r1
 8003fbc:	2001      	movs	r0, #1
 8003fbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8003fc2:	e7a5      	b.n	8003f10 <_svfiprintf_r+0xd4>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f04f 0c0a 	mov.w	ip, #10
 8003fca:	4619      	mov	r1, r3
 8003fcc:	3401      	adds	r4, #1
 8003fce:	9305      	str	r3, [sp, #20]
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fd6:	3a30      	subs	r2, #48	; 0x30
 8003fd8:	2a09      	cmp	r2, #9
 8003fda:	d903      	bls.n	8003fe4 <_svfiprintf_r+0x1a8>
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d0c5      	beq.n	8003f6c <_svfiprintf_r+0x130>
 8003fe0:	9105      	str	r1, [sp, #20]
 8003fe2:	e7c3      	b.n	8003f6c <_svfiprintf_r+0x130>
 8003fe4:	4604      	mov	r4, r0
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003fec:	e7f0      	b.n	8003fd0 <_svfiprintf_r+0x194>
 8003fee:	ab03      	add	r3, sp, #12
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	462a      	mov	r2, r5
 8003ff4:	4638      	mov	r0, r7
 8003ff6:	4b0f      	ldr	r3, [pc, #60]	; (8004034 <_svfiprintf_r+0x1f8>)
 8003ff8:	a904      	add	r1, sp, #16
 8003ffa:	f3af 8000 	nop.w
 8003ffe:	1c42      	adds	r2, r0, #1
 8004000:	4606      	mov	r6, r0
 8004002:	d1d6      	bne.n	8003fb2 <_svfiprintf_r+0x176>
 8004004:	89ab      	ldrh	r3, [r5, #12]
 8004006:	065b      	lsls	r3, r3, #25
 8004008:	f53f af2c 	bmi.w	8003e64 <_svfiprintf_r+0x28>
 800400c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800400e:	b01d      	add	sp, #116	; 0x74
 8004010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004014:	ab03      	add	r3, sp, #12
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	462a      	mov	r2, r5
 800401a:	4638      	mov	r0, r7
 800401c:	4b05      	ldr	r3, [pc, #20]	; (8004034 <_svfiprintf_r+0x1f8>)
 800401e:	a904      	add	r1, sp, #16
 8004020:	f000 f87c 	bl	800411c <_printf_i>
 8004024:	e7eb      	b.n	8003ffe <_svfiprintf_r+0x1c2>
 8004026:	bf00      	nop
 8004028:	080058f8 	.word	0x080058f8
 800402c:	08005902 	.word	0x08005902
 8004030:	00000000 	.word	0x00000000
 8004034:	08003d85 	.word	0x08003d85
 8004038:	080058fe 	.word	0x080058fe

0800403c <_printf_common>:
 800403c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004040:	4616      	mov	r6, r2
 8004042:	4699      	mov	r9, r3
 8004044:	688a      	ldr	r2, [r1, #8]
 8004046:	690b      	ldr	r3, [r1, #16]
 8004048:	4607      	mov	r7, r0
 800404a:	4293      	cmp	r3, r2
 800404c:	bfb8      	it	lt
 800404e:	4613      	movlt	r3, r2
 8004050:	6033      	str	r3, [r6, #0]
 8004052:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004056:	460c      	mov	r4, r1
 8004058:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800405c:	b10a      	cbz	r2, 8004062 <_printf_common+0x26>
 800405e:	3301      	adds	r3, #1
 8004060:	6033      	str	r3, [r6, #0]
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	0699      	lsls	r1, r3, #26
 8004066:	bf42      	ittt	mi
 8004068:	6833      	ldrmi	r3, [r6, #0]
 800406a:	3302      	addmi	r3, #2
 800406c:	6033      	strmi	r3, [r6, #0]
 800406e:	6825      	ldr	r5, [r4, #0]
 8004070:	f015 0506 	ands.w	r5, r5, #6
 8004074:	d106      	bne.n	8004084 <_printf_common+0x48>
 8004076:	f104 0a19 	add.w	sl, r4, #25
 800407a:	68e3      	ldr	r3, [r4, #12]
 800407c:	6832      	ldr	r2, [r6, #0]
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	42ab      	cmp	r3, r5
 8004082:	dc28      	bgt.n	80040d6 <_printf_common+0x9a>
 8004084:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004088:	1e13      	subs	r3, r2, #0
 800408a:	6822      	ldr	r2, [r4, #0]
 800408c:	bf18      	it	ne
 800408e:	2301      	movne	r3, #1
 8004090:	0692      	lsls	r2, r2, #26
 8004092:	d42d      	bmi.n	80040f0 <_printf_common+0xb4>
 8004094:	4649      	mov	r1, r9
 8004096:	4638      	mov	r0, r7
 8004098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800409c:	47c0      	blx	r8
 800409e:	3001      	adds	r0, #1
 80040a0:	d020      	beq.n	80040e4 <_printf_common+0xa8>
 80040a2:	6823      	ldr	r3, [r4, #0]
 80040a4:	68e5      	ldr	r5, [r4, #12]
 80040a6:	f003 0306 	and.w	r3, r3, #6
 80040aa:	2b04      	cmp	r3, #4
 80040ac:	bf18      	it	ne
 80040ae:	2500      	movne	r5, #0
 80040b0:	6832      	ldr	r2, [r6, #0]
 80040b2:	f04f 0600 	mov.w	r6, #0
 80040b6:	68a3      	ldr	r3, [r4, #8]
 80040b8:	bf08      	it	eq
 80040ba:	1aad      	subeq	r5, r5, r2
 80040bc:	6922      	ldr	r2, [r4, #16]
 80040be:	bf08      	it	eq
 80040c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040c4:	4293      	cmp	r3, r2
 80040c6:	bfc4      	itt	gt
 80040c8:	1a9b      	subgt	r3, r3, r2
 80040ca:	18ed      	addgt	r5, r5, r3
 80040cc:	341a      	adds	r4, #26
 80040ce:	42b5      	cmp	r5, r6
 80040d0:	d11a      	bne.n	8004108 <_printf_common+0xcc>
 80040d2:	2000      	movs	r0, #0
 80040d4:	e008      	b.n	80040e8 <_printf_common+0xac>
 80040d6:	2301      	movs	r3, #1
 80040d8:	4652      	mov	r2, sl
 80040da:	4649      	mov	r1, r9
 80040dc:	4638      	mov	r0, r7
 80040de:	47c0      	blx	r8
 80040e0:	3001      	adds	r0, #1
 80040e2:	d103      	bne.n	80040ec <_printf_common+0xb0>
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295
 80040e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040ec:	3501      	adds	r5, #1
 80040ee:	e7c4      	b.n	800407a <_printf_common+0x3e>
 80040f0:	2030      	movs	r0, #48	; 0x30
 80040f2:	18e1      	adds	r1, r4, r3
 80040f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80040fe:	4422      	add	r2, r4
 8004100:	3302      	adds	r3, #2
 8004102:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004106:	e7c5      	b.n	8004094 <_printf_common+0x58>
 8004108:	2301      	movs	r3, #1
 800410a:	4622      	mov	r2, r4
 800410c:	4649      	mov	r1, r9
 800410e:	4638      	mov	r0, r7
 8004110:	47c0      	blx	r8
 8004112:	3001      	adds	r0, #1
 8004114:	d0e6      	beq.n	80040e4 <_printf_common+0xa8>
 8004116:	3601      	adds	r6, #1
 8004118:	e7d9      	b.n	80040ce <_printf_common+0x92>
	...

0800411c <_printf_i>:
 800411c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004120:	460c      	mov	r4, r1
 8004122:	7e27      	ldrb	r7, [r4, #24]
 8004124:	4691      	mov	r9, r2
 8004126:	2f78      	cmp	r7, #120	; 0x78
 8004128:	4680      	mov	r8, r0
 800412a:	469a      	mov	sl, r3
 800412c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800412e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004132:	d807      	bhi.n	8004144 <_printf_i+0x28>
 8004134:	2f62      	cmp	r7, #98	; 0x62
 8004136:	d80a      	bhi.n	800414e <_printf_i+0x32>
 8004138:	2f00      	cmp	r7, #0
 800413a:	f000 80d9 	beq.w	80042f0 <_printf_i+0x1d4>
 800413e:	2f58      	cmp	r7, #88	; 0x58
 8004140:	f000 80a4 	beq.w	800428c <_printf_i+0x170>
 8004144:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800414c:	e03a      	b.n	80041c4 <_printf_i+0xa8>
 800414e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004152:	2b15      	cmp	r3, #21
 8004154:	d8f6      	bhi.n	8004144 <_printf_i+0x28>
 8004156:	a001      	add	r0, pc, #4	; (adr r0, 800415c <_printf_i+0x40>)
 8004158:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800415c:	080041b5 	.word	0x080041b5
 8004160:	080041c9 	.word	0x080041c9
 8004164:	08004145 	.word	0x08004145
 8004168:	08004145 	.word	0x08004145
 800416c:	08004145 	.word	0x08004145
 8004170:	08004145 	.word	0x08004145
 8004174:	080041c9 	.word	0x080041c9
 8004178:	08004145 	.word	0x08004145
 800417c:	08004145 	.word	0x08004145
 8004180:	08004145 	.word	0x08004145
 8004184:	08004145 	.word	0x08004145
 8004188:	080042d7 	.word	0x080042d7
 800418c:	080041f9 	.word	0x080041f9
 8004190:	080042b9 	.word	0x080042b9
 8004194:	08004145 	.word	0x08004145
 8004198:	08004145 	.word	0x08004145
 800419c:	080042f9 	.word	0x080042f9
 80041a0:	08004145 	.word	0x08004145
 80041a4:	080041f9 	.word	0x080041f9
 80041a8:	08004145 	.word	0x08004145
 80041ac:	08004145 	.word	0x08004145
 80041b0:	080042c1 	.word	0x080042c1
 80041b4:	680b      	ldr	r3, [r1, #0]
 80041b6:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80041ba:	1d1a      	adds	r2, r3, #4
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	600a      	str	r2, [r1, #0]
 80041c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0a4      	b.n	8004312 <_printf_i+0x1f6>
 80041c8:	6825      	ldr	r5, [r4, #0]
 80041ca:	6808      	ldr	r0, [r1, #0]
 80041cc:	062e      	lsls	r6, r5, #24
 80041ce:	f100 0304 	add.w	r3, r0, #4
 80041d2:	d50a      	bpl.n	80041ea <_printf_i+0xce>
 80041d4:	6805      	ldr	r5, [r0, #0]
 80041d6:	600b      	str	r3, [r1, #0]
 80041d8:	2d00      	cmp	r5, #0
 80041da:	da03      	bge.n	80041e4 <_printf_i+0xc8>
 80041dc:	232d      	movs	r3, #45	; 0x2d
 80041de:	426d      	negs	r5, r5
 80041e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041e4:	230a      	movs	r3, #10
 80041e6:	485e      	ldr	r0, [pc, #376]	; (8004360 <_printf_i+0x244>)
 80041e8:	e019      	b.n	800421e <_printf_i+0x102>
 80041ea:	f015 0f40 	tst.w	r5, #64	; 0x40
 80041ee:	6805      	ldr	r5, [r0, #0]
 80041f0:	600b      	str	r3, [r1, #0]
 80041f2:	bf18      	it	ne
 80041f4:	b22d      	sxthne	r5, r5
 80041f6:	e7ef      	b.n	80041d8 <_printf_i+0xbc>
 80041f8:	680b      	ldr	r3, [r1, #0]
 80041fa:	6825      	ldr	r5, [r4, #0]
 80041fc:	1d18      	adds	r0, r3, #4
 80041fe:	6008      	str	r0, [r1, #0]
 8004200:	0628      	lsls	r0, r5, #24
 8004202:	d501      	bpl.n	8004208 <_printf_i+0xec>
 8004204:	681d      	ldr	r5, [r3, #0]
 8004206:	e002      	b.n	800420e <_printf_i+0xf2>
 8004208:	0669      	lsls	r1, r5, #25
 800420a:	d5fb      	bpl.n	8004204 <_printf_i+0xe8>
 800420c:	881d      	ldrh	r5, [r3, #0]
 800420e:	2f6f      	cmp	r7, #111	; 0x6f
 8004210:	bf0c      	ite	eq
 8004212:	2308      	moveq	r3, #8
 8004214:	230a      	movne	r3, #10
 8004216:	4852      	ldr	r0, [pc, #328]	; (8004360 <_printf_i+0x244>)
 8004218:	2100      	movs	r1, #0
 800421a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800421e:	6866      	ldr	r6, [r4, #4]
 8004220:	2e00      	cmp	r6, #0
 8004222:	bfa8      	it	ge
 8004224:	6821      	ldrge	r1, [r4, #0]
 8004226:	60a6      	str	r6, [r4, #8]
 8004228:	bfa4      	itt	ge
 800422a:	f021 0104 	bicge.w	r1, r1, #4
 800422e:	6021      	strge	r1, [r4, #0]
 8004230:	b90d      	cbnz	r5, 8004236 <_printf_i+0x11a>
 8004232:	2e00      	cmp	r6, #0
 8004234:	d04d      	beq.n	80042d2 <_printf_i+0x1b6>
 8004236:	4616      	mov	r6, r2
 8004238:	fbb5 f1f3 	udiv	r1, r5, r3
 800423c:	fb03 5711 	mls	r7, r3, r1, r5
 8004240:	5dc7      	ldrb	r7, [r0, r7]
 8004242:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004246:	462f      	mov	r7, r5
 8004248:	42bb      	cmp	r3, r7
 800424a:	460d      	mov	r5, r1
 800424c:	d9f4      	bls.n	8004238 <_printf_i+0x11c>
 800424e:	2b08      	cmp	r3, #8
 8004250:	d10b      	bne.n	800426a <_printf_i+0x14e>
 8004252:	6823      	ldr	r3, [r4, #0]
 8004254:	07df      	lsls	r7, r3, #31
 8004256:	d508      	bpl.n	800426a <_printf_i+0x14e>
 8004258:	6923      	ldr	r3, [r4, #16]
 800425a:	6861      	ldr	r1, [r4, #4]
 800425c:	4299      	cmp	r1, r3
 800425e:	bfde      	ittt	le
 8004260:	2330      	movle	r3, #48	; 0x30
 8004262:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004266:	f106 36ff 	addle.w	r6, r6, #4294967295
 800426a:	1b92      	subs	r2, r2, r6
 800426c:	6122      	str	r2, [r4, #16]
 800426e:	464b      	mov	r3, r9
 8004270:	4621      	mov	r1, r4
 8004272:	4640      	mov	r0, r8
 8004274:	f8cd a000 	str.w	sl, [sp]
 8004278:	aa03      	add	r2, sp, #12
 800427a:	f7ff fedf 	bl	800403c <_printf_common>
 800427e:	3001      	adds	r0, #1
 8004280:	d14c      	bne.n	800431c <_printf_i+0x200>
 8004282:	f04f 30ff 	mov.w	r0, #4294967295
 8004286:	b004      	add	sp, #16
 8004288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800428c:	4834      	ldr	r0, [pc, #208]	; (8004360 <_printf_i+0x244>)
 800428e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004292:	680e      	ldr	r6, [r1, #0]
 8004294:	6823      	ldr	r3, [r4, #0]
 8004296:	f856 5b04 	ldr.w	r5, [r6], #4
 800429a:	061f      	lsls	r7, r3, #24
 800429c:	600e      	str	r6, [r1, #0]
 800429e:	d514      	bpl.n	80042ca <_printf_i+0x1ae>
 80042a0:	07d9      	lsls	r1, r3, #31
 80042a2:	bf44      	itt	mi
 80042a4:	f043 0320 	orrmi.w	r3, r3, #32
 80042a8:	6023      	strmi	r3, [r4, #0]
 80042aa:	b91d      	cbnz	r5, 80042b4 <_printf_i+0x198>
 80042ac:	6823      	ldr	r3, [r4, #0]
 80042ae:	f023 0320 	bic.w	r3, r3, #32
 80042b2:	6023      	str	r3, [r4, #0]
 80042b4:	2310      	movs	r3, #16
 80042b6:	e7af      	b.n	8004218 <_printf_i+0xfc>
 80042b8:	6823      	ldr	r3, [r4, #0]
 80042ba:	f043 0320 	orr.w	r3, r3, #32
 80042be:	6023      	str	r3, [r4, #0]
 80042c0:	2378      	movs	r3, #120	; 0x78
 80042c2:	4828      	ldr	r0, [pc, #160]	; (8004364 <_printf_i+0x248>)
 80042c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80042c8:	e7e3      	b.n	8004292 <_printf_i+0x176>
 80042ca:	065e      	lsls	r6, r3, #25
 80042cc:	bf48      	it	mi
 80042ce:	b2ad      	uxthmi	r5, r5
 80042d0:	e7e6      	b.n	80042a0 <_printf_i+0x184>
 80042d2:	4616      	mov	r6, r2
 80042d4:	e7bb      	b.n	800424e <_printf_i+0x132>
 80042d6:	680b      	ldr	r3, [r1, #0]
 80042d8:	6826      	ldr	r6, [r4, #0]
 80042da:	1d1d      	adds	r5, r3, #4
 80042dc:	6960      	ldr	r0, [r4, #20]
 80042de:	600d      	str	r5, [r1, #0]
 80042e0:	0635      	lsls	r5, r6, #24
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	d501      	bpl.n	80042ea <_printf_i+0x1ce>
 80042e6:	6018      	str	r0, [r3, #0]
 80042e8:	e002      	b.n	80042f0 <_printf_i+0x1d4>
 80042ea:	0671      	lsls	r1, r6, #25
 80042ec:	d5fb      	bpl.n	80042e6 <_printf_i+0x1ca>
 80042ee:	8018      	strh	r0, [r3, #0]
 80042f0:	2300      	movs	r3, #0
 80042f2:	4616      	mov	r6, r2
 80042f4:	6123      	str	r3, [r4, #16]
 80042f6:	e7ba      	b.n	800426e <_printf_i+0x152>
 80042f8:	680b      	ldr	r3, [r1, #0]
 80042fa:	1d1a      	adds	r2, r3, #4
 80042fc:	600a      	str	r2, [r1, #0]
 80042fe:	681e      	ldr	r6, [r3, #0]
 8004300:	2100      	movs	r1, #0
 8004302:	4630      	mov	r0, r6
 8004304:	6862      	ldr	r2, [r4, #4]
 8004306:	f000 f82f 	bl	8004368 <memchr>
 800430a:	b108      	cbz	r0, 8004310 <_printf_i+0x1f4>
 800430c:	1b80      	subs	r0, r0, r6
 800430e:	6060      	str	r0, [r4, #4]
 8004310:	6863      	ldr	r3, [r4, #4]
 8004312:	6123      	str	r3, [r4, #16]
 8004314:	2300      	movs	r3, #0
 8004316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800431a:	e7a8      	b.n	800426e <_printf_i+0x152>
 800431c:	4632      	mov	r2, r6
 800431e:	4649      	mov	r1, r9
 8004320:	4640      	mov	r0, r8
 8004322:	6923      	ldr	r3, [r4, #16]
 8004324:	47d0      	blx	sl
 8004326:	3001      	adds	r0, #1
 8004328:	d0ab      	beq.n	8004282 <_printf_i+0x166>
 800432a:	6823      	ldr	r3, [r4, #0]
 800432c:	079b      	lsls	r3, r3, #30
 800432e:	d413      	bmi.n	8004358 <_printf_i+0x23c>
 8004330:	68e0      	ldr	r0, [r4, #12]
 8004332:	9b03      	ldr	r3, [sp, #12]
 8004334:	4298      	cmp	r0, r3
 8004336:	bfb8      	it	lt
 8004338:	4618      	movlt	r0, r3
 800433a:	e7a4      	b.n	8004286 <_printf_i+0x16a>
 800433c:	2301      	movs	r3, #1
 800433e:	4632      	mov	r2, r6
 8004340:	4649      	mov	r1, r9
 8004342:	4640      	mov	r0, r8
 8004344:	47d0      	blx	sl
 8004346:	3001      	adds	r0, #1
 8004348:	d09b      	beq.n	8004282 <_printf_i+0x166>
 800434a:	3501      	adds	r5, #1
 800434c:	68e3      	ldr	r3, [r4, #12]
 800434e:	9903      	ldr	r1, [sp, #12]
 8004350:	1a5b      	subs	r3, r3, r1
 8004352:	42ab      	cmp	r3, r5
 8004354:	dcf2      	bgt.n	800433c <_printf_i+0x220>
 8004356:	e7eb      	b.n	8004330 <_printf_i+0x214>
 8004358:	2500      	movs	r5, #0
 800435a:	f104 0619 	add.w	r6, r4, #25
 800435e:	e7f5      	b.n	800434c <_printf_i+0x230>
 8004360:	08005909 	.word	0x08005909
 8004364:	0800591a 	.word	0x0800591a

08004368 <memchr>:
 8004368:	4603      	mov	r3, r0
 800436a:	b510      	push	{r4, lr}
 800436c:	b2c9      	uxtb	r1, r1
 800436e:	4402      	add	r2, r0
 8004370:	4293      	cmp	r3, r2
 8004372:	4618      	mov	r0, r3
 8004374:	d101      	bne.n	800437a <memchr+0x12>
 8004376:	2000      	movs	r0, #0
 8004378:	e003      	b.n	8004382 <memchr+0x1a>
 800437a:	7804      	ldrb	r4, [r0, #0]
 800437c:	3301      	adds	r3, #1
 800437e:	428c      	cmp	r4, r1
 8004380:	d1f6      	bne.n	8004370 <memchr+0x8>
 8004382:	bd10      	pop	{r4, pc}

08004384 <_free_r>:
 8004384:	b538      	push	{r3, r4, r5, lr}
 8004386:	4605      	mov	r5, r0
 8004388:	2900      	cmp	r1, #0
 800438a:	d043      	beq.n	8004414 <_free_r+0x90>
 800438c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004390:	1f0c      	subs	r4, r1, #4
 8004392:	2b00      	cmp	r3, #0
 8004394:	bfb8      	it	lt
 8004396:	18e4      	addlt	r4, r4, r3
 8004398:	f000 f8d0 	bl	800453c <__malloc_lock>
 800439c:	4a1e      	ldr	r2, [pc, #120]	; (8004418 <_free_r+0x94>)
 800439e:	6813      	ldr	r3, [r2, #0]
 80043a0:	4610      	mov	r0, r2
 80043a2:	b933      	cbnz	r3, 80043b2 <_free_r+0x2e>
 80043a4:	6063      	str	r3, [r4, #4]
 80043a6:	6014      	str	r4, [r2, #0]
 80043a8:	4628      	mov	r0, r5
 80043aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80043ae:	f000 b8cb 	b.w	8004548 <__malloc_unlock>
 80043b2:	42a3      	cmp	r3, r4
 80043b4:	d90a      	bls.n	80043cc <_free_r+0x48>
 80043b6:	6821      	ldr	r1, [r4, #0]
 80043b8:	1862      	adds	r2, r4, r1
 80043ba:	4293      	cmp	r3, r2
 80043bc:	bf01      	itttt	eq
 80043be:	681a      	ldreq	r2, [r3, #0]
 80043c0:	685b      	ldreq	r3, [r3, #4]
 80043c2:	1852      	addeq	r2, r2, r1
 80043c4:	6022      	streq	r2, [r4, #0]
 80043c6:	6063      	str	r3, [r4, #4]
 80043c8:	6004      	str	r4, [r0, #0]
 80043ca:	e7ed      	b.n	80043a8 <_free_r+0x24>
 80043cc:	461a      	mov	r2, r3
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	b10b      	cbz	r3, 80043d6 <_free_r+0x52>
 80043d2:	42a3      	cmp	r3, r4
 80043d4:	d9fa      	bls.n	80043cc <_free_r+0x48>
 80043d6:	6811      	ldr	r1, [r2, #0]
 80043d8:	1850      	adds	r0, r2, r1
 80043da:	42a0      	cmp	r0, r4
 80043dc:	d10b      	bne.n	80043f6 <_free_r+0x72>
 80043de:	6820      	ldr	r0, [r4, #0]
 80043e0:	4401      	add	r1, r0
 80043e2:	1850      	adds	r0, r2, r1
 80043e4:	4283      	cmp	r3, r0
 80043e6:	6011      	str	r1, [r2, #0]
 80043e8:	d1de      	bne.n	80043a8 <_free_r+0x24>
 80043ea:	6818      	ldr	r0, [r3, #0]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	4401      	add	r1, r0
 80043f0:	6011      	str	r1, [r2, #0]
 80043f2:	6053      	str	r3, [r2, #4]
 80043f4:	e7d8      	b.n	80043a8 <_free_r+0x24>
 80043f6:	d902      	bls.n	80043fe <_free_r+0x7a>
 80043f8:	230c      	movs	r3, #12
 80043fa:	602b      	str	r3, [r5, #0]
 80043fc:	e7d4      	b.n	80043a8 <_free_r+0x24>
 80043fe:	6820      	ldr	r0, [r4, #0]
 8004400:	1821      	adds	r1, r4, r0
 8004402:	428b      	cmp	r3, r1
 8004404:	bf01      	itttt	eq
 8004406:	6819      	ldreq	r1, [r3, #0]
 8004408:	685b      	ldreq	r3, [r3, #4]
 800440a:	1809      	addeq	r1, r1, r0
 800440c:	6021      	streq	r1, [r4, #0]
 800440e:	6063      	str	r3, [r4, #4]
 8004410:	6054      	str	r4, [r2, #4]
 8004412:	e7c9      	b.n	80043a8 <_free_r+0x24>
 8004414:	bd38      	pop	{r3, r4, r5, pc}
 8004416:	bf00      	nop
 8004418:	200002a0 	.word	0x200002a0

0800441c <_malloc_r>:
 800441c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800441e:	1ccd      	adds	r5, r1, #3
 8004420:	f025 0503 	bic.w	r5, r5, #3
 8004424:	3508      	adds	r5, #8
 8004426:	2d0c      	cmp	r5, #12
 8004428:	bf38      	it	cc
 800442a:	250c      	movcc	r5, #12
 800442c:	2d00      	cmp	r5, #0
 800442e:	4606      	mov	r6, r0
 8004430:	db01      	blt.n	8004436 <_malloc_r+0x1a>
 8004432:	42a9      	cmp	r1, r5
 8004434:	d903      	bls.n	800443e <_malloc_r+0x22>
 8004436:	230c      	movs	r3, #12
 8004438:	6033      	str	r3, [r6, #0]
 800443a:	2000      	movs	r0, #0
 800443c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800443e:	f000 f87d 	bl	800453c <__malloc_lock>
 8004442:	4921      	ldr	r1, [pc, #132]	; (80044c8 <_malloc_r+0xac>)
 8004444:	680a      	ldr	r2, [r1, #0]
 8004446:	4614      	mov	r4, r2
 8004448:	b99c      	cbnz	r4, 8004472 <_malloc_r+0x56>
 800444a:	4f20      	ldr	r7, [pc, #128]	; (80044cc <_malloc_r+0xb0>)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	b923      	cbnz	r3, 800445a <_malloc_r+0x3e>
 8004450:	4621      	mov	r1, r4
 8004452:	4630      	mov	r0, r6
 8004454:	f000 f862 	bl	800451c <_sbrk_r>
 8004458:	6038      	str	r0, [r7, #0]
 800445a:	4629      	mov	r1, r5
 800445c:	4630      	mov	r0, r6
 800445e:	f000 f85d 	bl	800451c <_sbrk_r>
 8004462:	1c43      	adds	r3, r0, #1
 8004464:	d123      	bne.n	80044ae <_malloc_r+0x92>
 8004466:	230c      	movs	r3, #12
 8004468:	4630      	mov	r0, r6
 800446a:	6033      	str	r3, [r6, #0]
 800446c:	f000 f86c 	bl	8004548 <__malloc_unlock>
 8004470:	e7e3      	b.n	800443a <_malloc_r+0x1e>
 8004472:	6823      	ldr	r3, [r4, #0]
 8004474:	1b5b      	subs	r3, r3, r5
 8004476:	d417      	bmi.n	80044a8 <_malloc_r+0x8c>
 8004478:	2b0b      	cmp	r3, #11
 800447a:	d903      	bls.n	8004484 <_malloc_r+0x68>
 800447c:	6023      	str	r3, [r4, #0]
 800447e:	441c      	add	r4, r3
 8004480:	6025      	str	r5, [r4, #0]
 8004482:	e004      	b.n	800448e <_malloc_r+0x72>
 8004484:	6863      	ldr	r3, [r4, #4]
 8004486:	42a2      	cmp	r2, r4
 8004488:	bf0c      	ite	eq
 800448a:	600b      	streq	r3, [r1, #0]
 800448c:	6053      	strne	r3, [r2, #4]
 800448e:	4630      	mov	r0, r6
 8004490:	f000 f85a 	bl	8004548 <__malloc_unlock>
 8004494:	f104 000b 	add.w	r0, r4, #11
 8004498:	1d23      	adds	r3, r4, #4
 800449a:	f020 0007 	bic.w	r0, r0, #7
 800449e:	1ac2      	subs	r2, r0, r3
 80044a0:	d0cc      	beq.n	800443c <_malloc_r+0x20>
 80044a2:	1a1b      	subs	r3, r3, r0
 80044a4:	50a3      	str	r3, [r4, r2]
 80044a6:	e7c9      	b.n	800443c <_malloc_r+0x20>
 80044a8:	4622      	mov	r2, r4
 80044aa:	6864      	ldr	r4, [r4, #4]
 80044ac:	e7cc      	b.n	8004448 <_malloc_r+0x2c>
 80044ae:	1cc4      	adds	r4, r0, #3
 80044b0:	f024 0403 	bic.w	r4, r4, #3
 80044b4:	42a0      	cmp	r0, r4
 80044b6:	d0e3      	beq.n	8004480 <_malloc_r+0x64>
 80044b8:	1a21      	subs	r1, r4, r0
 80044ba:	4630      	mov	r0, r6
 80044bc:	f000 f82e 	bl	800451c <_sbrk_r>
 80044c0:	3001      	adds	r0, #1
 80044c2:	d1dd      	bne.n	8004480 <_malloc_r+0x64>
 80044c4:	e7cf      	b.n	8004466 <_malloc_r+0x4a>
 80044c6:	bf00      	nop
 80044c8:	200002a0 	.word	0x200002a0
 80044cc:	200002a4 	.word	0x200002a4

080044d0 <_realloc_r>:
 80044d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044d2:	4607      	mov	r7, r0
 80044d4:	4614      	mov	r4, r2
 80044d6:	460e      	mov	r6, r1
 80044d8:	b921      	cbnz	r1, 80044e4 <_realloc_r+0x14>
 80044da:	4611      	mov	r1, r2
 80044dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80044e0:	f7ff bf9c 	b.w	800441c <_malloc_r>
 80044e4:	b922      	cbnz	r2, 80044f0 <_realloc_r+0x20>
 80044e6:	f7ff ff4d 	bl	8004384 <_free_r>
 80044ea:	4625      	mov	r5, r4
 80044ec:	4628      	mov	r0, r5
 80044ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80044f0:	f000 f830 	bl	8004554 <_malloc_usable_size_r>
 80044f4:	42a0      	cmp	r0, r4
 80044f6:	d20f      	bcs.n	8004518 <_realloc_r+0x48>
 80044f8:	4621      	mov	r1, r4
 80044fa:	4638      	mov	r0, r7
 80044fc:	f7ff ff8e 	bl	800441c <_malloc_r>
 8004500:	4605      	mov	r5, r0
 8004502:	2800      	cmp	r0, #0
 8004504:	d0f2      	beq.n	80044ec <_realloc_r+0x1c>
 8004506:	4631      	mov	r1, r6
 8004508:	4622      	mov	r2, r4
 800450a:	f7ff fbeb 	bl	8003ce4 <memcpy>
 800450e:	4631      	mov	r1, r6
 8004510:	4638      	mov	r0, r7
 8004512:	f7ff ff37 	bl	8004384 <_free_r>
 8004516:	e7e9      	b.n	80044ec <_realloc_r+0x1c>
 8004518:	4635      	mov	r5, r6
 800451a:	e7e7      	b.n	80044ec <_realloc_r+0x1c>

0800451c <_sbrk_r>:
 800451c:	b538      	push	{r3, r4, r5, lr}
 800451e:	2300      	movs	r3, #0
 8004520:	4d05      	ldr	r5, [pc, #20]	; (8004538 <_sbrk_r+0x1c>)
 8004522:	4604      	mov	r4, r0
 8004524:	4608      	mov	r0, r1
 8004526:	602b      	str	r3, [r5, #0]
 8004528:	f7fd f8f4 	bl	8001714 <_sbrk>
 800452c:	1c43      	adds	r3, r0, #1
 800452e:	d102      	bne.n	8004536 <_sbrk_r+0x1a>
 8004530:	682b      	ldr	r3, [r5, #0]
 8004532:	b103      	cbz	r3, 8004536 <_sbrk_r+0x1a>
 8004534:	6023      	str	r3, [r4, #0]
 8004536:	bd38      	pop	{r3, r4, r5, pc}
 8004538:	2000035c 	.word	0x2000035c

0800453c <__malloc_lock>:
 800453c:	4801      	ldr	r0, [pc, #4]	; (8004544 <__malloc_lock+0x8>)
 800453e:	f000 b811 	b.w	8004564 <__retarget_lock_acquire_recursive>
 8004542:	bf00      	nop
 8004544:	20000364 	.word	0x20000364

08004548 <__malloc_unlock>:
 8004548:	4801      	ldr	r0, [pc, #4]	; (8004550 <__malloc_unlock+0x8>)
 800454a:	f000 b80c 	b.w	8004566 <__retarget_lock_release_recursive>
 800454e:	bf00      	nop
 8004550:	20000364 	.word	0x20000364

08004554 <_malloc_usable_size_r>:
 8004554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004558:	1f18      	subs	r0, r3, #4
 800455a:	2b00      	cmp	r3, #0
 800455c:	bfbc      	itt	lt
 800455e:	580b      	ldrlt	r3, [r1, r0]
 8004560:	18c0      	addlt	r0, r0, r3
 8004562:	4770      	bx	lr

08004564 <__retarget_lock_acquire_recursive>:
 8004564:	4770      	bx	lr

08004566 <__retarget_lock_release_recursive>:
 8004566:	4770      	bx	lr

08004568 <_init>:
 8004568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800456a:	bf00      	nop
 800456c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800456e:	bc08      	pop	{r3}
 8004570:	469e      	mov	lr, r3
 8004572:	4770      	bx	lr

08004574 <_fini>:
 8004574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004576:	bf00      	nop
 8004578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800457a:	bc08      	pop	{r3}
 800457c:	469e      	mov	lr, r3
 800457e:	4770      	bx	lr
