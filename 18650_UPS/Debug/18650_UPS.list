
18650_UPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059d0  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001628  08005b10  08005b10  00015b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007138  08007138  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  08007138  08007138  00017138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007140  08007140  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007140  08007140  00017140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007144  08007144  00017144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08007148  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000033c  20000084  080071cc  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003c0  080071cc  000203c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efc5  00000000  00000000  000200ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002076  00000000  00000000  0002f072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de0  00000000  00000000  000310e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00031ec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199c2  00000000  00000000  00032c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010382  00000000  00000000  0004c5c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008b469  00000000  00000000  0005c944  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7dad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004028  00000000  00000000  000e7e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000084 	.word	0x20000084
 800015c:	00000000 	.word	0x00000000
 8000160:	08005af8 	.word	0x08005af8

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000088 	.word	0x20000088
 800017c:	08005af8 	.word	0x08005af8

08000180 <__aeabi_drsub>:
 8000180:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000184:	e002      	b.n	800018c <__adddf3>
 8000186:	bf00      	nop

08000188 <__aeabi_dsub>:
 8000188:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800018c <__adddf3>:
 800018c:	b530      	push	{r4, r5, lr}
 800018e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000192:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000196:	ea94 0f05 	teq	r4, r5
 800019a:	bf08      	it	eq
 800019c:	ea90 0f02 	teqeq	r0, r2
 80001a0:	bf1f      	itttt	ne
 80001a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001b2:	f000 80e2 	beq.w	800037a <__adddf3+0x1ee>
 80001b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001be:	bfb8      	it	lt
 80001c0:	426d      	neglt	r5, r5
 80001c2:	dd0c      	ble.n	80001de <__adddf3+0x52>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	ea82 0000 	eor.w	r0, r2, r0
 80001d2:	ea83 0101 	eor.w	r1, r3, r1
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	2d36      	cmp	r5, #54	; 0x36
 80001e0:	bf88      	it	hi
 80001e2:	bd30      	pophi	{r4, r5, pc}
 80001e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001f4:	d002      	beq.n	80001fc <__adddf3+0x70>
 80001f6:	4240      	negs	r0, r0
 80001f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000200:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000204:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x84>
 800020a:	4252      	negs	r2, r2
 800020c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000210:	ea94 0f05 	teq	r4, r5
 8000214:	f000 80a7 	beq.w	8000366 <__adddf3+0x1da>
 8000218:	f1a4 0401 	sub.w	r4, r4, #1
 800021c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000220:	db0d      	blt.n	800023e <__adddf3+0xb2>
 8000222:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000226:	fa22 f205 	lsr.w	r2, r2, r5
 800022a:	1880      	adds	r0, r0, r2
 800022c:	f141 0100 	adc.w	r1, r1, #0
 8000230:	fa03 f20e 	lsl.w	r2, r3, lr
 8000234:	1880      	adds	r0, r0, r2
 8000236:	fa43 f305 	asr.w	r3, r3, r5
 800023a:	4159      	adcs	r1, r3
 800023c:	e00e      	b.n	800025c <__adddf3+0xd0>
 800023e:	f1a5 0520 	sub.w	r5, r5, #32
 8000242:	f10e 0e20 	add.w	lr, lr, #32
 8000246:	2a01      	cmp	r2, #1
 8000248:	fa03 fc0e 	lsl.w	ip, r3, lr
 800024c:	bf28      	it	cs
 800024e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000252:	fa43 f305 	asr.w	r3, r3, r5
 8000256:	18c0      	adds	r0, r0, r3
 8000258:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800025c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000260:	d507      	bpl.n	8000272 <__adddf3+0xe6>
 8000262:	f04f 0e00 	mov.w	lr, #0
 8000266:	f1dc 0c00 	rsbs	ip, ip, #0
 800026a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800026e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000272:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000276:	d31b      	bcc.n	80002b0 <__adddf3+0x124>
 8000278:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800027c:	d30c      	bcc.n	8000298 <__adddf3+0x10c>
 800027e:	0849      	lsrs	r1, r1, #1
 8000280:	ea5f 0030 	movs.w	r0, r0, rrx
 8000284:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000288:	f104 0401 	add.w	r4, r4, #1
 800028c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000290:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000294:	f080 809a 	bcs.w	80003cc <__adddf3+0x240>
 8000298:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800029c:	bf08      	it	eq
 800029e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002a2:	f150 0000 	adcs.w	r0, r0, #0
 80002a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002aa:	ea41 0105 	orr.w	r1, r1, r5
 80002ae:	bd30      	pop	{r4, r5, pc}
 80002b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002b4:	4140      	adcs	r0, r0
 80002b6:	eb41 0101 	adc.w	r1, r1, r1
 80002ba:	3c01      	subs	r4, #1
 80002bc:	bf28      	it	cs
 80002be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002c2:	d2e9      	bcs.n	8000298 <__adddf3+0x10c>
 80002c4:	f091 0f00 	teq	r1, #0
 80002c8:	bf04      	itt	eq
 80002ca:	4601      	moveq	r1, r0
 80002cc:	2000      	moveq	r0, #0
 80002ce:	fab1 f381 	clz	r3, r1
 80002d2:	bf08      	it	eq
 80002d4:	3320      	addeq	r3, #32
 80002d6:	f1a3 030b 	sub.w	r3, r3, #11
 80002da:	f1b3 0220 	subs.w	r2, r3, #32
 80002de:	da0c      	bge.n	80002fa <__adddf3+0x16e>
 80002e0:	320c      	adds	r2, #12
 80002e2:	dd08      	ble.n	80002f6 <__adddf3+0x16a>
 80002e4:	f102 0c14 	add.w	ip, r2, #20
 80002e8:	f1c2 020c 	rsb	r2, r2, #12
 80002ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f0:	fa21 f102 	lsr.w	r1, r1, r2
 80002f4:	e00c      	b.n	8000310 <__adddf3+0x184>
 80002f6:	f102 0214 	add.w	r2, r2, #20
 80002fa:	bfd8      	it	le
 80002fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000300:	fa01 f102 	lsl.w	r1, r1, r2
 8000304:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000308:	bfdc      	itt	le
 800030a:	ea41 010c 	orrle.w	r1, r1, ip
 800030e:	4090      	lslle	r0, r2
 8000310:	1ae4      	subs	r4, r4, r3
 8000312:	bfa2      	ittt	ge
 8000314:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000318:	4329      	orrge	r1, r5
 800031a:	bd30      	popge	{r4, r5, pc}
 800031c:	ea6f 0404 	mvn.w	r4, r4
 8000320:	3c1f      	subs	r4, #31
 8000322:	da1c      	bge.n	800035e <__adddf3+0x1d2>
 8000324:	340c      	adds	r4, #12
 8000326:	dc0e      	bgt.n	8000346 <__adddf3+0x1ba>
 8000328:	f104 0414 	add.w	r4, r4, #20
 800032c:	f1c4 0220 	rsb	r2, r4, #32
 8000330:	fa20 f004 	lsr.w	r0, r0, r4
 8000334:	fa01 f302 	lsl.w	r3, r1, r2
 8000338:	ea40 0003 	orr.w	r0, r0, r3
 800033c:	fa21 f304 	lsr.w	r3, r1, r4
 8000340:	ea45 0103 	orr.w	r1, r5, r3
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f1c4 040c 	rsb	r4, r4, #12
 800034a:	f1c4 0220 	rsb	r2, r4, #32
 800034e:	fa20 f002 	lsr.w	r0, r0, r2
 8000352:	fa01 f304 	lsl.w	r3, r1, r4
 8000356:	ea40 0003 	orr.w	r0, r0, r3
 800035a:	4629      	mov	r1, r5
 800035c:	bd30      	pop	{r4, r5, pc}
 800035e:	fa21 f004 	lsr.w	r0, r1, r4
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	f094 0f00 	teq	r4, #0
 800036a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800036e:	bf06      	itte	eq
 8000370:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000374:	3401      	addeq	r4, #1
 8000376:	3d01      	subne	r5, #1
 8000378:	e74e      	b.n	8000218 <__adddf3+0x8c>
 800037a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800037e:	bf18      	it	ne
 8000380:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000384:	d029      	beq.n	80003da <__adddf3+0x24e>
 8000386:	ea94 0f05 	teq	r4, r5
 800038a:	bf08      	it	eq
 800038c:	ea90 0f02 	teqeq	r0, r2
 8000390:	d005      	beq.n	800039e <__adddf3+0x212>
 8000392:	ea54 0c00 	orrs.w	ip, r4, r0
 8000396:	bf04      	itt	eq
 8000398:	4619      	moveq	r1, r3
 800039a:	4610      	moveq	r0, r2
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	ea91 0f03 	teq	r1, r3
 80003a2:	bf1e      	ittt	ne
 80003a4:	2100      	movne	r1, #0
 80003a6:	2000      	movne	r0, #0
 80003a8:	bd30      	popne	{r4, r5, pc}
 80003aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ae:	d105      	bne.n	80003bc <__adddf3+0x230>
 80003b0:	0040      	lsls	r0, r0, #1
 80003b2:	4149      	adcs	r1, r1
 80003b4:	bf28      	it	cs
 80003b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ba:	bd30      	pop	{r4, r5, pc}
 80003bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c0:	bf3c      	itt	cc
 80003c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003c6:	bd30      	popcc	{r4, r5, pc}
 80003c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf1a      	itte	ne
 80003e0:	4619      	movne	r1, r3
 80003e2:	4610      	movne	r0, r2
 80003e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003e8:	bf1c      	itt	ne
 80003ea:	460b      	movne	r3, r1
 80003ec:	4602      	movne	r2, r0
 80003ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003f2:	bf06      	itte	eq
 80003f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003f8:	ea91 0f03 	teqeq	r1, r3
 80003fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000400:	bd30      	pop	{r4, r5, pc}
 8000402:	bf00      	nop

08000404 <__aeabi_ui2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f04f 0500 	mov.w	r5, #0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e750      	b.n	80002c4 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_i2d>:
 8000424:	f090 0f00 	teq	r0, #0
 8000428:	bf04      	itt	eq
 800042a:	2100      	moveq	r1, #0
 800042c:	4770      	bxeq	lr
 800042e:	b530      	push	{r4, r5, lr}
 8000430:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000434:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000438:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800043c:	bf48      	it	mi
 800043e:	4240      	negmi	r0, r0
 8000440:	f04f 0100 	mov.w	r1, #0
 8000444:	e73e      	b.n	80002c4 <__adddf3+0x138>
 8000446:	bf00      	nop

08000448 <__aeabi_f2d>:
 8000448:	0042      	lsls	r2, r0, #1
 800044a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800044e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000452:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000456:	bf1f      	itttt	ne
 8000458:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800045c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000460:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000464:	4770      	bxne	lr
 8000466:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800046a:	bf08      	it	eq
 800046c:	4770      	bxeq	lr
 800046e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000472:	bf04      	itt	eq
 8000474:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000488:	e71c      	b.n	80002c4 <__adddf3+0x138>
 800048a:	bf00      	nop

0800048c <__aeabi_ul2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f04f 0500 	mov.w	r5, #0
 800049a:	e00a      	b.n	80004b2 <__aeabi_l2d+0x16>

0800049c <__aeabi_l2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004aa:	d502      	bpl.n	80004b2 <__aeabi_l2d+0x16>
 80004ac:	4240      	negs	r0, r0
 80004ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004be:	f43f aed8 	beq.w	8000272 <__adddf3+0xe6>
 80004c2:	f04f 0203 	mov.w	r2, #3
 80004c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ca:	bf18      	it	ne
 80004cc:	3203      	addne	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	fa00 fc03 	lsl.w	ip, r0, r3
 80004e2:	fa20 f002 	lsr.w	r0, r0, r2
 80004e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ea:	ea40 000e 	orr.w	r0, r0, lr
 80004ee:	fa21 f102 	lsr.w	r1, r1, r2
 80004f2:	4414      	add	r4, r2
 80004f4:	e6bd      	b.n	8000272 <__adddf3+0xe6>
 80004f6:	bf00      	nop

080004f8 <__aeabi_dmul>:
 80004f8:	b570      	push	{r4, r5, r6, lr}
 80004fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000502:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000506:	bf1d      	ittte	ne
 8000508:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800050c:	ea94 0f0c 	teqne	r4, ip
 8000510:	ea95 0f0c 	teqne	r5, ip
 8000514:	f000 f8de 	bleq	80006d4 <__aeabi_dmul+0x1dc>
 8000518:	442c      	add	r4, r5
 800051a:	ea81 0603 	eor.w	r6, r1, r3
 800051e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000522:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000526:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800052a:	bf18      	it	ne
 800052c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000534:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000538:	d038      	beq.n	80005ac <__aeabi_dmul+0xb4>
 800053a:	fba0 ce02 	umull	ip, lr, r0, r2
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000546:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800054a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800054e:	f04f 0600 	mov.w	r6, #0
 8000552:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000556:	f09c 0f00 	teq	ip, #0
 800055a:	bf18      	it	ne
 800055c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000560:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000564:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000568:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800056c:	d204      	bcs.n	8000578 <__aeabi_dmul+0x80>
 800056e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000572:	416d      	adcs	r5, r5
 8000574:	eb46 0606 	adc.w	r6, r6, r6
 8000578:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800057c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000580:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000584:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000588:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800058c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000590:	bf88      	it	hi
 8000592:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000596:	d81e      	bhi.n	80005d6 <__aeabi_dmul+0xde>
 8000598:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800059c:	bf08      	it	eq
 800059e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005a2:	f150 0000 	adcs.w	r0, r0, #0
 80005a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	pop	{r4, r5, r6, pc}
 80005ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005b0:	ea46 0101 	orr.w	r1, r6, r1
 80005b4:	ea40 0002 	orr.w	r0, r0, r2
 80005b8:	ea81 0103 	eor.w	r1, r1, r3
 80005bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005c0:	bfc2      	ittt	gt
 80005c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ca:	bd70      	popgt	{r4, r5, r6, pc}
 80005cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d0:	f04f 0e00 	mov.w	lr, #0
 80005d4:	3c01      	subs	r4, #1
 80005d6:	f300 80ab 	bgt.w	8000730 <__aeabi_dmul+0x238>
 80005da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005de:	bfde      	ittt	le
 80005e0:	2000      	movle	r0, #0
 80005e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005e6:	bd70      	pople	{r4, r5, r6, pc}
 80005e8:	f1c4 0400 	rsb	r4, r4, #0
 80005ec:	3c20      	subs	r4, #32
 80005ee:	da35      	bge.n	800065c <__aeabi_dmul+0x164>
 80005f0:	340c      	adds	r4, #12
 80005f2:	dc1b      	bgt.n	800062c <__aeabi_dmul+0x134>
 80005f4:	f104 0414 	add.w	r4, r4, #20
 80005f8:	f1c4 0520 	rsb	r5, r4, #32
 80005fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000600:	fa20 f004 	lsr.w	r0, r0, r4
 8000604:	fa01 f205 	lsl.w	r2, r1, r5
 8000608:	ea40 0002 	orr.w	r0, r0, r2
 800060c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000610:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	fa21 f604 	lsr.w	r6, r1, r4
 800061c:	eb42 0106 	adc.w	r1, r2, r6
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 040c 	rsb	r4, r4, #12
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f304 	lsl.w	r3, r0, r4
 8000638:	fa20 f005 	lsr.w	r0, r0, r5
 800063c:	fa01 f204 	lsl.w	r2, r1, r4
 8000640:	ea40 0002 	orr.w	r0, r0, r2
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800064c:	f141 0100 	adc.w	r1, r1, #0
 8000650:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000654:	bf08      	it	eq
 8000656:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f1c4 0520 	rsb	r5, r4, #32
 8000660:	fa00 f205 	lsl.w	r2, r0, r5
 8000664:	ea4e 0e02 	orr.w	lr, lr, r2
 8000668:	fa20 f304 	lsr.w	r3, r0, r4
 800066c:	fa01 f205 	lsl.w	r2, r1, r5
 8000670:	ea43 0302 	orr.w	r3, r3, r2
 8000674:	fa21 f004 	lsr.w	r0, r1, r4
 8000678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800067c:	fa21 f204 	lsr.w	r2, r1, r4
 8000680:	ea20 0002 	bic.w	r0, r0, r2
 8000684:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000688:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800068c:	bf08      	it	eq
 800068e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f094 0f00 	teq	r4, #0
 8000698:	d10f      	bne.n	80006ba <__aeabi_dmul+0x1c2>
 800069a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800069e:	0040      	lsls	r0, r0, #1
 80006a0:	eb41 0101 	adc.w	r1, r1, r1
 80006a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3c01      	subeq	r4, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1a6>
 80006ae:	ea41 0106 	orr.w	r1, r1, r6
 80006b2:	f095 0f00 	teq	r5, #0
 80006b6:	bf18      	it	ne
 80006b8:	4770      	bxne	lr
 80006ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006be:	0052      	lsls	r2, r2, #1
 80006c0:	eb43 0303 	adc.w	r3, r3, r3
 80006c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006c8:	bf08      	it	eq
 80006ca:	3d01      	subeq	r5, #1
 80006cc:	d0f7      	beq.n	80006be <__aeabi_dmul+0x1c6>
 80006ce:	ea43 0306 	orr.w	r3, r3, r6
 80006d2:	4770      	bx	lr
 80006d4:	ea94 0f0c 	teq	r4, ip
 80006d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006dc:	bf18      	it	ne
 80006de:	ea95 0f0c 	teqne	r5, ip
 80006e2:	d00c      	beq.n	80006fe <__aeabi_dmul+0x206>
 80006e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e8:	bf18      	it	ne
 80006ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ee:	d1d1      	bne.n	8000694 <__aeabi_dmul+0x19c>
 80006f0:	ea81 0103 	eor.w	r1, r1, r3
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	f04f 0000 	mov.w	r0, #0
 80006fc:	bd70      	pop	{r4, r5, r6, pc}
 80006fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000702:	bf06      	itte	eq
 8000704:	4610      	moveq	r0, r2
 8000706:	4619      	moveq	r1, r3
 8000708:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800070c:	d019      	beq.n	8000742 <__aeabi_dmul+0x24a>
 800070e:	ea94 0f0c 	teq	r4, ip
 8000712:	d102      	bne.n	800071a <__aeabi_dmul+0x222>
 8000714:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000718:	d113      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800071a:	ea95 0f0c 	teq	r5, ip
 800071e:	d105      	bne.n	800072c <__aeabi_dmul+0x234>
 8000720:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000724:	bf1c      	itt	ne
 8000726:	4610      	movne	r0, r2
 8000728:	4619      	movne	r1, r3
 800072a:	d10a      	bne.n	8000742 <__aeabi_dmul+0x24a>
 800072c:	ea81 0103 	eor.w	r1, r1, r3
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd70      	pop	{r4, r5, r6, pc}
 8000742:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000746:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800074a:	bd70      	pop	{r4, r5, r6, pc}

0800074c <__aeabi_ddiv>:
 800074c:	b570      	push	{r4, r5, r6, lr}
 800074e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000752:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000756:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800075a:	bf1d      	ittte	ne
 800075c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000760:	ea94 0f0c 	teqne	r4, ip
 8000764:	ea95 0f0c 	teqne	r5, ip
 8000768:	f000 f8a7 	bleq	80008ba <__aeabi_ddiv+0x16e>
 800076c:	eba4 0405 	sub.w	r4, r4, r5
 8000770:	ea81 0e03 	eor.w	lr, r1, r3
 8000774:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000778:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800077c:	f000 8088 	beq.w	8000890 <__aeabi_ddiv+0x144>
 8000780:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000784:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000788:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800078c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000790:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000794:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000798:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800079c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007a4:	429d      	cmp	r5, r3
 80007a6:	bf08      	it	eq
 80007a8:	4296      	cmpeq	r6, r2
 80007aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007b2:	d202      	bcs.n	80007ba <__aeabi_ddiv+0x6e>
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	1ab6      	subs	r6, r6, r2
 80007bc:	eb65 0503 	sbc.w	r5, r5, r3
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007f8:	085b      	lsrs	r3, r3, #1
 80007fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000806:	bf22      	ittt	cs
 8000808:	1ab6      	subcs	r6, r6, r2
 800080a:	4675      	movcs	r5, lr
 800080c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000828:	ea55 0e06 	orrs.w	lr, r5, r6
 800082c:	d018      	beq.n	8000860 <__aeabi_ddiv+0x114>
 800082e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000832:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000836:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800083a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800083e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000842:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000846:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800084a:	d1c0      	bne.n	80007ce <__aeabi_ddiv+0x82>
 800084c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000850:	d10b      	bne.n	800086a <__aeabi_ddiv+0x11e>
 8000852:	ea41 0100 	orr.w	r1, r1, r0
 8000856:	f04f 0000 	mov.w	r0, #0
 800085a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800085e:	e7b6      	b.n	80007ce <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000864:	bf04      	itt	eq
 8000866:	4301      	orreq	r1, r0
 8000868:	2000      	moveq	r0, #0
 800086a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800086e:	bf88      	it	hi
 8000870:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000874:	f63f aeaf 	bhi.w	80005d6 <__aeabi_dmul+0xde>
 8000878:	ebb5 0c03 	subs.w	ip, r5, r3
 800087c:	bf04      	itt	eq
 800087e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000882:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000886:	f150 0000 	adcs.w	r0, r0, #0
 800088a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000894:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000898:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800089c:	bfc2      	ittt	gt
 800089e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008a6:	bd70      	popgt	{r4, r5, r6, pc}
 80008a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ac:	f04f 0e00 	mov.w	lr, #0
 80008b0:	3c01      	subs	r4, #1
 80008b2:	e690      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008b4:	ea45 0e06 	orr.w	lr, r5, r6
 80008b8:	e68d      	b.n	80005d6 <__aeabi_dmul+0xde>
 80008ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	bf08      	it	eq
 80008c4:	ea95 0f0c 	teqeq	r5, ip
 80008c8:	f43f af3b 	beq.w	8000742 <__aeabi_dmul+0x24a>
 80008cc:	ea94 0f0c 	teq	r4, ip
 80008d0:	d10a      	bne.n	80008e8 <__aeabi_ddiv+0x19c>
 80008d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008d6:	f47f af34 	bne.w	8000742 <__aeabi_dmul+0x24a>
 80008da:	ea95 0f0c 	teq	r5, ip
 80008de:	f47f af25 	bne.w	800072c <__aeabi_dmul+0x234>
 80008e2:	4610      	mov	r0, r2
 80008e4:	4619      	mov	r1, r3
 80008e6:	e72c      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008e8:	ea95 0f0c 	teq	r5, ip
 80008ec:	d106      	bne.n	80008fc <__aeabi_ddiv+0x1b0>
 80008ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008f2:	f43f aefd 	beq.w	80006f0 <__aeabi_dmul+0x1f8>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e722      	b.n	8000742 <__aeabi_dmul+0x24a>
 80008fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000900:	bf18      	it	ne
 8000902:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000906:	f47f aec5 	bne.w	8000694 <__aeabi_dmul+0x19c>
 800090a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800090e:	f47f af0d 	bne.w	800072c <__aeabi_dmul+0x234>
 8000912:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000916:	f47f aeeb 	bne.w	80006f0 <__aeabi_dmul+0x1f8>
 800091a:	e712      	b.n	8000742 <__aeabi_dmul+0x24a>

0800091c <__aeabi_d2uiz>:
 800091c:	004a      	lsls	r2, r1, #1
 800091e:	d211      	bcs.n	8000944 <__aeabi_d2uiz+0x28>
 8000920:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000924:	d211      	bcs.n	800094a <__aeabi_d2uiz+0x2e>
 8000926:	d50d      	bpl.n	8000944 <__aeabi_d2uiz+0x28>
 8000928:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800092c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000930:	d40e      	bmi.n	8000950 <__aeabi_d2uiz+0x34>
 8000932:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000936:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800093a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800093e:	fa23 f002 	lsr.w	r0, r3, r2
 8000942:	4770      	bx	lr
 8000944:	f04f 0000 	mov.w	r0, #0
 8000948:	4770      	bx	lr
 800094a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800094e:	d102      	bne.n	8000956 <__aeabi_d2uiz+0x3a>
 8000950:	f04f 30ff 	mov.w	r0, #4294967295
 8000954:	4770      	bx	lr
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	4770      	bx	lr

0800095c <__aeabi_frsub>:
 800095c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000960:	e002      	b.n	8000968 <__addsf3>
 8000962:	bf00      	nop

08000964 <__aeabi_fsub>:
 8000964:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000968 <__addsf3>:
 8000968:	0042      	lsls	r2, r0, #1
 800096a:	bf1f      	itttt	ne
 800096c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000970:	ea92 0f03 	teqne	r2, r3
 8000974:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000978:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800097c:	d06a      	beq.n	8000a54 <__addsf3+0xec>
 800097e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000982:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000986:	bfc1      	itttt	gt
 8000988:	18d2      	addgt	r2, r2, r3
 800098a:	4041      	eorgt	r1, r0
 800098c:	4048      	eorgt	r0, r1
 800098e:	4041      	eorgt	r1, r0
 8000990:	bfb8      	it	lt
 8000992:	425b      	neglt	r3, r3
 8000994:	2b19      	cmp	r3, #25
 8000996:	bf88      	it	hi
 8000998:	4770      	bxhi	lr
 800099a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800099e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009a6:	bf18      	it	ne
 80009a8:	4240      	negne	r0, r0
 80009aa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ae:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009b2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009b6:	bf18      	it	ne
 80009b8:	4249      	negne	r1, r1
 80009ba:	ea92 0f03 	teq	r2, r3
 80009be:	d03f      	beq.n	8000a40 <__addsf3+0xd8>
 80009c0:	f1a2 0201 	sub.w	r2, r2, #1
 80009c4:	fa41 fc03 	asr.w	ip, r1, r3
 80009c8:	eb10 000c 	adds.w	r0, r0, ip
 80009cc:	f1c3 0320 	rsb	r3, r3, #32
 80009d0:	fa01 f103 	lsl.w	r1, r1, r3
 80009d4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009d8:	d502      	bpl.n	80009e0 <__addsf3+0x78>
 80009da:	4249      	negs	r1, r1
 80009dc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009e0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009e4:	d313      	bcc.n	8000a0e <__addsf3+0xa6>
 80009e6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009ea:	d306      	bcc.n	80009fa <__addsf3+0x92>
 80009ec:	0840      	lsrs	r0, r0, #1
 80009ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80009f2:	f102 0201 	add.w	r2, r2, #1
 80009f6:	2afe      	cmp	r2, #254	; 0xfe
 80009f8:	d251      	bcs.n	8000a9e <__addsf3+0x136>
 80009fa:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80009fe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a02:	bf08      	it	eq
 8000a04:	f020 0001 	biceq.w	r0, r0, #1
 8000a08:	ea40 0003 	orr.w	r0, r0, r3
 8000a0c:	4770      	bx	lr
 8000a0e:	0049      	lsls	r1, r1, #1
 8000a10:	eb40 0000 	adc.w	r0, r0, r0
 8000a14:	3a01      	subs	r2, #1
 8000a16:	bf28      	it	cs
 8000a18:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a1c:	d2ed      	bcs.n	80009fa <__addsf3+0x92>
 8000a1e:	fab0 fc80 	clz	ip, r0
 8000a22:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a26:	ebb2 020c 	subs.w	r2, r2, ip
 8000a2a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a2e:	bfaa      	itet	ge
 8000a30:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a34:	4252      	neglt	r2, r2
 8000a36:	4318      	orrge	r0, r3
 8000a38:	bfbc      	itt	lt
 8000a3a:	40d0      	lsrlt	r0, r2
 8000a3c:	4318      	orrlt	r0, r3
 8000a3e:	4770      	bx	lr
 8000a40:	f092 0f00 	teq	r2, #0
 8000a44:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a48:	bf06      	itte	eq
 8000a4a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a4e:	3201      	addeq	r2, #1
 8000a50:	3b01      	subne	r3, #1
 8000a52:	e7b5      	b.n	80009c0 <__addsf3+0x58>
 8000a54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a5c:	bf18      	it	ne
 8000a5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a62:	d021      	beq.n	8000aa8 <__addsf3+0x140>
 8000a64:	ea92 0f03 	teq	r2, r3
 8000a68:	d004      	beq.n	8000a74 <__addsf3+0x10c>
 8000a6a:	f092 0f00 	teq	r2, #0
 8000a6e:	bf08      	it	eq
 8000a70:	4608      	moveq	r0, r1
 8000a72:	4770      	bx	lr
 8000a74:	ea90 0f01 	teq	r0, r1
 8000a78:	bf1c      	itt	ne
 8000a7a:	2000      	movne	r0, #0
 8000a7c:	4770      	bxne	lr
 8000a7e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a82:	d104      	bne.n	8000a8e <__addsf3+0x126>
 8000a84:	0040      	lsls	r0, r0, #1
 8000a86:	bf28      	it	cs
 8000a88:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	4770      	bx	lr
 8000a8e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a92:	bf3c      	itt	cc
 8000a94:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000a98:	4770      	bxcc	lr
 8000a9a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a9e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000aa2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa6:	4770      	bx	lr
 8000aa8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000aac:	bf16      	itet	ne
 8000aae:	4608      	movne	r0, r1
 8000ab0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ab4:	4601      	movne	r1, r0
 8000ab6:	0242      	lsls	r2, r0, #9
 8000ab8:	bf06      	itte	eq
 8000aba:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000abe:	ea90 0f01 	teqeq	r0, r1
 8000ac2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_ui2f>:
 8000ac8:	f04f 0300 	mov.w	r3, #0
 8000acc:	e004      	b.n	8000ad8 <__aeabi_i2f+0x8>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_i2f>:
 8000ad0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ad4:	bf48      	it	mi
 8000ad6:	4240      	negmi	r0, r0
 8000ad8:	ea5f 0c00 	movs.w	ip, r0
 8000adc:	bf08      	it	eq
 8000ade:	4770      	bxeq	lr
 8000ae0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ae4:	4601      	mov	r1, r0
 8000ae6:	f04f 0000 	mov.w	r0, #0
 8000aea:	e01c      	b.n	8000b26 <__aeabi_l2f+0x2a>

08000aec <__aeabi_ul2f>:
 8000aec:	ea50 0201 	orrs.w	r2, r0, r1
 8000af0:	bf08      	it	eq
 8000af2:	4770      	bxeq	lr
 8000af4:	f04f 0300 	mov.w	r3, #0
 8000af8:	e00a      	b.n	8000b10 <__aeabi_l2f+0x14>
 8000afa:	bf00      	nop

08000afc <__aeabi_l2f>:
 8000afc:	ea50 0201 	orrs.w	r2, r0, r1
 8000b00:	bf08      	it	eq
 8000b02:	4770      	bxeq	lr
 8000b04:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b08:	d502      	bpl.n	8000b10 <__aeabi_l2f+0x14>
 8000b0a:	4240      	negs	r0, r0
 8000b0c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b10:	ea5f 0c01 	movs.w	ip, r1
 8000b14:	bf02      	ittt	eq
 8000b16:	4684      	moveq	ip, r0
 8000b18:	4601      	moveq	r1, r0
 8000b1a:	2000      	moveq	r0, #0
 8000b1c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b20:	bf08      	it	eq
 8000b22:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b26:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b2a:	fabc f28c 	clz	r2, ip
 8000b2e:	3a08      	subs	r2, #8
 8000b30:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b34:	db10      	blt.n	8000b58 <__aeabi_l2f+0x5c>
 8000b36:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b3a:	4463      	add	r3, ip
 8000b3c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b40:	f1c2 0220 	rsb	r2, r2, #32
 8000b44:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b48:	fa20 f202 	lsr.w	r2, r0, r2
 8000b4c:	eb43 0002 	adc.w	r0, r3, r2
 8000b50:	bf08      	it	eq
 8000b52:	f020 0001 	biceq.w	r0, r0, #1
 8000b56:	4770      	bx	lr
 8000b58:	f102 0220 	add.w	r2, r2, #32
 8000b5c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b60:	f1c2 0220 	rsb	r2, r2, #32
 8000b64:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b68:	fa21 f202 	lsr.w	r2, r1, r2
 8000b6c:	eb43 0002 	adc.w	r0, r3, r2
 8000b70:	bf08      	it	eq
 8000b72:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_uldivmod>:
 8000b78:	b953      	cbnz	r3, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7a:	b94a      	cbnz	r2, 8000b90 <__aeabi_uldivmod+0x18>
 8000b7c:	2900      	cmp	r1, #0
 8000b7e:	bf08      	it	eq
 8000b80:	2800      	cmpeq	r0, #0
 8000b82:	bf1c      	itt	ne
 8000b84:	f04f 31ff 	movne.w	r1, #4294967295
 8000b88:	f04f 30ff 	movne.w	r0, #4294967295
 8000b8c:	f000 b96e 	b.w	8000e6c <__aeabi_idiv0>
 8000b90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b98:	f000 f806 	bl	8000ba8 <__udivmoddi4>
 8000b9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ba0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba4:	b004      	add	sp, #16
 8000ba6:	4770      	bx	lr

08000ba8 <__udivmoddi4>:
 8000ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bac:	9e08      	ldr	r6, [sp, #32]
 8000bae:	460d      	mov	r5, r1
 8000bb0:	4604      	mov	r4, r0
 8000bb2:	468e      	mov	lr, r1
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	f040 8083 	bne.w	8000cc0 <__udivmoddi4+0x118>
 8000bba:	428a      	cmp	r2, r1
 8000bbc:	4617      	mov	r7, r2
 8000bbe:	d947      	bls.n	8000c50 <__udivmoddi4+0xa8>
 8000bc0:	fab2 f382 	clz	r3, r2
 8000bc4:	b14b      	cbz	r3, 8000bda <__udivmoddi4+0x32>
 8000bc6:	f1c3 0120 	rsb	r1, r3, #32
 8000bca:	fa05 fe03 	lsl.w	lr, r5, r3
 8000bce:	fa20 f101 	lsr.w	r1, r0, r1
 8000bd2:	409f      	lsls	r7, r3
 8000bd4:	ea41 0e0e 	orr.w	lr, r1, lr
 8000bd8:	409c      	lsls	r4, r3
 8000bda:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000bde:	fbbe fcf8 	udiv	ip, lr, r8
 8000be2:	fa1f f987 	uxth.w	r9, r7
 8000be6:	fb08 e21c 	mls	r2, r8, ip, lr
 8000bea:	fb0c f009 	mul.w	r0, ip, r9
 8000bee:	0c21      	lsrs	r1, r4, #16
 8000bf0:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8000bf4:	4290      	cmp	r0, r2
 8000bf6:	d90a      	bls.n	8000c0e <__udivmoddi4+0x66>
 8000bf8:	18ba      	adds	r2, r7, r2
 8000bfa:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000bfe:	f080 8118 	bcs.w	8000e32 <__udivmoddi4+0x28a>
 8000c02:	4290      	cmp	r0, r2
 8000c04:	f240 8115 	bls.w	8000e32 <__udivmoddi4+0x28a>
 8000c08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c0c:	443a      	add	r2, r7
 8000c0e:	1a12      	subs	r2, r2, r0
 8000c10:	fbb2 f0f8 	udiv	r0, r2, r8
 8000c14:	fb08 2210 	mls	r2, r8, r0, r2
 8000c18:	fb00 f109 	mul.w	r1, r0, r9
 8000c1c:	b2a4      	uxth	r4, r4
 8000c1e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c22:	42a1      	cmp	r1, r4
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x92>
 8000c26:	193c      	adds	r4, r7, r4
 8000c28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2c:	f080 8103 	bcs.w	8000e36 <__udivmoddi4+0x28e>
 8000c30:	42a1      	cmp	r1, r4
 8000c32:	f240 8100 	bls.w	8000e36 <__udivmoddi4+0x28e>
 8000c36:	3802      	subs	r0, #2
 8000c38:	443c      	add	r4, r7
 8000c3a:	1a64      	subs	r4, r4, r1
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c42:	b11e      	cbz	r6, 8000c4c <__udivmoddi4+0xa4>
 8000c44:	2200      	movs	r2, #0
 8000c46:	40dc      	lsrs	r4, r3
 8000c48:	e9c6 4200 	strd	r4, r2, [r6]
 8000c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c50:	b902      	cbnz	r2, 8000c54 <__udivmoddi4+0xac>
 8000c52:	deff      	udf	#255	; 0xff
 8000c54:	fab2 f382 	clz	r3, r2
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d14f      	bne.n	8000cfc <__udivmoddi4+0x154>
 8000c5c:	1a8d      	subs	r5, r1, r2
 8000c5e:	2101      	movs	r1, #1
 8000c60:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000c64:	fa1f f882 	uxth.w	r8, r2
 8000c68:	fbb5 fcfe 	udiv	ip, r5, lr
 8000c6c:	fb0e 551c 	mls	r5, lr, ip, r5
 8000c70:	fb08 f00c 	mul.w	r0, r8, ip
 8000c74:	0c22      	lsrs	r2, r4, #16
 8000c76:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8000c7a:	42a8      	cmp	r0, r5
 8000c7c:	d907      	bls.n	8000c8e <__udivmoddi4+0xe6>
 8000c7e:	197d      	adds	r5, r7, r5
 8000c80:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000c84:	d202      	bcs.n	8000c8c <__udivmoddi4+0xe4>
 8000c86:	42a8      	cmp	r0, r5
 8000c88:	f200 80e9 	bhi.w	8000e5e <__udivmoddi4+0x2b6>
 8000c8c:	4694      	mov	ip, r2
 8000c8e:	1a2d      	subs	r5, r5, r0
 8000c90:	fbb5 f0fe 	udiv	r0, r5, lr
 8000c94:	fb0e 5510 	mls	r5, lr, r0, r5
 8000c98:	fb08 f800 	mul.w	r8, r8, r0
 8000c9c:	b2a4      	uxth	r4, r4
 8000c9e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ca2:	45a0      	cmp	r8, r4
 8000ca4:	d907      	bls.n	8000cb6 <__udivmoddi4+0x10e>
 8000ca6:	193c      	adds	r4, r7, r4
 8000ca8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cac:	d202      	bcs.n	8000cb4 <__udivmoddi4+0x10c>
 8000cae:	45a0      	cmp	r8, r4
 8000cb0:	f200 80d9 	bhi.w	8000e66 <__udivmoddi4+0x2be>
 8000cb4:	4610      	mov	r0, r2
 8000cb6:	eba4 0408 	sub.w	r4, r4, r8
 8000cba:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cbe:	e7c0      	b.n	8000c42 <__udivmoddi4+0x9a>
 8000cc0:	428b      	cmp	r3, r1
 8000cc2:	d908      	bls.n	8000cd6 <__udivmoddi4+0x12e>
 8000cc4:	2e00      	cmp	r6, #0
 8000cc6:	f000 80b1 	beq.w	8000e2c <__udivmoddi4+0x284>
 8000cca:	2100      	movs	r1, #0
 8000ccc:	e9c6 0500 	strd	r0, r5, [r6]
 8000cd0:	4608      	mov	r0, r1
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f183 	clz	r1, r3
 8000cda:	2900      	cmp	r1, #0
 8000cdc:	d14b      	bne.n	8000d76 <__udivmoddi4+0x1ce>
 8000cde:	42ab      	cmp	r3, r5
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0x140>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80b9 	bhi.w	8000e5a <__udivmoddi4+0x2b2>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb65 0303 	sbc.w	r3, r5, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	469e      	mov	lr, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0aa      	beq.n	8000c4c <__udivmoddi4+0xa4>
 8000cf6:	e9c6 4e00 	strd	r4, lr, [r6]
 8000cfa:	e7a7      	b.n	8000c4c <__udivmoddi4+0xa4>
 8000cfc:	409f      	lsls	r7, r3
 8000cfe:	f1c3 0220 	rsb	r2, r3, #32
 8000d02:	40d1      	lsrs	r1, r2
 8000d04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d08:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d0c:	fa1f f887 	uxth.w	r8, r7
 8000d10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d14:	fa24 f202 	lsr.w	r2, r4, r2
 8000d18:	409d      	lsls	r5, r3
 8000d1a:	fb00 fc08 	mul.w	ip, r0, r8
 8000d1e:	432a      	orrs	r2, r5
 8000d20:	0c15      	lsrs	r5, r2, #16
 8000d22:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 8000d26:	45ac      	cmp	ip, r5
 8000d28:	fa04 f403 	lsl.w	r4, r4, r3
 8000d2c:	d909      	bls.n	8000d42 <__udivmoddi4+0x19a>
 8000d2e:	197d      	adds	r5, r7, r5
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	f080 808f 	bcs.w	8000e56 <__udivmoddi4+0x2ae>
 8000d38:	45ac      	cmp	ip, r5
 8000d3a:	f240 808c 	bls.w	8000e56 <__udivmoddi4+0x2ae>
 8000d3e:	3802      	subs	r0, #2
 8000d40:	443d      	add	r5, r7
 8000d42:	eba5 050c 	sub.w	r5, r5, ip
 8000d46:	fbb5 f1fe 	udiv	r1, r5, lr
 8000d4a:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000d4e:	fb01 f908 	mul.w	r9, r1, r8
 8000d52:	b295      	uxth	r5, r2
 8000d54:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d58:	45a9      	cmp	r9, r5
 8000d5a:	d907      	bls.n	8000d6c <__udivmoddi4+0x1c4>
 8000d5c:	197d      	adds	r5, r7, r5
 8000d5e:	f101 32ff 	add.w	r2, r1, #4294967295
 8000d62:	d274      	bcs.n	8000e4e <__udivmoddi4+0x2a6>
 8000d64:	45a9      	cmp	r9, r5
 8000d66:	d972      	bls.n	8000e4e <__udivmoddi4+0x2a6>
 8000d68:	3902      	subs	r1, #2
 8000d6a:	443d      	add	r5, r7
 8000d6c:	eba5 0509 	sub.w	r5, r5, r9
 8000d70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d74:	e778      	b.n	8000c68 <__udivmoddi4+0xc0>
 8000d76:	f1c1 0720 	rsb	r7, r1, #32
 8000d7a:	408b      	lsls	r3, r1
 8000d7c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d80:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d84:	fa25 f407 	lsr.w	r4, r5, r7
 8000d88:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d8c:	fbb4 f9fe 	udiv	r9, r4, lr
 8000d90:	fa1f f88c 	uxth.w	r8, ip
 8000d94:	fb0e 4419 	mls	r4, lr, r9, r4
 8000d98:	fa20 f307 	lsr.w	r3, r0, r7
 8000d9c:	fb09 fa08 	mul.w	sl, r9, r8
 8000da0:	408d      	lsls	r5, r1
 8000da2:	431d      	orrs	r5, r3
 8000da4:	0c2b      	lsrs	r3, r5, #16
 8000da6:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000daa:	45a2      	cmp	sl, r4
 8000dac:	fa02 f201 	lsl.w	r2, r2, r1
 8000db0:	fa00 f301 	lsl.w	r3, r0, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0x222>
 8000db6:	eb1c 0404 	adds.w	r4, ip, r4
 8000dba:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dbe:	d248      	bcs.n	8000e52 <__udivmoddi4+0x2aa>
 8000dc0:	45a2      	cmp	sl, r4
 8000dc2:	d946      	bls.n	8000e52 <__udivmoddi4+0x2aa>
 8000dc4:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc8:	4464      	add	r4, ip
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	fbb4 f0fe 	udiv	r0, r4, lr
 8000dd2:	fb0e 4410 	mls	r4, lr, r0, r4
 8000dd6:	fb00 fa08 	mul.w	sl, r0, r8
 8000dda:	b2ad      	uxth	r5, r5
 8000ddc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000de0:	45a2      	cmp	sl, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x24e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dec:	d22d      	bcs.n	8000e4a <__udivmoddi4+0x2a2>
 8000dee:	45a2      	cmp	sl, r4
 8000df0:	d92b      	bls.n	8000e4a <__udivmoddi4+0x2a2>
 8000df2:	3802      	subs	r0, #2
 8000df4:	4464      	add	r4, ip
 8000df6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dfa:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfe:	eba4 040a 	sub.w	r4, r4, sl
 8000e02:	454c      	cmp	r4, r9
 8000e04:	46c6      	mov	lr, r8
 8000e06:	464d      	mov	r5, r9
 8000e08:	d319      	bcc.n	8000e3e <__udivmoddi4+0x296>
 8000e0a:	d016      	beq.n	8000e3a <__udivmoddi4+0x292>
 8000e0c:	b15e      	cbz	r6, 8000e26 <__udivmoddi4+0x27e>
 8000e0e:	ebb3 020e 	subs.w	r2, r3, lr
 8000e12:	eb64 0405 	sbc.w	r4, r4, r5
 8000e16:	fa04 f707 	lsl.w	r7, r4, r7
 8000e1a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e1e:	431f      	orrs	r7, r3
 8000e20:	40cc      	lsrs	r4, r1
 8000e22:	e9c6 7400 	strd	r7, r4, [r6]
 8000e26:	2100      	movs	r1, #0
 8000e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	4630      	mov	r0, r6
 8000e30:	e70c      	b.n	8000c4c <__udivmoddi4+0xa4>
 8000e32:	468c      	mov	ip, r1
 8000e34:	e6eb      	b.n	8000c0e <__udivmoddi4+0x66>
 8000e36:	4610      	mov	r0, r2
 8000e38:	e6ff      	b.n	8000c3a <__udivmoddi4+0x92>
 8000e3a:	4543      	cmp	r3, r8
 8000e3c:	d2e6      	bcs.n	8000e0c <__udivmoddi4+0x264>
 8000e3e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e42:	eb69 050c 	sbc.w	r5, r9, ip
 8000e46:	3801      	subs	r0, #1
 8000e48:	e7e0      	b.n	8000e0c <__udivmoddi4+0x264>
 8000e4a:	4628      	mov	r0, r5
 8000e4c:	e7d3      	b.n	8000df6 <__udivmoddi4+0x24e>
 8000e4e:	4611      	mov	r1, r2
 8000e50:	e78c      	b.n	8000d6c <__udivmoddi4+0x1c4>
 8000e52:	4681      	mov	r9, r0
 8000e54:	e7b9      	b.n	8000dca <__udivmoddi4+0x222>
 8000e56:	4608      	mov	r0, r1
 8000e58:	e773      	b.n	8000d42 <__udivmoddi4+0x19a>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e749      	b.n	8000cf2 <__udivmoddi4+0x14a>
 8000e5e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e62:	443d      	add	r5, r7
 8000e64:	e713      	b.n	8000c8e <__udivmoddi4+0xe6>
 8000e66:	3802      	subs	r0, #2
 8000e68:	443c      	add	r4, r7
 8000e6a:	e724      	b.n	8000cb6 <__udivmoddi4+0x10e>

08000e6c <__aeabi_idiv0>:
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop

08000e70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e76:	f001 fc18 	bl	80026aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7a:	f000 fc6f 	bl	800175c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e7e:	f000 fd59 	bl	8001934 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e82:	f000 fd2d 	bl	80018e0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000e86:	f000 fcb1 	bl	80017ec <MX_I2C1_Init>
  MX_TIM2_Init();
 8000e8a:	f000 fcdd 	bl	8001848 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000e8e:	f000 ffdd 	bl	8001e4c <ssd1306_Init>

  //resetting ina237
  TxBuffer[0] = 0x80;
 8000e92:	4b99      	ldr	r3, [pc, #612]	; (80010f8 <main+0x288>)
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	701a      	strb	r2, [r3, #0]
  TxBuffer[1] = 0x00;
 8000e98:	4b97      	ldr	r3, [pc, #604]	; (80010f8 <main+0x288>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Mem_Write(&hi2c1, 0x45<<1, 0x00, 1, TxBuffer, sizeof(TxBuffer), 1000);
 8000e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ea2:	9302      	str	r3, [sp, #8]
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	9301      	str	r3, [sp, #4]
 8000ea8:	4b93      	ldr	r3, [pc, #588]	; (80010f8 <main+0x288>)
 8000eaa:	9300      	str	r3, [sp, #0]
 8000eac:	2301      	movs	r3, #1
 8000eae:	2200      	movs	r2, #0
 8000eb0:	218a      	movs	r1, #138	; 0x8a
 8000eb2:	4892      	ldr	r0, [pc, #584]	; (80010fc <main+0x28c>)
 8000eb4:	f002 f88c 	bl	8002fd0 <HAL_I2C_Mem_Write>

  //setting adc range
  TxBuffer[0] = 0x00;
 8000eb8:	4b8f      	ldr	r3, [pc, #572]	; (80010f8 <main+0x288>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	701a      	strb	r2, [r3, #0]
  TxBuffer[1] = 0x10;
 8000ebe:	4b8e      	ldr	r3, [pc, #568]	; (80010f8 <main+0x288>)
 8000ec0:	2210      	movs	r2, #16
 8000ec2:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Mem_Write(&hi2c1, 0x45<<1, 0x00, 1, TxBuffer, sizeof(TxBuffer), 1000);
 8000ec4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec8:	9302      	str	r3, [sp, #8]
 8000eca:	2302      	movs	r3, #2
 8000ecc:	9301      	str	r3, [sp, #4]
 8000ece:	4b8a      	ldr	r3, [pc, #552]	; (80010f8 <main+0x288>)
 8000ed0:	9300      	str	r3, [sp, #0]
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	218a      	movs	r1, #138	; 0x8a
 8000ed8:	4888      	ldr	r0, [pc, #544]	; (80010fc <main+0x28c>)
 8000eda:	f002 f879 	bl	8002fd0 <HAL_I2C_Mem_Write>

  //calibrating shunt register
  TxBuffer[0] = 0x07;
 8000ede:	4b86      	ldr	r3, [pc, #536]	; (80010f8 <main+0x288>)
 8000ee0:	2207      	movs	r2, #7
 8000ee2:	701a      	strb	r2, [r3, #0]
  TxBuffer[1] = 0xD0;
 8000ee4:	4b84      	ldr	r3, [pc, #528]	; (80010f8 <main+0x288>)
 8000ee6:	22d0      	movs	r2, #208	; 0xd0
 8000ee8:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Mem_Write(&hi2c1, 0x45<<1, 0x02, 1, TxBuffer, sizeof(TxBuffer), 1000);
 8000eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eee:	9302      	str	r3, [sp, #8]
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	4b80      	ldr	r3, [pc, #512]	; (80010f8 <main+0x288>)
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	2202      	movs	r2, #2
 8000efc:	218a      	movs	r1, #138	; 0x8a
 8000efe:	487f      	ldr	r0, [pc, #508]	; (80010fc <main+0x28c>)
 8000f00:	f002 f866 	bl	8002fd0 <HAL_I2C_Mem_Write>

  //adc_config
  HAL_I2C_Mem_Read(&hi2c1, 0x45<<1, 0x01, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 8000f04:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f08:	9302      	str	r3, [sp, #8]
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	4b7c      	ldr	r3, [pc, #496]	; (8001100 <main+0x290>)
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2301      	movs	r3, #1
 8000f14:	2201      	movs	r2, #1
 8000f16:	218a      	movs	r1, #138	; 0x8a
 8000f18:	4878      	ldr	r0, [pc, #480]	; (80010fc <main+0x28c>)
 8000f1a:	f002 f953 	bl	80031c4 <HAL_I2C_Mem_Read>
  temp = (aRxBuffer[0]<<8) | aRxBuffer[1];
 8000f1e:	4b78      	ldr	r3, [pc, #480]	; (8001100 <main+0x290>)
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	021b      	lsls	r3, r3, #8
 8000f24:	b21a      	sxth	r2, r3
 8000f26:	4b76      	ldr	r3, [pc, #472]	; (8001100 <main+0x290>)
 8000f28:	785b      	ldrb	r3, [r3, #1]
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4b74      	ldr	r3, [pc, #464]	; (8001104 <main+0x294>)
 8000f34:	801a      	strh	r2, [r3, #0]
  TxBuffer[0] = aRxBuffer[0];
 8000f36:	4b72      	ldr	r3, [pc, #456]	; (8001100 <main+0x290>)
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	4b6f      	ldr	r3, [pc, #444]	; (80010f8 <main+0x288>)
 8000f3c:	701a      	strb	r2, [r3, #0]
  TxBuffer[1] = aRxBuffer[1] | 0x05;
 8000f3e:	4b70      	ldr	r3, [pc, #448]	; (8001100 <main+0x290>)
 8000f40:	785b      	ldrb	r3, [r3, #1]
 8000f42:	f043 0305 	orr.w	r3, r3, #5
 8000f46:	b2da      	uxtb	r2, r3
 8000f48:	4b6b      	ldr	r3, [pc, #428]	; (80010f8 <main+0x288>)
 8000f4a:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Mem_Write(&hi2c1, 0x45<<1, 0x01, 1, TxBuffer, sizeof(TxBuffer), 1000);
 8000f4c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f50:	9302      	str	r3, [sp, #8]
 8000f52:	2302      	movs	r3, #2
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	4b68      	ldr	r3, [pc, #416]	; (80010f8 <main+0x288>)
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	218a      	movs	r1, #138	; 0x8a
 8000f60:	4866      	ldr	r0, [pc, #408]	; (80010fc <main+0x28c>)
 8000f62:	f002 f835 	bl	8002fd0 <HAL_I2C_Mem_Write>

  //charge config default
  HAL_I2C_Mem_Read(&hi2c1, 0x09<<1, 0x01, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 8000f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6a:	9302      	str	r3, [sp, #8]
 8000f6c:	2303      	movs	r3, #3
 8000f6e:	9301      	str	r3, [sp, #4]
 8000f70:	4b63      	ldr	r3, [pc, #396]	; (8001100 <main+0x290>)
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	2301      	movs	r3, #1
 8000f76:	2201      	movs	r2, #1
 8000f78:	2112      	movs	r1, #18
 8000f7a:	4860      	ldr	r0, [pc, #384]	; (80010fc <main+0x28c>)
 8000f7c:	f002 f922 	bl	80031c4 <HAL_I2C_Mem_Read>
  TxBuffer[0] = 0b00000100; 	//charge enable and UVLO 2.8V
 8000f80:	4b5d      	ldr	r3, [pc, #372]	; (80010f8 <main+0x288>)
 8000f82:	2204      	movs	r2, #4
 8000f84:	701a      	strb	r2, [r3, #0]
  TxBuffer[1] = 0x00;
 8000f86:	4b5c      	ldr	r3, [pc, #368]	; (80010f8 <main+0x288>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Mem_Write(&hi2c1, 0x09<<1, 0x01, 1, TxBuffer, 1, 1000);
 8000f8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f90:	9302      	str	r3, [sp, #8]
 8000f92:	2301      	movs	r3, #1
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	4b58      	ldr	r3, [pc, #352]	; (80010f8 <main+0x288>)
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2112      	movs	r1, #18
 8000fa0:	4856      	ldr	r0, [pc, #344]	; (80010fc <main+0x28c>)
 8000fa2:	f002 f815 	bl	8002fd0 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Read(&hi2c1, 0x09<<1, 0x01, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 8000fa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000faa:	9302      	str	r3, [sp, #8]
 8000fac:	2303      	movs	r3, #3
 8000fae:	9301      	str	r3, [sp, #4]
 8000fb0:	4b53      	ldr	r3, [pc, #332]	; (8001100 <main+0x290>)
 8000fb2:	9300      	str	r3, [sp, #0]
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	2112      	movs	r1, #18
 8000fba:	4850      	ldr	r0, [pc, #320]	; (80010fc <main+0x28c>)
 8000fbc:	f002 f902 	bl	80031c4 <HAL_I2C_Mem_Read>

  //setting initial charge curretn to usb 2 compliant
  TxBuffer[0] = 0b01001011;
 8000fc0:	4b4d      	ldr	r3, [pc, #308]	; (80010f8 <main+0x288>)
 8000fc2:	224b      	movs	r2, #75	; 0x4b
 8000fc4:	701a      	strb	r2, [r3, #0]
  TxBuffer[1] = 0x00;
 8000fc6:	4b4c      	ldr	r3, [pc, #304]	; (80010f8 <main+0x288>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Mem_Write(&hi2c1, 0x09<<1, 0x00, 1, TxBuffer, 1, 1000);
 8000fcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	4b48      	ldr	r3, [pc, #288]	; (80010f8 <main+0x288>)
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2301      	movs	r3, #1
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2112      	movs	r1, #18
 8000fe0:	4846      	ldr	r0, [pc, #280]	; (80010fc <main+0x28c>)
 8000fe2:	f001 fff5 	bl	8002fd0 <HAL_I2C_Mem_Write>
  TxBuffer[0] = 0b00001110;
 8000fe6:	4b44      	ldr	r3, [pc, #272]	; (80010f8 <main+0x288>)
 8000fe8:	220e      	movs	r2, #14
 8000fea:	701a      	strb	r2, [r3, #0]
  TxBuffer[1] = 0x00;
 8000fec:	4b42      	ldr	r3, [pc, #264]	; (80010f8 <main+0x288>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	705a      	strb	r2, [r3, #1]
  HAL_I2C_Mem_Write(&hi2c1, 0x09<<1, 0x02, 1, TxBuffer, 1, 1000);
 8000ff2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff6:	9302      	str	r3, [sp, #8]
 8000ff8:	2301      	movs	r3, #1
 8000ffa:	9301      	str	r3, [sp, #4]
 8000ffc:	4b3e      	ldr	r3, [pc, #248]	; (80010f8 <main+0x288>)
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	2202      	movs	r2, #2
 8001004:	2112      	movs	r1, #18
 8001006:	483d      	ldr	r0, [pc, #244]	; (80010fc <main+0x28c>)
 8001008:	f001 ffe2 	bl	8002fd0 <HAL_I2C_Mem_Write>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  ssd1306_Fill(Black);
 800100c:	2000      	movs	r0, #0
 800100e:	f000 ff87 	bl	8001f20 <ssd1306_Fill>

	  switch (read_state) {
 8001012:	4b3d      	ldr	r3, [pc, #244]	; (8001108 <main+0x298>)
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b07      	cmp	r3, #7
 800101a:	f200 836d 	bhi.w	80016f8 <main+0x888>
 800101e:	a201      	add	r2, pc, #4	; (adr r2, 8001024 <main+0x1b4>)
 8001020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001024:	08001045 	.word	0x08001045
 8001028:	08001125 	.word	0x08001125
 800102c:	080011d7 	.word	0x080011d7
 8001030:	08001291 	.word	0x08001291
 8001034:	08001351 	.word	0x08001351
 8001038:	080014a3 	.word	0x080014a3
 800103c:	08001577 	.word	0x08001577
 8001040:	0800164b 	.word	0x0800164b
	  	  case 0:
	  		  //vbus
			  HAL_I2C_Mem_Read(&hi2c1, 0x45<<1, 0x05, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 8001044:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001048:	9302      	str	r3, [sp, #8]
 800104a:	2303      	movs	r3, #3
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	4b2c      	ldr	r3, [pc, #176]	; (8001100 <main+0x290>)
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2301      	movs	r3, #1
 8001054:	2205      	movs	r2, #5
 8001056:	218a      	movs	r1, #138	; 0x8a
 8001058:	4828      	ldr	r0, [pc, #160]	; (80010fc <main+0x28c>)
 800105a:	f002 f8b3 	bl	80031c4 <HAL_I2C_Mem_Read>
			  temp = 3.125*(float)((aRxBuffer[0]<<8) | aRxBuffer[1]);
 800105e:	4b28      	ldr	r3, [pc, #160]	; (8001100 <main+0x290>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	4a26      	ldr	r2, [pc, #152]	; (8001100 <main+0x290>)
 8001066:	7852      	ldrb	r2, [r2, #1]
 8001068:	4313      	orrs	r3, r2
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff fd30 	bl	8000ad0 <__aeabi_i2f>
 8001070:	4603      	mov	r3, r0
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff f9e8 	bl	8000448 <__aeabi_f2d>
 8001078:	f04f 0200 	mov.w	r2, #0
 800107c:	4b23      	ldr	r3, [pc, #140]	; (800110c <main+0x29c>)
 800107e:	f7ff fa3b 	bl	80004f8 <__aeabi_dmul>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4610      	mov	r0, r2
 8001088:	4619      	mov	r1, r3
 800108a:	f7ff fc47 	bl	800091c <__aeabi_d2uiz>
 800108e:	4603      	mov	r3, r0
 8001090:	b29a      	uxth	r2, r3
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <main+0x294>)
 8001094:	801a      	strh	r2, [r3, #0]
			  sprintf(charBuffer, "%u mV", temp);
 8001096:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <main+0x294>)
 8001098:	881b      	ldrh	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	491c      	ldr	r1, [pc, #112]	; (8001110 <main+0x2a0>)
 800109e:	481d      	ldr	r0, [pc, #116]	; (8001114 <main+0x2a4>)
 80010a0:	f004 f918 	bl	80052d4 <siprintf>
			  ssd1306_SetCursor(0, 14);
 80010a4:	210e      	movs	r1, #14
 80010a6:	2000      	movs	r0, #0
 80010a8:	f001 f892 	bl	80021d0 <ssd1306_SetCursor>
			  ssd1306_WriteString(&charBuffer, Font_11x18, White);
 80010ac:	4a1a      	ldr	r2, [pc, #104]	; (8001118 <main+0x2a8>)
 80010ae:	2301      	movs	r3, #1
 80010b0:	ca06      	ldmia	r2, {r1, r2}
 80010b2:	4818      	ldr	r0, [pc, #96]	; (8001114 <main+0x2a4>)
 80010b4:	f001 f866 	bl	8002184 <ssd1306_WriteString>
			  sprintf(charBuffer, "Voltage:");
 80010b8:	4918      	ldr	r1, [pc, #96]	; (800111c <main+0x2ac>)
 80010ba:	4816      	ldr	r0, [pc, #88]	; (8001114 <main+0x2a4>)
 80010bc:	f004 f90a 	bl	80052d4 <siprintf>
			  ssd1306_SetCursor(0, 0);
 80010c0:	2100      	movs	r1, #0
 80010c2:	2000      	movs	r0, #0
 80010c4:	f001 f884 	bl	80021d0 <ssd1306_SetCursor>
			  ssd1306_WriteString(&charBuffer, Font_7x10, White);
 80010c8:	4a15      	ldr	r2, [pc, #84]	; (8001120 <main+0x2b0>)
 80010ca:	2301      	movs	r3, #1
 80010cc:	ca06      	ldmia	r2, {r1, r2}
 80010ce:	4811      	ldr	r0, [pc, #68]	; (8001114 <main+0x2a4>)
 80010d0:	f001 f858 	bl	8002184 <ssd1306_WriteString>
			  ssd1306_DrawRectangle(124, 0, 127, 3, White);
 80010d4:	2301      	movs	r3, #1
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2303      	movs	r3, #3
 80010da:	227f      	movs	r2, #127	; 0x7f
 80010dc:	2100      	movs	r1, #0
 80010de:	207c      	movs	r0, #124	; 0x7c
 80010e0:	f001 f8fa 	bl	80022d8 <ssd1306_DrawRectangle>
			  ssd1306_DrawRectangle(125, 1, 126, 2, White);
 80010e4:	2301      	movs	r3, #1
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2302      	movs	r3, #2
 80010ea:	227e      	movs	r2, #126	; 0x7e
 80010ec:	2101      	movs	r1, #1
 80010ee:	207d      	movs	r0, #125	; 0x7d
 80010f0:	f001 f8f2 	bl	80022d8 <ssd1306_DrawRectangle>
	  		  break;
 80010f4:	e301      	b.n	80016fa <main+0x88a>
 80010f6:	bf00      	nop
 80010f8:	20000364 	.word	0x20000364
 80010fc:	200002bc 	.word	0x200002bc
 8001100:	20000368 	.word	0x20000368
 8001104:	20000310 	.word	0x20000310
 8001108:	200000a0 	.word	0x200000a0
 800110c:	40090000 	.word	0x40090000
 8001110:	08005b10 	.word	0x08005b10
 8001114:	20000358 	.word	0x20000358
 8001118:	2000000c 	.word	0x2000000c
 800111c:	08005b18 	.word	0x08005b18
 8001120:	20000004 	.word	0x20000004
	  	  case 1:
			  //current
			  HAL_I2C_Mem_Read(&hi2c1, 0x45<<1, 0x07, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 8001124:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001128:	9302      	str	r3, [sp, #8]
 800112a:	2303      	movs	r3, #3
 800112c:	9301      	str	r3, [sp, #4]
 800112e:	4bb6      	ldr	r3, [pc, #728]	; (8001408 <main+0x598>)
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2301      	movs	r3, #1
 8001134:	2207      	movs	r2, #7
 8001136:	218a      	movs	r1, #138	; 0x8a
 8001138:	48b4      	ldr	r0, [pc, #720]	; (800140c <main+0x59c>)
 800113a:	f002 f843 	bl	80031c4 <HAL_I2C_Mem_Read>
			  temp = 0.0610352*(float)((aRxBuffer[0]<<8) | aRxBuffer[1]);
 800113e:	4bb2      	ldr	r3, [pc, #712]	; (8001408 <main+0x598>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	4ab0      	ldr	r2, [pc, #704]	; (8001408 <main+0x598>)
 8001146:	7852      	ldrb	r2, [r2, #1]
 8001148:	4313      	orrs	r3, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fcc0 	bl	8000ad0 <__aeabi_i2f>
 8001150:	4603      	mov	r3, r0
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff f978 	bl	8000448 <__aeabi_f2d>
 8001158:	a3a7      	add	r3, pc, #668	; (adr r3, 80013f8 <main+0x588>)
 800115a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800115e:	f7ff f9cb 	bl	80004f8 <__aeabi_dmul>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	4610      	mov	r0, r2
 8001168:	4619      	mov	r1, r3
 800116a:	f7ff fbd7 	bl	800091c <__aeabi_d2uiz>
 800116e:	4603      	mov	r3, r0
 8001170:	b29a      	uxth	r2, r3
 8001172:	4ba7      	ldr	r3, [pc, #668]	; (8001410 <main+0x5a0>)
 8001174:	801a      	strh	r2, [r3, #0]
			  sprintf(charBuffer, "%u mA", temp);
 8001176:	4ba6      	ldr	r3, [pc, #664]	; (8001410 <main+0x5a0>)
 8001178:	881b      	ldrh	r3, [r3, #0]
 800117a:	461a      	mov	r2, r3
 800117c:	49a5      	ldr	r1, [pc, #660]	; (8001414 <main+0x5a4>)
 800117e:	48a6      	ldr	r0, [pc, #664]	; (8001418 <main+0x5a8>)
 8001180:	f004 f8a8 	bl	80052d4 <siprintf>
			  ssd1306_SetCursor(0, 14);
 8001184:	210e      	movs	r1, #14
 8001186:	2000      	movs	r0, #0
 8001188:	f001 f822 	bl	80021d0 <ssd1306_SetCursor>
			  ssd1306_WriteString(&charBuffer, Font_11x18, White);
 800118c:	4aa3      	ldr	r2, [pc, #652]	; (800141c <main+0x5ac>)
 800118e:	2301      	movs	r3, #1
 8001190:	ca06      	ldmia	r2, {r1, r2}
 8001192:	48a1      	ldr	r0, [pc, #644]	; (8001418 <main+0x5a8>)
 8001194:	f000 fff6 	bl	8002184 <ssd1306_WriteString>
			  sprintf(charBuffer, "Current output:");
 8001198:	49a1      	ldr	r1, [pc, #644]	; (8001420 <main+0x5b0>)
 800119a:	489f      	ldr	r0, [pc, #636]	; (8001418 <main+0x5a8>)
 800119c:	f004 f89a 	bl	80052d4 <siprintf>
			  ssd1306_SetCursor(0, 0);
 80011a0:	2100      	movs	r1, #0
 80011a2:	2000      	movs	r0, #0
 80011a4:	f001 f814 	bl	80021d0 <ssd1306_SetCursor>
			  ssd1306_WriteString(&charBuffer, Font_7x10, White);
 80011a8:	4a9e      	ldr	r2, [pc, #632]	; (8001424 <main+0x5b4>)
 80011aa:	2301      	movs	r3, #1
 80011ac:	ca06      	ldmia	r2, {r1, r2}
 80011ae:	489a      	ldr	r0, [pc, #616]	; (8001418 <main+0x5a8>)
 80011b0:	f000 ffe8 	bl	8002184 <ssd1306_WriteString>
			  ssd1306_DrawRectangle(124, 4, 127, 7, White);
 80011b4:	2301      	movs	r3, #1
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	2307      	movs	r3, #7
 80011ba:	227f      	movs	r2, #127	; 0x7f
 80011bc:	2104      	movs	r1, #4
 80011be:	207c      	movs	r0, #124	; 0x7c
 80011c0:	f001 f88a 	bl	80022d8 <ssd1306_DrawRectangle>
			  ssd1306_DrawRectangle(125, 5, 126, 6, White);
 80011c4:	2301      	movs	r3, #1
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2306      	movs	r3, #6
 80011ca:	227e      	movs	r2, #126	; 0x7e
 80011cc:	2105      	movs	r1, #5
 80011ce:	207d      	movs	r0, #125	; 0x7d
 80011d0:	f001 f882 	bl	80022d8 <ssd1306_DrawRectangle>
	  		  break;
 80011d4:	e291      	b.n	80016fa <main+0x88a>
	  	  case 2:
			  //power
			  HAL_I2C_Mem_Read(&hi2c1, 0x45<<1, 0x08, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 80011d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011da:	9302      	str	r3, [sp, #8]
 80011dc:	2303      	movs	r3, #3
 80011de:	9301      	str	r3, [sp, #4]
 80011e0:	4b89      	ldr	r3, [pc, #548]	; (8001408 <main+0x598>)
 80011e2:	9300      	str	r3, [sp, #0]
 80011e4:	2301      	movs	r3, #1
 80011e6:	2208      	movs	r2, #8
 80011e8:	218a      	movs	r1, #138	; 0x8a
 80011ea:	4888      	ldr	r0, [pc, #544]	; (800140c <main+0x59c>)
 80011ec:	f001 ffea 	bl	80031c4 <HAL_I2C_Mem_Read>
			  temp = 0.2*0.0610352*(float)((aRxBuffer[0]<<16) | aRxBuffer[1]<<8 | aRxBuffer[0]);
 80011f0:	4b85      	ldr	r3, [pc, #532]	; (8001408 <main+0x598>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	041a      	lsls	r2, r3, #16
 80011f6:	4b84      	ldr	r3, [pc, #528]	; (8001408 <main+0x598>)
 80011f8:	785b      	ldrb	r3, [r3, #1]
 80011fa:	021b      	lsls	r3, r3, #8
 80011fc:	4313      	orrs	r3, r2
 80011fe:	4a82      	ldr	r2, [pc, #520]	; (8001408 <main+0x598>)
 8001200:	7812      	ldrb	r2, [r2, #0]
 8001202:	4313      	orrs	r3, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fc63 	bl	8000ad0 <__aeabi_i2f>
 800120a:	4603      	mov	r3, r0
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f91b 	bl	8000448 <__aeabi_f2d>
 8001212:	a37b      	add	r3, pc, #492	; (adr r3, 8001400 <main+0x590>)
 8001214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001218:	f7ff f96e 	bl	80004f8 <__aeabi_dmul>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fb7a 	bl	800091c <__aeabi_d2uiz>
 8001228:	4603      	mov	r3, r0
 800122a:	b29a      	uxth	r2, r3
 800122c:	4b78      	ldr	r3, [pc, #480]	; (8001410 <main+0x5a0>)
 800122e:	801a      	strh	r2, [r3, #0]
			  sprintf(charBuffer, "%u mW", temp);
 8001230:	4b77      	ldr	r3, [pc, #476]	; (8001410 <main+0x5a0>)
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	461a      	mov	r2, r3
 8001236:	497c      	ldr	r1, [pc, #496]	; (8001428 <main+0x5b8>)
 8001238:	4877      	ldr	r0, [pc, #476]	; (8001418 <main+0x5a8>)
 800123a:	f004 f84b 	bl	80052d4 <siprintf>
			  ssd1306_SetCursor(0, 14);
 800123e:	210e      	movs	r1, #14
 8001240:	2000      	movs	r0, #0
 8001242:	f000 ffc5 	bl	80021d0 <ssd1306_SetCursor>
			  ssd1306_WriteString(&charBuffer, Font_11x18, White);
 8001246:	4a75      	ldr	r2, [pc, #468]	; (800141c <main+0x5ac>)
 8001248:	2301      	movs	r3, #1
 800124a:	ca06      	ldmia	r2, {r1, r2}
 800124c:	4872      	ldr	r0, [pc, #456]	; (8001418 <main+0x5a8>)
 800124e:	f000 ff99 	bl	8002184 <ssd1306_WriteString>
			  sprintf(charBuffer, "Power output:");
 8001252:	4976      	ldr	r1, [pc, #472]	; (800142c <main+0x5bc>)
 8001254:	4870      	ldr	r0, [pc, #448]	; (8001418 <main+0x5a8>)
 8001256:	f004 f83d 	bl	80052d4 <siprintf>
			  ssd1306_SetCursor(0, 0);
 800125a:	2100      	movs	r1, #0
 800125c:	2000      	movs	r0, #0
 800125e:	f000 ffb7 	bl	80021d0 <ssd1306_SetCursor>
			  ssd1306_WriteString(&charBuffer, Font_7x10, White);
 8001262:	4a70      	ldr	r2, [pc, #448]	; (8001424 <main+0x5b4>)
 8001264:	2301      	movs	r3, #1
 8001266:	ca06      	ldmia	r2, {r1, r2}
 8001268:	486b      	ldr	r0, [pc, #428]	; (8001418 <main+0x5a8>)
 800126a:	f000 ff8b 	bl	8002184 <ssd1306_WriteString>
			  ssd1306_DrawRectangle(124, 8, 127, 11, White);
 800126e:	2301      	movs	r3, #1
 8001270:	9300      	str	r3, [sp, #0]
 8001272:	230b      	movs	r3, #11
 8001274:	227f      	movs	r2, #127	; 0x7f
 8001276:	2108      	movs	r1, #8
 8001278:	207c      	movs	r0, #124	; 0x7c
 800127a:	f001 f82d 	bl	80022d8 <ssd1306_DrawRectangle>
			  ssd1306_DrawRectangle(125, 9, 126, 10, White);
 800127e:	2301      	movs	r3, #1
 8001280:	9300      	str	r3, [sp, #0]
 8001282:	230a      	movs	r3, #10
 8001284:	227e      	movs	r2, #126	; 0x7e
 8001286:	2109      	movs	r1, #9
 8001288:	207d      	movs	r0, #125	; 0x7d
 800128a:	f001 f825 	bl	80022d8 <ssd1306_DrawRectangle>
			  break;
 800128e:	e234      	b.n	80016fa <main+0x88a>
	  	  case 3:
			  //dietemp
			  HAL_I2C_Mem_Read(&hi2c1, 0x45<<1, 0x06, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 8001290:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001294:	9302      	str	r3, [sp, #8]
 8001296:	2303      	movs	r3, #3
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	4b5b      	ldr	r3, [pc, #364]	; (8001408 <main+0x598>)
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2301      	movs	r3, #1
 80012a0:	2206      	movs	r2, #6
 80012a2:	218a      	movs	r1, #138	; 0x8a
 80012a4:	4859      	ldr	r0, [pc, #356]	; (800140c <main+0x59c>)
 80012a6:	f001 ff8d 	bl	80031c4 <HAL_I2C_Mem_Read>
			  temp = 0.125*(float)((aRxBuffer[0]<<8) | aRxBuffer[1]);
 80012aa:	4b57      	ldr	r3, [pc, #348]	; (8001408 <main+0x598>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	4a55      	ldr	r2, [pc, #340]	; (8001408 <main+0x598>)
 80012b2:	7852      	ldrb	r2, [r2, #1]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fc0a 	bl	8000ad0 <__aeabi_i2f>
 80012bc:	4603      	mov	r3, r0
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff f8c2 	bl	8000448 <__aeabi_f2d>
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80012cc:	f7ff f914 	bl	80004f8 <__aeabi_dmul>
 80012d0:	4602      	mov	r2, r0
 80012d2:	460b      	mov	r3, r1
 80012d4:	4610      	mov	r0, r2
 80012d6:	4619      	mov	r1, r3
 80012d8:	f7ff fb20 	bl	800091c <__aeabi_d2uiz>
 80012dc:	4603      	mov	r3, r0
 80012de:	b29a      	uxth	r2, r3
 80012e0:	4b4b      	ldr	r3, [pc, #300]	; (8001410 <main+0x5a0>)
 80012e2:	801a      	strh	r2, [r3, #0]
			  temp = temp>>4;
 80012e4:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <main+0x5a0>)
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	091b      	lsrs	r3, r3, #4
 80012ea:	b29a      	uxth	r2, r3
 80012ec:	4b48      	ldr	r3, [pc, #288]	; (8001410 <main+0x5a0>)
 80012ee:	801a      	strh	r2, [r3, #0]
			  sprintf(charBuffer, "%u C", temp);
 80012f0:	4b47      	ldr	r3, [pc, #284]	; (8001410 <main+0x5a0>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	461a      	mov	r2, r3
 80012f6:	494e      	ldr	r1, [pc, #312]	; (8001430 <main+0x5c0>)
 80012f8:	4847      	ldr	r0, [pc, #284]	; (8001418 <main+0x5a8>)
 80012fa:	f003 ffeb 	bl	80052d4 <siprintf>
			  ssd1306_SetCursor(0, 14);
 80012fe:	210e      	movs	r1, #14
 8001300:	2000      	movs	r0, #0
 8001302:	f000 ff65 	bl	80021d0 <ssd1306_SetCursor>
			  ssd1306_WriteString(&charBuffer, Font_11x18, White);
 8001306:	4a45      	ldr	r2, [pc, #276]	; (800141c <main+0x5ac>)
 8001308:	2301      	movs	r3, #1
 800130a:	ca06      	ldmia	r2, {r1, r2}
 800130c:	4842      	ldr	r0, [pc, #264]	; (8001418 <main+0x5a8>)
 800130e:	f000 ff39 	bl	8002184 <ssd1306_WriteString>
			  sprintf(charBuffer, "Board temperature:");
 8001312:	4948      	ldr	r1, [pc, #288]	; (8001434 <main+0x5c4>)
 8001314:	4840      	ldr	r0, [pc, #256]	; (8001418 <main+0x5a8>)
 8001316:	f003 ffdd 	bl	80052d4 <siprintf>
			  ssd1306_SetCursor(0, 0);
 800131a:	2100      	movs	r1, #0
 800131c:	2000      	movs	r0, #0
 800131e:	f000 ff57 	bl	80021d0 <ssd1306_SetCursor>
			  ssd1306_WriteString(&charBuffer, Font_7x10, White);
 8001322:	4a40      	ldr	r2, [pc, #256]	; (8001424 <main+0x5b4>)
 8001324:	2301      	movs	r3, #1
 8001326:	ca06      	ldmia	r2, {r1, r2}
 8001328:	483b      	ldr	r0, [pc, #236]	; (8001418 <main+0x5a8>)
 800132a:	f000 ff2b 	bl	8002184 <ssd1306_WriteString>
			  ssd1306_DrawRectangle(124, 12, 127, 15, White);
 800132e:	2301      	movs	r3, #1
 8001330:	9300      	str	r3, [sp, #0]
 8001332:	230f      	movs	r3, #15
 8001334:	227f      	movs	r2, #127	; 0x7f
 8001336:	210c      	movs	r1, #12
 8001338:	207c      	movs	r0, #124	; 0x7c
 800133a:	f000 ffcd 	bl	80022d8 <ssd1306_DrawRectangle>
			  ssd1306_DrawRectangle(125, 13, 126, 14, White);
 800133e:	2301      	movs	r3, #1
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	230e      	movs	r3, #14
 8001344:	227e      	movs	r2, #126	; 0x7e
 8001346:	210d      	movs	r1, #13
 8001348:	207d      	movs	r0, #125	; 0x7d
 800134a:	f000 ffc5 	bl	80022d8 <ssd1306_DrawRectangle>
			  break;
 800134e:	e1d4      	b.n	80016fa <main+0x88a>
	  	  case 4:
			  //charge status
			  HAL_I2C_Mem_Read(&hi2c1, 0x09<<1, 0x07, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 8001350:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001354:	9302      	str	r3, [sp, #8]
 8001356:	2303      	movs	r3, #3
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	4b2b      	ldr	r3, [pc, #172]	; (8001408 <main+0x598>)
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2301      	movs	r3, #1
 8001360:	2207      	movs	r2, #7
 8001362:	2112      	movs	r1, #18
 8001364:	4829      	ldr	r0, [pc, #164]	; (800140c <main+0x59c>)
 8001366:	f001 ff2d 	bl	80031c4 <HAL_I2C_Mem_Read>
			  temp = (aRxBuffer[0] & 0b00011000)>>3;
 800136a:	4b27      	ldr	r3, [pc, #156]	; (8001408 <main+0x598>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	10db      	asrs	r3, r3, #3
 8001370:	b29b      	uxth	r3, r3
 8001372:	f003 0303 	and.w	r3, r3, #3
 8001376:	b29a      	uxth	r2, r3
 8001378:	4b25      	ldr	r3, [pc, #148]	; (8001410 <main+0x5a0>)
 800137a:	801a      	strh	r2, [r3, #0]
			  switch (temp) {
 800137c:	4b24      	ldr	r3, [pc, #144]	; (8001410 <main+0x5a0>)
 800137e:	881b      	ldrh	r3, [r3, #0]
 8001380:	2b03      	cmp	r3, #3
 8001382:	d86e      	bhi.n	8001462 <main+0x5f2>
 8001384:	a201      	add	r2, pc, #4	; (adr r2, 800138c <main+0x51c>)
 8001386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800138a:	bf00      	nop
 800138c:	0800139d 	.word	0x0800139d
 8001390:	080013bb 	.word	0x080013bb
 8001394:	080013d9 	.word	0x080013d9
 8001398:	08001445 	.word	0x08001445
				  case 0:
					  sprintf(charBuffer, "No charger");
 800139c:	4926      	ldr	r1, [pc, #152]	; (8001438 <main+0x5c8>)
 800139e:	481e      	ldr	r0, [pc, #120]	; (8001418 <main+0x5a8>)
 80013a0:	f003 ff98 	bl	80052d4 <siprintf>
					  ssd1306_SetCursor(0, 14);
 80013a4:	210e      	movs	r1, #14
 80013a6:	2000      	movs	r0, #0
 80013a8:	f000 ff12 	bl	80021d0 <ssd1306_SetCursor>
					  ssd1306_WriteString(&charBuffer, Font_11x18, White);
 80013ac:	4a1b      	ldr	r2, [pc, #108]	; (800141c <main+0x5ac>)
 80013ae:	2301      	movs	r3, #1
 80013b0:	ca06      	ldmia	r2, {r1, r2}
 80013b2:	4819      	ldr	r0, [pc, #100]	; (8001418 <main+0x5a8>)
 80013b4:	f000 fee6 	bl	8002184 <ssd1306_WriteString>
					  break;
 80013b8:	e054      	b.n	8001464 <main+0x5f4>
				  case 1:
					  sprintf(charBuffer, "Pre charge");
 80013ba:	4920      	ldr	r1, [pc, #128]	; (800143c <main+0x5cc>)
 80013bc:	4816      	ldr	r0, [pc, #88]	; (8001418 <main+0x5a8>)
 80013be:	f003 ff89 	bl	80052d4 <siprintf>
					  ssd1306_SetCursor(0, 14);
 80013c2:	210e      	movs	r1, #14
 80013c4:	2000      	movs	r0, #0
 80013c6:	f000 ff03 	bl	80021d0 <ssd1306_SetCursor>
					  ssd1306_WriteString(&charBuffer, Font_11x18, White);
 80013ca:	4a14      	ldr	r2, [pc, #80]	; (800141c <main+0x5ac>)
 80013cc:	2301      	movs	r3, #1
 80013ce:	ca06      	ldmia	r2, {r1, r2}
 80013d0:	4811      	ldr	r0, [pc, #68]	; (8001418 <main+0x5a8>)
 80013d2:	f000 fed7 	bl	8002184 <ssd1306_WriteString>
					  break;
 80013d6:	e045      	b.n	8001464 <main+0x5f4>
				  case 2:
					  sprintf(charBuffer, "Charging...");
 80013d8:	4919      	ldr	r1, [pc, #100]	; (8001440 <main+0x5d0>)
 80013da:	480f      	ldr	r0, [pc, #60]	; (8001418 <main+0x5a8>)
 80013dc:	f003 ff7a 	bl	80052d4 <siprintf>
					  ssd1306_SetCursor(0, 14);
 80013e0:	210e      	movs	r1, #14
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 fef4 	bl	80021d0 <ssd1306_SetCursor>
					  ssd1306_WriteString(&charBuffer, Font_11x18, White);
 80013e8:	4a0c      	ldr	r2, [pc, #48]	; (800141c <main+0x5ac>)
 80013ea:	2301      	movs	r3, #1
 80013ec:	ca06      	ldmia	r2, {r1, r2}
 80013ee:	480a      	ldr	r0, [pc, #40]	; (8001418 <main+0x5a8>)
 80013f0:	f000 fec8 	bl	8002184 <ssd1306_WriteString>
					  break;
 80013f4:	e036      	b.n	8001464 <main+0x5f4>
 80013f6:	bf00      	nop
 80013f8:	77cf4476 	.word	0x77cf4476
 80013fc:	3faf4001 	.word	0x3faf4001
 8001400:	2ca5d05f 	.word	0x2ca5d05f
 8001404:	3f890001 	.word	0x3f890001
 8001408:	20000368 	.word	0x20000368
 800140c:	200002bc 	.word	0x200002bc
 8001410:	20000310 	.word	0x20000310
 8001414:	08005b24 	.word	0x08005b24
 8001418:	20000358 	.word	0x20000358
 800141c:	2000000c 	.word	0x2000000c
 8001420:	08005b2c 	.word	0x08005b2c
 8001424:	20000004 	.word	0x20000004
 8001428:	08005b3c 	.word	0x08005b3c
 800142c:	08005b44 	.word	0x08005b44
 8001430:	08005b54 	.word	0x08005b54
 8001434:	08005b5c 	.word	0x08005b5c
 8001438:	08005b70 	.word	0x08005b70
 800143c:	08005b7c 	.word	0x08005b7c
 8001440:	08005b88 	.word	0x08005b88
				  case 3:
					  sprintf(charBuffer, "Done!");
 8001444:	49b0      	ldr	r1, [pc, #704]	; (8001708 <main+0x898>)
 8001446:	48b1      	ldr	r0, [pc, #708]	; (800170c <main+0x89c>)
 8001448:	f003 ff44 	bl	80052d4 <siprintf>
					  ssd1306_SetCursor(0, 14);
 800144c:	210e      	movs	r1, #14
 800144e:	2000      	movs	r0, #0
 8001450:	f000 febe 	bl	80021d0 <ssd1306_SetCursor>
					  ssd1306_WriteString(&charBuffer, Font_11x18, White);
 8001454:	4aae      	ldr	r2, [pc, #696]	; (8001710 <main+0x8a0>)
 8001456:	2301      	movs	r3, #1
 8001458:	ca06      	ldmia	r2, {r1, r2}
 800145a:	48ac      	ldr	r0, [pc, #688]	; (800170c <main+0x89c>)
 800145c:	f000 fe92 	bl	8002184 <ssd1306_WriteString>
					  break;
 8001460:	e000      	b.n	8001464 <main+0x5f4>
				  default:
					  break;
 8001462:	bf00      	nop
			  }
			  sprintf(charBuffer, "Charge status:");
 8001464:	49ab      	ldr	r1, [pc, #684]	; (8001714 <main+0x8a4>)
 8001466:	48a9      	ldr	r0, [pc, #676]	; (800170c <main+0x89c>)
 8001468:	f003 ff34 	bl	80052d4 <siprintf>
			  ssd1306_SetCursor(0, 0);
 800146c:	2100      	movs	r1, #0
 800146e:	2000      	movs	r0, #0
 8001470:	f000 feae 	bl	80021d0 <ssd1306_SetCursor>
			  ssd1306_WriteString(&charBuffer, Font_7x10, White);
 8001474:	4aa8      	ldr	r2, [pc, #672]	; (8001718 <main+0x8a8>)
 8001476:	2301      	movs	r3, #1
 8001478:	ca06      	ldmia	r2, {r1, r2}
 800147a:	48a4      	ldr	r0, [pc, #656]	; (800170c <main+0x89c>)
 800147c:	f000 fe82 	bl	8002184 <ssd1306_WriteString>
			  ssd1306_DrawRectangle(124, 16, 127, 19, White);
 8001480:	2301      	movs	r3, #1
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	2313      	movs	r3, #19
 8001486:	227f      	movs	r2, #127	; 0x7f
 8001488:	2110      	movs	r1, #16
 800148a:	207c      	movs	r0, #124	; 0x7c
 800148c:	f000 ff24 	bl	80022d8 <ssd1306_DrawRectangle>
			  ssd1306_DrawRectangle(125, 17, 126, 18, White);
 8001490:	2301      	movs	r3, #1
 8001492:	9300      	str	r3, [sp, #0]
 8001494:	2312      	movs	r3, #18
 8001496:	227e      	movs	r2, #126	; 0x7e
 8001498:	2111      	movs	r1, #17
 800149a:	207d      	movs	r0, #125	; 0x7d
 800149c:	f000 ff1c 	bl	80022d8 <ssd1306_DrawRectangle>
			  break;
 80014a0:	e12b      	b.n	80016fa <main+0x88a>
		  case 5:
			  if (charge_enable == 0) {
 80014a2:	4b9e      	ldr	r3, [pc, #632]	; (800171c <main+0x8ac>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d11c      	bne.n	80014e6 <main+0x676>
				  sprintf(charBuffer, "OFF");
 80014ac:	499c      	ldr	r1, [pc, #624]	; (8001720 <main+0x8b0>)
 80014ae:	4897      	ldr	r0, [pc, #604]	; (800170c <main+0x89c>)
 80014b0:	f003 ff10 	bl	80052d4 <siprintf>
				  ssd1306_SetCursor(1, 14);
 80014b4:	210e      	movs	r1, #14
 80014b6:	2001      	movs	r0, #1
 80014b8:	f000 fe8a 	bl	80021d0 <ssd1306_SetCursor>
				  ssd1306_WriteString(&charBuffer, Font_11x18, Black);
 80014bc:	4a94      	ldr	r2, [pc, #592]	; (8001710 <main+0x8a0>)
 80014be:	2300      	movs	r3, #0
 80014c0:	ca06      	ldmia	r2, {r1, r2}
 80014c2:	4892      	ldr	r0, [pc, #584]	; (800170c <main+0x89c>)
 80014c4:	f000 fe5e 	bl	8002184 <ssd1306_WriteString>
				  sprintf(charBuffer, "ON ");
 80014c8:	4996      	ldr	r1, [pc, #600]	; (8001724 <main+0x8b4>)
 80014ca:	4890      	ldr	r0, [pc, #576]	; (800170c <main+0x89c>)
 80014cc:	f003 ff02 	bl	80052d4 <siprintf>
				  ssd1306_SetCursor(38, 14);
 80014d0:	210e      	movs	r1, #14
 80014d2:	2026      	movs	r0, #38	; 0x26
 80014d4:	f000 fe7c 	bl	80021d0 <ssd1306_SetCursor>
				  ssd1306_WriteString(&charBuffer, Font_11x18, White);
 80014d8:	4a8d      	ldr	r2, [pc, #564]	; (8001710 <main+0x8a0>)
 80014da:	2301      	movs	r3, #1
 80014dc:	ca06      	ldmia	r2, {r1, r2}
 80014de:	488b      	ldr	r0, [pc, #556]	; (800170c <main+0x89c>)
 80014e0:	f000 fe50 	bl	8002184 <ssd1306_WriteString>
 80014e4:	e020      	b.n	8001528 <main+0x6b8>
			  } else if (charge_enable == 1) {
 80014e6:	4b8d      	ldr	r3, [pc, #564]	; (800171c <main+0x8ac>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	b2db      	uxtb	r3, r3
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d11b      	bne.n	8001528 <main+0x6b8>
				  sprintf(charBuffer, "OFF");
 80014f0:	498b      	ldr	r1, [pc, #556]	; (8001720 <main+0x8b0>)
 80014f2:	4886      	ldr	r0, [pc, #536]	; (800170c <main+0x89c>)
 80014f4:	f003 feee 	bl	80052d4 <siprintf>
				  ssd1306_SetCursor(1, 14);
 80014f8:	210e      	movs	r1, #14
 80014fa:	2001      	movs	r0, #1
 80014fc:	f000 fe68 	bl	80021d0 <ssd1306_SetCursor>
				  ssd1306_WriteString(&charBuffer, Font_11x18, White);
 8001500:	4a83      	ldr	r2, [pc, #524]	; (8001710 <main+0x8a0>)
 8001502:	2301      	movs	r3, #1
 8001504:	ca06      	ldmia	r2, {r1, r2}
 8001506:	4881      	ldr	r0, [pc, #516]	; (800170c <main+0x89c>)
 8001508:	f000 fe3c 	bl	8002184 <ssd1306_WriteString>
				  sprintf(charBuffer, "ON ");
 800150c:	4985      	ldr	r1, [pc, #532]	; (8001724 <main+0x8b4>)
 800150e:	487f      	ldr	r0, [pc, #508]	; (800170c <main+0x89c>)
 8001510:	f003 fee0 	bl	80052d4 <siprintf>
				  ssd1306_SetCursor(38, 14);
 8001514:	210e      	movs	r1, #14
 8001516:	2026      	movs	r0, #38	; 0x26
 8001518:	f000 fe5a 	bl	80021d0 <ssd1306_SetCursor>
				  ssd1306_WriteString(&charBuffer, Font_11x18, Black);
 800151c:	4a7c      	ldr	r2, [pc, #496]	; (8001710 <main+0x8a0>)
 800151e:	2300      	movs	r3, #0
 8001520:	ca06      	ldmia	r2, {r1, r2}
 8001522:	487a      	ldr	r0, [pc, #488]	; (800170c <main+0x89c>)
 8001524:	f000 fe2e 	bl	8002184 <ssd1306_WriteString>
			  }
			  ssd1306_DrawRectangle(0, 13, 70, 31, White);
 8001528:	2301      	movs	r3, #1
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	231f      	movs	r3, #31
 800152e:	2246      	movs	r2, #70	; 0x46
 8001530:	210d      	movs	r1, #13
 8001532:	2000      	movs	r0, #0
 8001534:	f000 fed0 	bl	80022d8 <ssd1306_DrawRectangle>


			  sprintf(charBuffer, "Charge control:");
 8001538:	497b      	ldr	r1, [pc, #492]	; (8001728 <main+0x8b8>)
 800153a:	4874      	ldr	r0, [pc, #464]	; (800170c <main+0x89c>)
 800153c:	f003 feca 	bl	80052d4 <siprintf>
			  ssd1306_SetCursor(0, 0);
 8001540:	2100      	movs	r1, #0
 8001542:	2000      	movs	r0, #0
 8001544:	f000 fe44 	bl	80021d0 <ssd1306_SetCursor>
			  ssd1306_WriteString(&charBuffer, Font_7x10, White);
 8001548:	4a73      	ldr	r2, [pc, #460]	; (8001718 <main+0x8a8>)
 800154a:	2301      	movs	r3, #1
 800154c:	ca06      	ldmia	r2, {r1, r2}
 800154e:	486f      	ldr	r0, [pc, #444]	; (800170c <main+0x89c>)
 8001550:	f000 fe18 	bl	8002184 <ssd1306_WriteString>
			  ssd1306_DrawRectangle(124, 20, 127, 23, White);
 8001554:	2301      	movs	r3, #1
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	2317      	movs	r3, #23
 800155a:	227f      	movs	r2, #127	; 0x7f
 800155c:	2114      	movs	r1, #20
 800155e:	207c      	movs	r0, #124	; 0x7c
 8001560:	f000 feba 	bl	80022d8 <ssd1306_DrawRectangle>
			  ssd1306_DrawRectangle(125, 21, 126, 22, White);
 8001564:	2301      	movs	r3, #1
 8001566:	9300      	str	r3, [sp, #0]
 8001568:	2316      	movs	r3, #22
 800156a:	227e      	movs	r2, #126	; 0x7e
 800156c:	2115      	movs	r1, #21
 800156e:	207d      	movs	r0, #125	; 0x7d
 8001570:	f000 feb2 	bl	80022d8 <ssd1306_DrawRectangle>
			  break;
 8001574:	e0c1      	b.n	80016fa <main+0x88a>
		  case 6:
			  if (usb_version == 2) {
 8001576:	4b6d      	ldr	r3, [pc, #436]	; (800172c <main+0x8bc>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d11c      	bne.n	80015ba <main+0x74a>
				  sprintf(charBuffer, "0.5A");
 8001580:	496b      	ldr	r1, [pc, #428]	; (8001730 <main+0x8c0>)
 8001582:	4862      	ldr	r0, [pc, #392]	; (800170c <main+0x89c>)
 8001584:	f003 fea6 	bl	80052d4 <siprintf>
				  ssd1306_SetCursor(1, 14);
 8001588:	210e      	movs	r1, #14
 800158a:	2001      	movs	r0, #1
 800158c:	f000 fe20 	bl	80021d0 <ssd1306_SetCursor>
				  ssd1306_WriteString(&charBuffer, Font_11x18, Black);
 8001590:	4a5f      	ldr	r2, [pc, #380]	; (8001710 <main+0x8a0>)
 8001592:	2300      	movs	r3, #0
 8001594:	ca06      	ldmia	r2, {r1, r2}
 8001596:	485d      	ldr	r0, [pc, #372]	; (800170c <main+0x89c>)
 8001598:	f000 fdf4 	bl	8002184 <ssd1306_WriteString>
				  sprintf(charBuffer, "1.0A");
 800159c:	4965      	ldr	r1, [pc, #404]	; (8001734 <main+0x8c4>)
 800159e:	485b      	ldr	r0, [pc, #364]	; (800170c <main+0x89c>)
 80015a0:	f003 fe98 	bl	80052d4 <siprintf>
				  ssd1306_SetCursor(50, 14);
 80015a4:	210e      	movs	r1, #14
 80015a6:	2032      	movs	r0, #50	; 0x32
 80015a8:	f000 fe12 	bl	80021d0 <ssd1306_SetCursor>
				  ssd1306_WriteString(&charBuffer, Font_11x18, White);
 80015ac:	4a58      	ldr	r2, [pc, #352]	; (8001710 <main+0x8a0>)
 80015ae:	2301      	movs	r3, #1
 80015b0:	ca06      	ldmia	r2, {r1, r2}
 80015b2:	4856      	ldr	r0, [pc, #344]	; (800170c <main+0x89c>)
 80015b4:	f000 fde6 	bl	8002184 <ssd1306_WriteString>
 80015b8:	e020      	b.n	80015fc <main+0x78c>
			  } else if (usb_version == 3) {
 80015ba:	4b5c      	ldr	r3, [pc, #368]	; (800172c <main+0x8bc>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d11b      	bne.n	80015fc <main+0x78c>
				  sprintf(charBuffer, "0.5A");
 80015c4:	495a      	ldr	r1, [pc, #360]	; (8001730 <main+0x8c0>)
 80015c6:	4851      	ldr	r0, [pc, #324]	; (800170c <main+0x89c>)
 80015c8:	f003 fe84 	bl	80052d4 <siprintf>
				  ssd1306_SetCursor(1, 14);
 80015cc:	210e      	movs	r1, #14
 80015ce:	2001      	movs	r0, #1
 80015d0:	f000 fdfe 	bl	80021d0 <ssd1306_SetCursor>
				  ssd1306_WriteString(&charBuffer, Font_11x18, White);
 80015d4:	4a4e      	ldr	r2, [pc, #312]	; (8001710 <main+0x8a0>)
 80015d6:	2301      	movs	r3, #1
 80015d8:	ca06      	ldmia	r2, {r1, r2}
 80015da:	484c      	ldr	r0, [pc, #304]	; (800170c <main+0x89c>)
 80015dc:	f000 fdd2 	bl	8002184 <ssd1306_WriteString>
				  sprintf(charBuffer, "1.0A ");
 80015e0:	4955      	ldr	r1, [pc, #340]	; (8001738 <main+0x8c8>)
 80015e2:	484a      	ldr	r0, [pc, #296]	; (800170c <main+0x89c>)
 80015e4:	f003 fe76 	bl	80052d4 <siprintf>
				  ssd1306_SetCursor(50, 14);
 80015e8:	210e      	movs	r1, #14
 80015ea:	2032      	movs	r0, #50	; 0x32
 80015ec:	f000 fdf0 	bl	80021d0 <ssd1306_SetCursor>
				  ssd1306_WriteString(&charBuffer, Font_11x18, Black);
 80015f0:	4a47      	ldr	r2, [pc, #284]	; (8001710 <main+0x8a0>)
 80015f2:	2300      	movs	r3, #0
 80015f4:	ca06      	ldmia	r2, {r1, r2}
 80015f6:	4845      	ldr	r0, [pc, #276]	; (800170c <main+0x89c>)
 80015f8:	f000 fdc4 	bl	8002184 <ssd1306_WriteString>
			  }
			  ssd1306_DrawRectangle(0, 13, 104, 31, White);
 80015fc:	2301      	movs	r3, #1
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	231f      	movs	r3, #31
 8001602:	2268      	movs	r2, #104	; 0x68
 8001604:	210d      	movs	r1, #13
 8001606:	2000      	movs	r0, #0
 8001608:	f000 fe66 	bl	80022d8 <ssd1306_DrawRectangle>

			  sprintf(charBuffer, "USB current limit:");
 800160c:	494b      	ldr	r1, [pc, #300]	; (800173c <main+0x8cc>)
 800160e:	483f      	ldr	r0, [pc, #252]	; (800170c <main+0x89c>)
 8001610:	f003 fe60 	bl	80052d4 <siprintf>
			  ssd1306_SetCursor(0, 0);
 8001614:	2100      	movs	r1, #0
 8001616:	2000      	movs	r0, #0
 8001618:	f000 fdda 	bl	80021d0 <ssd1306_SetCursor>
			  ssd1306_WriteString(&charBuffer, Font_7x10, White);
 800161c:	4a3e      	ldr	r2, [pc, #248]	; (8001718 <main+0x8a8>)
 800161e:	2301      	movs	r3, #1
 8001620:	ca06      	ldmia	r2, {r1, r2}
 8001622:	483a      	ldr	r0, [pc, #232]	; (800170c <main+0x89c>)
 8001624:	f000 fdae 	bl	8002184 <ssd1306_WriteString>
			  ssd1306_DrawRectangle(124, 24, 127, 27, White);
 8001628:	2301      	movs	r3, #1
 800162a:	9300      	str	r3, [sp, #0]
 800162c:	231b      	movs	r3, #27
 800162e:	227f      	movs	r2, #127	; 0x7f
 8001630:	2118      	movs	r1, #24
 8001632:	207c      	movs	r0, #124	; 0x7c
 8001634:	f000 fe50 	bl	80022d8 <ssd1306_DrawRectangle>
			  ssd1306_DrawRectangle(125, 25, 126, 26, White);
 8001638:	2301      	movs	r3, #1
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	231a      	movs	r3, #26
 800163e:	227e      	movs	r2, #126	; 0x7e
 8001640:	2119      	movs	r1, #25
 8001642:	207d      	movs	r0, #125	; 0x7d
 8001644:	f000 fe48 	bl	80022d8 <ssd1306_DrawRectangle>
			  break;
 8001648:	e057      	b.n	80016fa <main+0x88a>
		  case 7:
			  switch (contrast) {
 800164a:	4b3d      	ldr	r3, [pc, #244]	; (8001740 <main+0x8d0>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2bff      	cmp	r3, #255	; 0xff
 8001652:	d00e      	beq.n	8001672 <main+0x802>
 8001654:	2bff      	cmp	r3, #255	; 0xff
 8001656:	dc25      	bgt.n	80016a4 <main+0x834>
 8001658:	2bbf      	cmp	r3, #191	; 0xbf
 800165a:	d00f      	beq.n	800167c <main+0x80c>
 800165c:	2bbf      	cmp	r3, #191	; 0xbf
 800165e:	dc21      	bgt.n	80016a4 <main+0x834>
 8001660:	2b7f      	cmp	r3, #127	; 0x7f
 8001662:	d010      	beq.n	8001686 <main+0x816>
 8001664:	2b7f      	cmp	r3, #127	; 0x7f
 8001666:	dc1d      	bgt.n	80016a4 <main+0x834>
 8001668:	2b00      	cmp	r3, #0
 800166a:	d016      	beq.n	800169a <main+0x82a>
 800166c:	2b3f      	cmp	r3, #63	; 0x3f
 800166e:	d00f      	beq.n	8001690 <main+0x820>
					  break;
				  case 0:
					  sprintf(charBuffer, "0");
					  break;
				  default:
					  break;
 8001670:	e018      	b.n	80016a4 <main+0x834>
					  sprintf(charBuffer, "100");
 8001672:	4934      	ldr	r1, [pc, #208]	; (8001744 <main+0x8d4>)
 8001674:	4825      	ldr	r0, [pc, #148]	; (800170c <main+0x89c>)
 8001676:	f003 fe2d 	bl	80052d4 <siprintf>
					  break;
 800167a:	e014      	b.n	80016a6 <main+0x836>
					  sprintf(charBuffer, "75");
 800167c:	4932      	ldr	r1, [pc, #200]	; (8001748 <main+0x8d8>)
 800167e:	4823      	ldr	r0, [pc, #140]	; (800170c <main+0x89c>)
 8001680:	f003 fe28 	bl	80052d4 <siprintf>
					  break;
 8001684:	e00f      	b.n	80016a6 <main+0x836>
					  sprintf(charBuffer, "50");
 8001686:	4931      	ldr	r1, [pc, #196]	; (800174c <main+0x8dc>)
 8001688:	4820      	ldr	r0, [pc, #128]	; (800170c <main+0x89c>)
 800168a:	f003 fe23 	bl	80052d4 <siprintf>
					  break;
 800168e:	e00a      	b.n	80016a6 <main+0x836>
					  sprintf(charBuffer, "25");
 8001690:	492f      	ldr	r1, [pc, #188]	; (8001750 <main+0x8e0>)
 8001692:	481e      	ldr	r0, [pc, #120]	; (800170c <main+0x89c>)
 8001694:	f003 fe1e 	bl	80052d4 <siprintf>
					  break;
 8001698:	e005      	b.n	80016a6 <main+0x836>
					  sprintf(charBuffer, "0");
 800169a:	492e      	ldr	r1, [pc, #184]	; (8001754 <main+0x8e4>)
 800169c:	481b      	ldr	r0, [pc, #108]	; (800170c <main+0x89c>)
 800169e:	f003 fe19 	bl	80052d4 <siprintf>
					  break;
 80016a2:	e000      	b.n	80016a6 <main+0x836>
					  break;
 80016a4:	bf00      	nop
			  }

			  ssd1306_SetCursor(0, 14);
 80016a6:	210e      	movs	r1, #14
 80016a8:	2000      	movs	r0, #0
 80016aa:	f000 fd91 	bl	80021d0 <ssd1306_SetCursor>
			  ssd1306_WriteString(&charBuffer, Font_11x18, White);
 80016ae:	4a18      	ldr	r2, [pc, #96]	; (8001710 <main+0x8a0>)
 80016b0:	2301      	movs	r3, #1
 80016b2:	ca06      	ldmia	r2, {r1, r2}
 80016b4:	4815      	ldr	r0, [pc, #84]	; (800170c <main+0x89c>)
 80016b6:	f000 fd65 	bl	8002184 <ssd1306_WriteString>
			  sprintf(charBuffer, "Screen brightness:");
 80016ba:	4927      	ldr	r1, [pc, #156]	; (8001758 <main+0x8e8>)
 80016bc:	4813      	ldr	r0, [pc, #76]	; (800170c <main+0x89c>)
 80016be:	f003 fe09 	bl	80052d4 <siprintf>
			  ssd1306_SetCursor(0, 0);
 80016c2:	2100      	movs	r1, #0
 80016c4:	2000      	movs	r0, #0
 80016c6:	f000 fd83 	bl	80021d0 <ssd1306_SetCursor>
			  ssd1306_WriteString(&charBuffer, Font_7x10, White);
 80016ca:	4a13      	ldr	r2, [pc, #76]	; (8001718 <main+0x8a8>)
 80016cc:	2301      	movs	r3, #1
 80016ce:	ca06      	ldmia	r2, {r1, r2}
 80016d0:	480e      	ldr	r0, [pc, #56]	; (800170c <main+0x89c>)
 80016d2:	f000 fd57 	bl	8002184 <ssd1306_WriteString>
			  ssd1306_DrawRectangle(124, 28, 127, 31, White);
 80016d6:	2301      	movs	r3, #1
 80016d8:	9300      	str	r3, [sp, #0]
 80016da:	231f      	movs	r3, #31
 80016dc:	227f      	movs	r2, #127	; 0x7f
 80016de:	211c      	movs	r1, #28
 80016e0:	207c      	movs	r0, #124	; 0x7c
 80016e2:	f000 fdf9 	bl	80022d8 <ssd1306_DrawRectangle>
			  ssd1306_DrawRectangle(125, 29, 126, 30, White);
 80016e6:	2301      	movs	r3, #1
 80016e8:	9300      	str	r3, [sp, #0]
 80016ea:	231e      	movs	r3, #30
 80016ec:	227e      	movs	r2, #126	; 0x7e
 80016ee:	211d      	movs	r1, #29
 80016f0:	207d      	movs	r0, #125	; 0x7d
 80016f2:	f000 fdf1 	bl	80022d8 <ssd1306_DrawRectangle>
		  	  break;
 80016f6:	e000      	b.n	80016fa <main+0x88a>
	  	  default:
		  	  break;
 80016f8:	bf00      	nop
	  }

	  ssd1306_UpdateScreen();
 80016fa:	f000 fc33 	bl	8001f64 <ssd1306_UpdateScreen>

	  HAL_Delay(100);
 80016fe:	2064      	movs	r0, #100	; 0x64
 8001700:	f001 f842 	bl	8002788 <HAL_Delay>
	  ssd1306_Fill(Black);
 8001704:	e482      	b.n	800100c <main+0x19c>
 8001706:	bf00      	nop
 8001708:	08005b94 	.word	0x08005b94
 800170c:	20000358 	.word	0x20000358
 8001710:	2000000c 	.word	0x2000000c
 8001714:	08005b9c 	.word	0x08005b9c
 8001718:	20000004 	.word	0x20000004
 800171c:	20000001 	.word	0x20000001
 8001720:	08005bac 	.word	0x08005bac
 8001724:	08005bb0 	.word	0x08005bb0
 8001728:	08005bb4 	.word	0x08005bb4
 800172c:	20000002 	.word	0x20000002
 8001730:	08005bc4 	.word	0x08005bc4
 8001734:	08005bcc 	.word	0x08005bcc
 8001738:	08005bd4 	.word	0x08005bd4
 800173c:	08005bdc 	.word	0x08005bdc
 8001740:	20000000 	.word	0x20000000
 8001744:	08005bf0 	.word	0x08005bf0
 8001748:	08005bf4 	.word	0x08005bf4
 800174c:	08005bf8 	.word	0x08005bf8
 8001750:	08005bfc 	.word	0x08005bfc
 8001754:	08005c00 	.word	0x08005c00
 8001758:	08005c04 	.word	0x08005c04

0800175c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b092      	sub	sp, #72	; 0x48
 8001760:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001762:	f107 0314 	add.w	r3, r7, #20
 8001766:	2234      	movs	r2, #52	; 0x34
 8001768:	2100      	movs	r1, #0
 800176a:	4618      	mov	r0, r3
 800176c:	f003 fdaa 	bl	80052c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001770:	463b      	mov	r3, r7
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
 800177c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800177e:	4b1a      	ldr	r3, [pc, #104]	; (80017e8 <SystemClock_Config+0x8c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001786:	4a18      	ldr	r2, [pc, #96]	; (80017e8 <SystemClock_Config+0x8c>)
 8001788:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800178c:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800178e:	2310      	movs	r3, #16
 8001790:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001792:	2301      	movs	r3, #1
 8001794:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 800179a:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800179e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	4618      	mov	r0, r3
 80017aa:	f002 fa8b 	bl	8003cc4 <HAL_RCC_OscConfig>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80017b4:	f000 fb0c 	bl	8001dd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b8:	230f      	movs	r3, #15
 80017ba:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80017bc:	2300      	movs	r3, #0
 80017be:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017c8:	2300      	movs	r3, #0
 80017ca:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80017cc:	463b      	mov	r3, r7
 80017ce:	2100      	movs	r1, #0
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 fda7 	bl	8004324 <HAL_RCC_ClockConfig>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80017dc:	f000 faf8 	bl	8001dd0 <Error_Handler>
  }
}
 80017e0:	bf00      	nop
 80017e2:	3748      	adds	r7, #72	; 0x48
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	40007000 	.word	0x40007000

080017ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <MX_I2C1_Init+0x50>)
 80017f2:	4a13      	ldr	r2, [pc, #76]	; (8001840 <MX_I2C1_Init+0x54>)
 80017f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80017f6:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_I2C1_Init+0x50>)
 80017f8:	4a12      	ldr	r2, [pc, #72]	; (8001844 <MX_I2C1_Init+0x58>)
 80017fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80017fc:	4b0f      	ldr	r3, [pc, #60]	; (800183c <MX_I2C1_Init+0x50>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_I2C1_Init+0x50>)
 8001804:	2200      	movs	r2, #0
 8001806:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <MX_I2C1_Init+0x50>)
 800180a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800180e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001810:	4b0a      	ldr	r3, [pc, #40]	; (800183c <MX_I2C1_Init+0x50>)
 8001812:	2200      	movs	r2, #0
 8001814:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_I2C1_Init+0x50>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800181c:	4b07      	ldr	r3, [pc, #28]	; (800183c <MX_I2C1_Init+0x50>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001822:	4b06      	ldr	r3, [pc, #24]	; (800183c <MX_I2C1_Init+0x50>)
 8001824:	2200      	movs	r2, #0
 8001826:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001828:	4804      	ldr	r0, [pc, #16]	; (800183c <MX_I2C1_Init+0x50>)
 800182a:	f001 fa8d 	bl	8002d48 <HAL_I2C_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001834:	f000 facc 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001838:	bf00      	nop
 800183a:	bd80      	pop	{r7, pc}
 800183c:	200002bc 	.word	0x200002bc
 8001840:	40005400 	.word	0x40005400
 8001844:	000186a0 	.word	0x000186a0

08001848 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b086      	sub	sp, #24
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800185c:	463b      	mov	r3, r7
 800185e:	2200      	movs	r2, #0
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001864:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <MX_TIM2_Init+0x94>)
 8001866:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800186a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2097;
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <MX_TIM2_Init+0x94>)
 800186e:	f640 0231 	movw	r2, #2097	; 0x831
 8001872:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001874:	4b19      	ldr	r3, [pc, #100]	; (80018dc <MX_TIM2_Init+0x94>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 800187a:	4b18      	ldr	r3, [pc, #96]	; (80018dc <MX_TIM2_Init+0x94>)
 800187c:	2232      	movs	r2, #50	; 0x32
 800187e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001880:	4b16      	ldr	r3, [pc, #88]	; (80018dc <MX_TIM2_Init+0x94>)
 8001882:	2200      	movs	r2, #0
 8001884:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001886:	4b15      	ldr	r3, [pc, #84]	; (80018dc <MX_TIM2_Init+0x94>)
 8001888:	2200      	movs	r2, #0
 800188a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800188c:	4813      	ldr	r0, [pc, #76]	; (80018dc <MX_TIM2_Init+0x94>)
 800188e:	f002 ffb5 	bl	80047fc <HAL_TIM_Base_Init>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001898:	f000 fa9a 	bl	8001dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800189c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018a2:	f107 0308 	add.w	r3, r7, #8
 80018a6:	4619      	mov	r1, r3
 80018a8:	480c      	ldr	r0, [pc, #48]	; (80018dc <MX_TIM2_Init+0x94>)
 80018aa:	f003 f93b 	bl	8004b24 <HAL_TIM_ConfigClockSource>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80018b4:	f000 fa8c 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018b8:	2300      	movs	r3, #0
 80018ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018c0:	463b      	mov	r3, r7
 80018c2:	4619      	mov	r1, r3
 80018c4:	4805      	ldr	r0, [pc, #20]	; (80018dc <MX_TIM2_Init+0x94>)
 80018c6:	f003 fb1b 	bl	8004f00 <HAL_TIMEx_MasterConfigSynchronization>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018d0:	f000 fa7e 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018d4:	bf00      	nop
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	2000036c 	.word	0x2000036c

080018e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <MX_USART1_UART_Init+0x4c>)
 80018e6:	4a12      	ldr	r2, [pc, #72]	; (8001930 <MX_USART1_UART_Init+0x50>)
 80018e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <MX_USART1_UART_Init+0x4c>)
 80018ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <MX_USART1_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80018f8:	4b0c      	ldr	r3, [pc, #48]	; (800192c <MX_USART1_UART_Init+0x4c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <MX_USART1_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001904:	4b09      	ldr	r3, [pc, #36]	; (800192c <MX_USART1_UART_Init+0x4c>)
 8001906:	220c      	movs	r2, #12
 8001908:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <MX_USART1_UART_Init+0x4c>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001910:	4b06      	ldr	r3, [pc, #24]	; (800192c <MX_USART1_UART_Init+0x4c>)
 8001912:	2200      	movs	r2, #0
 8001914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001916:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_USART1_UART_Init+0x4c>)
 8001918:	f003 fb50 	bl	8004fbc <HAL_UART_Init>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001922:	f000 fa55 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	20000314 	.word	0x20000314
 8001930:	40013800 	.word	0x40013800

08001934 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b088      	sub	sp, #32
 8001938:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800193a:	f107 030c 	add.w	r3, r7, #12
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
 8001948:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <MX_GPIO_Init+0x7c>)
 800194c:	69db      	ldr	r3, [r3, #28]
 800194e:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <MX_GPIO_Init+0x7c>)
 8001950:	f043 0302 	orr.w	r3, r3, #2
 8001954:	61d3      	str	r3, [r2, #28]
 8001956:	4b16      	ldr	r3, [pc, #88]	; (80019b0 <MX_GPIO_Init+0x7c>)
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	60bb      	str	r3, [r7, #8]
 8001960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <MX_GPIO_Init+0x7c>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <MX_GPIO_Init+0x7c>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	61d3      	str	r3, [r2, #28]
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <MX_GPIO_Init+0x7c>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : SW_R_Pin SW_D_Pin SW_L_Pin SW_U_Pin */
  GPIO_InitStruct.Pin = SW_R_Pin|SW_D_Pin|SW_L_Pin|SW_U_Pin;
 800197a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800197e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001980:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001984:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001986:	2301      	movs	r3, #1
 8001988:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800198a:	f107 030c 	add.w	r3, r7, #12
 800198e:	4619      	mov	r1, r3
 8001990:	4808      	ldr	r0, [pc, #32]	; (80019b4 <MX_GPIO_Init+0x80>)
 8001992:	f001 f829 	bl	80029e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	2028      	movs	r0, #40	; 0x28
 800199c:	f000 ffed 	bl	800297a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80019a0:	2028      	movs	r0, #40	; 0x28
 80019a2:	f001 f806 	bl	80029b2 <HAL_NVIC_EnableIRQ>

}
 80019a6:	bf00      	nop
 80019a8:	3720      	adds	r7, #32
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40020400 	.word	0x40020400

080019b8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	80fb      	strh	r3, [r7, #6]
	switch (GPIO_Pin) {
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019c8:	d00f      	beq.n	80019ea <HAL_GPIO_EXTI_Callback+0x32>
 80019ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019ce:	dc28      	bgt.n	8001a22 <HAL_GPIO_EXTI_Callback+0x6a>
 80019d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019d4:	d017      	beq.n	8001a06 <HAL_GPIO_EXTI_Callback+0x4e>
 80019d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019da:	dc22      	bgt.n	8001a22 <HAL_GPIO_EXTI_Callback+0x6a>
 80019dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019e0:	d018      	beq.n	8001a14 <HAL_GPIO_EXTI_Callback+0x5c>
 80019e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019e6:	d007      	beq.n	80019f8 <HAL_GPIO_EXTI_Callback+0x40>
		case SW_R_Pin:
			state_SW_R = 1;
			HAL_TIM_Base_Start_IT(&htim2);
			break;
		default:
			break;
 80019e8:	e01b      	b.n	8001a22 <HAL_GPIO_EXTI_Callback+0x6a>
			state_SW_U = 1;
 80019ea:	4b10      	ldr	r3, [pc, #64]	; (8001a2c <HAL_GPIO_EXTI_Callback+0x74>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 80019f0:	480f      	ldr	r0, [pc, #60]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x78>)
 80019f2:	f002 ff43 	bl	800487c <HAL_TIM_Base_Start_IT>
			break;
 80019f6:	e015      	b.n	8001a24 <HAL_GPIO_EXTI_Callback+0x6c>
			state_SW_D = 1;
 80019f8:	4b0e      	ldr	r3, [pc, #56]	; (8001a34 <HAL_GPIO_EXTI_Callback+0x7c>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 80019fe:	480c      	ldr	r0, [pc, #48]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x78>)
 8001a00:	f002 ff3c 	bl	800487c <HAL_TIM_Base_Start_IT>
			break;
 8001a04:	e00e      	b.n	8001a24 <HAL_GPIO_EXTI_Callback+0x6c>
			state_SW_L = 1;
 8001a06:	4b0c      	ldr	r3, [pc, #48]	; (8001a38 <HAL_GPIO_EXTI_Callback+0x80>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 8001a0c:	4808      	ldr	r0, [pc, #32]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x78>)
 8001a0e:	f002 ff35 	bl	800487c <HAL_TIM_Base_Start_IT>
			break;
 8001a12:	e007      	b.n	8001a24 <HAL_GPIO_EXTI_Callback+0x6c>
			state_SW_R = 1;
 8001a14:	4b09      	ldr	r3, [pc, #36]	; (8001a3c <HAL_GPIO_EXTI_Callback+0x84>)
 8001a16:	2201      	movs	r2, #1
 8001a18:	701a      	strb	r2, [r3, #0]
			HAL_TIM_Base_Start_IT(&htim2);
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <HAL_GPIO_EXTI_Callback+0x78>)
 8001a1c:	f002 ff2e 	bl	800487c <HAL_TIM_Base_Start_IT>
			break;
 8001a20:	e000      	b.n	8001a24 <HAL_GPIO_EXTI_Callback+0x6c>
			break;
 8001a22:	bf00      	nop
	}
}
 8001a24:	bf00      	nop
 8001a26:	3708      	adds	r7, #8
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	200000a1 	.word	0x200000a1
 8001a30:	2000036c 	.word	0x2000036c
 8001a34:	200000a2 	.word	0x200000a2
 8001a38:	200000a3 	.word	0x200000a3
 8001a3c:	200000a4 	.word	0x200000a4

08001a40 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b086      	sub	sp, #24
 8001a44:	af04      	add	r7, sp, #16
 8001a46:	6078      	str	r0, [r7, #4]
  if (htim == &htim2) {
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4aa1      	ldr	r2, [pc, #644]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	f040 81ae 	bne.w	8001dae <HAL_TIM_PeriodElapsedCallback+0x36e>
	 if (state_SW_U == 1 && HAL_GPIO_ReadPin(SW_U_GPIO_Port, SW_U_Pin) == GPIO_PIN_RESET) {
 8001a52:	4ba0      	ldr	r3, [pc, #640]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d119      	bne.n	8001a8e <HAL_TIM_PeriodElapsedCallback+0x4e>
 8001a5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a5e:	489e      	ldr	r0, [pc, #632]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001a60:	f001 f942 	bl	8002ce8 <HAL_GPIO_ReadPin>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d111      	bne.n	8001a8e <HAL_TIM_PeriodElapsedCallback+0x4e>
		 state_SW_U = 0;
 8001a6a:	4b9a      	ldr	r3, [pc, #616]	; (8001cd4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
		 HAL_TIM_Base_Stop_IT(&htim2);
 8001a70:	4897      	ldr	r0, [pc, #604]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001a72:	f002 ff55 	bl	8004920 <HAL_TIM_Base_Stop_IT>

		 if (read_state == 0) {
 8001a76:	4b99      	ldr	r3, [pc, #612]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d006      	beq.n	8001a8e <HAL_TIM_PeriodElapsedCallback+0x4e>
			 //read_state = 7;
		 } else {
			 read_state--;
 8001a80:	4b96      	ldr	r3, [pc, #600]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	3b01      	subs	r3, #1
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4b94      	ldr	r3, [pc, #592]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001a8c:	701a      	strb	r2, [r3, #0]
		 }
	 }
	 if (state_SW_D == 1 && HAL_GPIO_ReadPin(SW_D_GPIO_Port, SW_D_Pin) == GPIO_PIN_RESET) {
 8001a8e:	4b94      	ldr	r3, [pc, #592]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d119      	bne.n	8001aca <HAL_TIM_PeriodElapsedCallback+0x8a>
 8001a96:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001a9a:	488f      	ldr	r0, [pc, #572]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001a9c:	f001 f924 	bl	8002ce8 <HAL_GPIO_ReadPin>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d111      	bne.n	8001aca <HAL_TIM_PeriodElapsedCallback+0x8a>
		 state_SW_D = 0;
 8001aa6:	4b8e      	ldr	r3, [pc, #568]	; (8001ce0 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]
		 HAL_TIM_Base_Stop_IT(&htim2);
 8001aac:	4888      	ldr	r0, [pc, #544]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001aae:	f002 ff37 	bl	8004920 <HAL_TIM_Base_Stop_IT>

		 if (read_state == 7) {
 8001ab2:	4b8a      	ldr	r3, [pc, #552]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	2b07      	cmp	r3, #7
 8001aba:	d006      	beq.n	8001aca <HAL_TIM_PeriodElapsedCallback+0x8a>
			 //read_state = 0;
		 } else {
			 read_state++;
 8001abc:	4b87      	ldr	r3, [pc, #540]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	b2da      	uxtb	r2, r3
 8001ac6:	4b85      	ldr	r3, [pc, #532]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001ac8:	701a      	strb	r2, [r3, #0]
		 }
	 }
	 if (state_SW_L == 1 && HAL_GPIO_ReadPin(SW_L_GPIO_Port, SW_L_Pin) == GPIO_PIN_RESET) {
 8001aca:	4b86      	ldr	r3, [pc, #536]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	f040 80a1 	bne.w	8001c16 <HAL_TIM_PeriodElapsedCallback+0x1d6>
 8001ad4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ad8:	487f      	ldr	r0, [pc, #508]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001ada:	f001 f905 	bl	8002ce8 <HAL_GPIO_ReadPin>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f040 8098 	bne.w	8001c16 <HAL_TIM_PeriodElapsedCallback+0x1d6>
		 state_SW_L = 0;
 8001ae6:	4b7f      	ldr	r3, [pc, #508]	; (8001ce4 <HAL_TIM_PeriodElapsedCallback+0x2a4>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
		 HAL_TIM_Base_Stop_IT(&htim2);
 8001aec:	4878      	ldr	r0, [pc, #480]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001aee:	f002 ff17 	bl	8004920 <HAL_TIM_Base_Stop_IT>

		 switch (read_state) {
 8001af2:	4b7a      	ldr	r3, [pc, #488]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	b2db      	uxtb	r3, r3
 8001af8:	2b07      	cmp	r3, #7
 8001afa:	d066      	beq.n	8001bca <HAL_TIM_PeriodElapsedCallback+0x18a>
 8001afc:	2b07      	cmp	r3, #7
 8001afe:	f300 808c 	bgt.w	8001c1a <HAL_TIM_PeriodElapsedCallback+0x1da>
 8001b02:	2b05      	cmp	r3, #5
 8001b04:	d002      	beq.n	8001b0c <HAL_TIM_PeriodElapsedCallback+0xcc>
 8001b06:	2b06      	cmp	r3, #6
 8001b08:	d035      	beq.n	8001b76 <HAL_TIM_PeriodElapsedCallback+0x136>
		 			 contrast = contrast-63;
		 			 ssd1306_SetContrast(contrast);
		 		 }
		 		 break;
		 	 default:
		 		 break;
 8001b0a:	e086      	b.n	8001c1a <HAL_TIM_PeriodElapsedCallback+0x1da>
		 		 charge_enable = 0;
 8001b0c:	4b76      	ldr	r3, [pc, #472]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
		 		 HAL_I2C_Mem_Read(&hi2c1, 0x09<<1, 0x01, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 8001b12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b16:	9302      	str	r3, [sp, #8]
 8001b18:	2303      	movs	r3, #3
 8001b1a:	9301      	str	r3, [sp, #4]
 8001b1c:	4b73      	ldr	r3, [pc, #460]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001b1e:	9300      	str	r3, [sp, #0]
 8001b20:	2301      	movs	r3, #1
 8001b22:	2201      	movs	r2, #1
 8001b24:	2112      	movs	r1, #18
 8001b26:	4872      	ldr	r0, [pc, #456]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001b28:	f001 fb4c 	bl	80031c4 <HAL_I2C_Mem_Read>
		 		 TxBuffer[0] = aRxBuffer[0] | 0b00001000;
 8001b2c:	4b6f      	ldr	r3, [pc, #444]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	f043 0308 	orr.w	r3, r3, #8
 8001b34:	b2da      	uxtb	r2, r3
 8001b36:	4b6f      	ldr	r3, [pc, #444]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001b38:	701a      	strb	r2, [r3, #0]
		 		 TxBuffer[1] = 0x00;
 8001b3a:	4b6e      	ldr	r3, [pc, #440]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	705a      	strb	r2, [r3, #1]
		 		 HAL_I2C_Mem_Write(&hi2c1, 0x09<<1, 0x01, 1, TxBuffer, 1, 1000);
 8001b40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b44:	9302      	str	r3, [sp, #8]
 8001b46:	2301      	movs	r3, #1
 8001b48:	9301      	str	r3, [sp, #4]
 8001b4a:	4b6a      	ldr	r3, [pc, #424]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2301      	movs	r3, #1
 8001b50:	2201      	movs	r2, #1
 8001b52:	2112      	movs	r1, #18
 8001b54:	4866      	ldr	r0, [pc, #408]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001b56:	f001 fa3b 	bl	8002fd0 <HAL_I2C_Mem_Write>
		 		 HAL_I2C_Mem_Read(&hi2c1, 0x09<<1, 0x01, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 8001b5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b5e:	9302      	str	r3, [sp, #8]
 8001b60:	2303      	movs	r3, #3
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	4b61      	ldr	r3, [pc, #388]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2301      	movs	r3, #1
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	2112      	movs	r1, #18
 8001b6e:	4860      	ldr	r0, [pc, #384]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001b70:	f001 fb28 	bl	80031c4 <HAL_I2C_Mem_Read>
		 		 break;
 8001b74:	e054      	b.n	8001c20 <HAL_TIM_PeriodElapsedCallback+0x1e0>
		 		 usb_version = 2;
 8001b76:	4b60      	ldr	r3, [pc, #384]	; (8001cf8 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001b78:	2202      	movs	r2, #2
 8001b7a:	701a      	strb	r2, [r3, #0]
		 		 TxBuffer[0] = 0b01001011;
 8001b7c:	4b5d      	ldr	r3, [pc, #372]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001b7e:	224b      	movs	r2, #75	; 0x4b
 8001b80:	701a      	strb	r2, [r3, #0]
				 TxBuffer[1] = 0x00;
 8001b82:	4b5c      	ldr	r3, [pc, #368]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	705a      	strb	r2, [r3, #1]
				 HAL_I2C_Mem_Write(&hi2c1, 0x09<<1, 0x00, 1, TxBuffer, 1, 1000);
 8001b88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b8c:	9302      	str	r3, [sp, #8]
 8001b8e:	2301      	movs	r3, #1
 8001b90:	9301      	str	r3, [sp, #4]
 8001b92:	4b58      	ldr	r3, [pc, #352]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	2301      	movs	r3, #1
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2112      	movs	r1, #18
 8001b9c:	4854      	ldr	r0, [pc, #336]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001b9e:	f001 fa17 	bl	8002fd0 <HAL_I2C_Mem_Write>
				 TxBuffer[0] = 0b00001110;
 8001ba2:	4b54      	ldr	r3, [pc, #336]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001ba4:	220e      	movs	r2, #14
 8001ba6:	701a      	strb	r2, [r3, #0]
				 TxBuffer[1] = 0x00;
 8001ba8:	4b52      	ldr	r3, [pc, #328]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	705a      	strb	r2, [r3, #1]
				 HAL_I2C_Mem_Write(&hi2c1, 0x09<<1, 0x02, 1, TxBuffer, 1, 1000);
 8001bae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bb2:	9302      	str	r3, [sp, #8]
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	9301      	str	r3, [sp, #4]
 8001bb8:	4b4e      	ldr	r3, [pc, #312]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	2301      	movs	r3, #1
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	2112      	movs	r1, #18
 8001bc2:	484b      	ldr	r0, [pc, #300]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001bc4:	f001 fa04 	bl	8002fd0 <HAL_I2C_Mem_Write>
		 		 break;
 8001bc8:	e02a      	b.n	8001c20 <HAL_TIM_PeriodElapsedCallback+0x1e0>
		 		 if (contrast > 63) {
 8001bca:	4b4c      	ldr	r3, [pc, #304]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	2b3f      	cmp	r3, #63	; 0x3f
 8001bd2:	d90d      	bls.n	8001bf0 <HAL_TIM_PeriodElapsedCallback+0x1b0>
		 			 contrast = contrast-64;
 8001bd4:	4b49      	ldr	r3, [pc, #292]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001bd6:	781b      	ldrb	r3, [r3, #0]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	3b40      	subs	r3, #64	; 0x40
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	4b47      	ldr	r3, [pc, #284]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001be0:	701a      	strb	r2, [r3, #0]
		 		 	 ssd1306_SetContrast(contrast);
 8001be2:	4b46      	ldr	r3, [pc, #280]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	4618      	mov	r0, r3
 8001bea:	f000 fbac 	bl	8002346 <ssd1306_SetContrast>
		 		 break;
 8001bee:	e016      	b.n	8001c1e <HAL_TIM_PeriodElapsedCallback+0x1de>
		 		 } else if (contrast == 63) {
 8001bf0:	4b42      	ldr	r3, [pc, #264]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b3f      	cmp	r3, #63	; 0x3f
 8001bf8:	d111      	bne.n	8001c1e <HAL_TIM_PeriodElapsedCallback+0x1de>
		 			 contrast = contrast-63;
 8001bfa:	4b40      	ldr	r3, [pc, #256]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001bfc:	781b      	ldrb	r3, [r3, #0]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	3b3f      	subs	r3, #63	; 0x3f
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	4b3d      	ldr	r3, [pc, #244]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001c06:	701a      	strb	r2, [r3, #0]
		 			 ssd1306_SetContrast(contrast);
 8001c08:	4b3c      	ldr	r3, [pc, #240]	; (8001cfc <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 fb99 	bl	8002346 <ssd1306_SetContrast>
		 		 break;
 8001c14:	e003      	b.n	8001c1e <HAL_TIM_PeriodElapsedCallback+0x1de>
		 }


	 }
 8001c16:	bf00      	nop
 8001c18:	e002      	b.n	8001c20 <HAL_TIM_PeriodElapsedCallback+0x1e0>
		 		 break;
 8001c1a:	bf00      	nop
 8001c1c:	e000      	b.n	8001c20 <HAL_TIM_PeriodElapsedCallback+0x1e0>
		 		 break;
 8001c1e:	bf00      	nop
	 if (state_SW_R == 1 && HAL_GPIO_ReadPin(SW_R_GPIO_Port, SW_R_Pin) == GPIO_PIN_RESET) {
 8001c20:	4b37      	ldr	r3, [pc, #220]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	f040 80c2 	bne.w	8001dae <HAL_TIM_PeriodElapsedCallback+0x36e>
 8001c2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c2e:	482a      	ldr	r0, [pc, #168]	; (8001cd8 <HAL_TIM_PeriodElapsedCallback+0x298>)
 8001c30:	f001 f85a 	bl	8002ce8 <HAL_GPIO_ReadPin>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f040 80b9 	bne.w	8001dae <HAL_TIM_PeriodElapsedCallback+0x36e>
		 state_SW_R = 0;
 8001c3c:	4b30      	ldr	r3, [pc, #192]	; (8001d00 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	701a      	strb	r2, [r3, #0]
		 HAL_TIM_Base_Stop_IT(&htim2);
 8001c42:	4823      	ldr	r0, [pc, #140]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 8001c44:	f002 fe6c 	bl	8004920 <HAL_TIM_Base_Stop_IT>

		 switch (read_state) {
 8001c48:	4b24      	ldr	r3, [pc, #144]	; (8001cdc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b07      	cmp	r3, #7
 8001c50:	f000 8082 	beq.w	8001d58 <HAL_TIM_PeriodElapsedCallback+0x318>
 8001c54:	2b07      	cmp	r3, #7
 8001c56:	f300 80ac 	bgt.w	8001db2 <HAL_TIM_PeriodElapsedCallback+0x372>
 8001c5a:	2b05      	cmp	r3, #5
 8001c5c:	d002      	beq.n	8001c64 <HAL_TIM_PeriodElapsedCallback+0x224>
 8001c5e:	2b06      	cmp	r3, #6
 8001c60:	d050      	beq.n	8001d04 <HAL_TIM_PeriodElapsedCallback+0x2c4>
		 			 contrast = contrast+64;
					 ssd1306_SetContrast(contrast);
		 		 }
		 		 break;
		 	 default:
		 		 break;
 8001c62:	e0a6      	b.n	8001db2 <HAL_TIM_PeriodElapsedCallback+0x372>
		 		 charge_enable = 1;
 8001c64:	4b20      	ldr	r3, [pc, #128]	; (8001ce8 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	701a      	strb	r2, [r3, #0]
		 		 HAL_I2C_Mem_Read(&hi2c1, 0x09<<1, 0x01, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 8001c6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c6e:	9302      	str	r3, [sp, #8]
 8001c70:	2303      	movs	r3, #3
 8001c72:	9301      	str	r3, [sp, #4]
 8001c74:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2301      	movs	r3, #1
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	2112      	movs	r1, #18
 8001c7e:	481c      	ldr	r0, [pc, #112]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001c80:	f001 faa0 	bl	80031c4 <HAL_I2C_Mem_Read>
				 TxBuffer[0] = aRxBuffer[0] & 0b11110111;
 8001c84:	4b19      	ldr	r3, [pc, #100]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	f023 0308 	bic.w	r3, r3, #8
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	4b19      	ldr	r3, [pc, #100]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c90:	701a      	strb	r2, [r3, #0]
				 TxBuffer[1] = 0x00;
 8001c92:	4b18      	ldr	r3, [pc, #96]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	705a      	strb	r2, [r3, #1]
				 HAL_I2C_Mem_Write(&hi2c1, 0x09<<1, 0x01, 1, TxBuffer, 1, 1000);
 8001c98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9c:	9302      	str	r3, [sp, #8]
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	9301      	str	r3, [sp, #4]
 8001ca2:	4b14      	ldr	r3, [pc, #80]	; (8001cf4 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	2201      	movs	r2, #1
 8001caa:	2112      	movs	r1, #18
 8001cac:	4810      	ldr	r0, [pc, #64]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001cae:	f001 f98f 	bl	8002fd0 <HAL_I2C_Mem_Write>
				 HAL_I2C_Mem_Read(&hi2c1, 0x09<<1, 0x01, 1, aRxBuffer, sizeof(aRxBuffer), 1000);
 8001cb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cb6:	9302      	str	r3, [sp, #8]
 8001cb8:	2303      	movs	r3, #3
 8001cba:	9301      	str	r3, [sp, #4]
 8001cbc:	4b0b      	ldr	r3, [pc, #44]	; (8001cec <HAL_TIM_PeriodElapsedCallback+0x2ac>)
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	2112      	movs	r1, #18
 8001cc6:	480a      	ldr	r0, [pc, #40]	; (8001cf0 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 8001cc8:	f001 fa7c 	bl	80031c4 <HAL_I2C_Mem_Read>
		 		 break;
 8001ccc:	e074      	b.n	8001db8 <HAL_TIM_PeriodElapsedCallback+0x378>
 8001cce:	bf00      	nop
 8001cd0:	2000036c 	.word	0x2000036c
 8001cd4:	200000a1 	.word	0x200000a1
 8001cd8:	40020400 	.word	0x40020400
 8001cdc:	200000a0 	.word	0x200000a0
 8001ce0:	200000a2 	.word	0x200000a2
 8001ce4:	200000a3 	.word	0x200000a3
 8001ce8:	20000001 	.word	0x20000001
 8001cec:	20000368 	.word	0x20000368
 8001cf0:	200002bc 	.word	0x200002bc
 8001cf4:	20000364 	.word	0x20000364
 8001cf8:	20000002 	.word	0x20000002
 8001cfc:	20000000 	.word	0x20000000
 8001d00:	200000a4 	.word	0x200000a4
		 		 usb_version = 3;
 8001d04:	4b2e      	ldr	r3, [pc, #184]	; (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x380>)
 8001d06:	2203      	movs	r2, #3
 8001d08:	701a      	strb	r2, [r3, #0]
		 		 TxBuffer[0] = 0b01001111;
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001d0c:	224f      	movs	r2, #79	; 0x4f
 8001d0e:	701a      	strb	r2, [r3, #0]
				 TxBuffer[1] = 0x00;
 8001d10:	4b2c      	ldr	r3, [pc, #176]	; (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	705a      	strb	r2, [r3, #1]
				 HAL_I2C_Mem_Write(&hi2c1, 0x09<<1, 0x00, 1, TxBuffer, 1, 1000);
 8001d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d1a:	9302      	str	r3, [sp, #8]
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	9301      	str	r3, [sp, #4]
 8001d20:	4b28      	ldr	r3, [pc, #160]	; (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	2301      	movs	r3, #1
 8001d26:	2200      	movs	r2, #0
 8001d28:	2112      	movs	r1, #18
 8001d2a:	4827      	ldr	r0, [pc, #156]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001d2c:	f001 f950 	bl	8002fd0 <HAL_I2C_Mem_Write>
				 TxBuffer[0] = 0b00011100;
 8001d30:	4b24      	ldr	r3, [pc, #144]	; (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001d32:	221c      	movs	r2, #28
 8001d34:	701a      	strb	r2, [r3, #0]
				 TxBuffer[1] = 0x00;
 8001d36:	4b23      	ldr	r3, [pc, #140]	; (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	705a      	strb	r2, [r3, #1]
				 HAL_I2C_Mem_Write(&hi2c1, 0x09<<1, 0x02, 1, TxBuffer, 1, 1000);
 8001d3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d40:	9302      	str	r3, [sp, #8]
 8001d42:	2301      	movs	r3, #1
 8001d44:	9301      	str	r3, [sp, #4]
 8001d46:	4b1f      	ldr	r3, [pc, #124]	; (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x384>)
 8001d48:	9300      	str	r3, [sp, #0]
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	2202      	movs	r2, #2
 8001d4e:	2112      	movs	r1, #18
 8001d50:	481d      	ldr	r0, [pc, #116]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x388>)
 8001d52:	f001 f93d 	bl	8002fd0 <HAL_I2C_Mem_Write>
		 		 break;
 8001d56:	e02f      	b.n	8001db8 <HAL_TIM_PeriodElapsedCallback+0x378>
		 		 if (contrast == 0) {
 8001d58:	4b1c      	ldr	r3, [pc, #112]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10d      	bne.n	8001d7e <HAL_TIM_PeriodElapsedCallback+0x33e>
		 			 contrast = contrast+63;
 8001d62:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	333f      	adds	r3, #63	; 0x3f
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4b17      	ldr	r3, [pc, #92]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001d6e:	701a      	strb	r2, [r3, #0]
		 		 	 ssd1306_SetContrast(contrast);
 8001d70:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	4618      	mov	r0, r3
 8001d78:	f000 fae5 	bl	8002346 <ssd1306_SetContrast>
		 		 break;
 8001d7c:	e01b      	b.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0x376>
		 		 } else if (contrast > 0 && contrast != 255) {
 8001d7e:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d016      	beq.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0x376>
 8001d88:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	2bff      	cmp	r3, #255	; 0xff
 8001d90:	d011      	beq.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0x376>
		 			 contrast = contrast+64;
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	3340      	adds	r3, #64	; 0x40
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	4b0b      	ldr	r3, [pc, #44]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001d9e:	701a      	strb	r2, [r3, #0]
					 ssd1306_SetContrast(contrast);
 8001da0:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0x38c>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 facd 	bl	8002346 <ssd1306_SetContrast>
		 		 break;
 8001dac:	e003      	b.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0x376>
		 }
	 }
 8001dae:	bf00      	nop
 8001db0:	e002      	b.n	8001db8 <HAL_TIM_PeriodElapsedCallback+0x378>
		 		 break;
 8001db2:	bf00      	nop
 8001db4:	e000      	b.n	8001db8 <HAL_TIM_PeriodElapsedCallback+0x378>
		 		 break;
 8001db6:	bf00      	nop
  }
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	20000002 	.word	0x20000002
 8001dc4:	20000364 	.word	0x20000364
 8001dc8:	200002bc 	.word	0x200002bc
 8001dcc:	20000000 	.word	0x20000000

08001dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd4:	b672      	cpsid	i
}
 8001dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <Error_Handler+0x8>

08001dda <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001dda:	b480      	push	{r7}
 8001ddc:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001dde:	bf00      	nop
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bc80      	pop	{r7}
 8001de4:	4770      	bx	lr
	...

08001de8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af04      	add	r7, sp, #16
 8001dee:	4603      	mov	r3, r0
 8001df0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001df2:	f04f 33ff 	mov.w	r3, #4294967295
 8001df6:	9302      	str	r3, [sp, #8]
 8001df8:	2301      	movs	r3, #1
 8001dfa:	9301      	str	r3, [sp, #4]
 8001dfc:	1dfb      	adds	r3, r7, #7
 8001dfe:	9300      	str	r3, [sp, #0]
 8001e00:	2301      	movs	r3, #1
 8001e02:	2200      	movs	r2, #0
 8001e04:	2178      	movs	r1, #120	; 0x78
 8001e06:	4803      	ldr	r0, [pc, #12]	; (8001e14 <ssd1306_WriteCommand+0x2c>)
 8001e08:	f001 f8e2 	bl	8002fd0 <HAL_I2C_Mem_Write>
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	200002bc 	.word	0x200002bc

08001e18 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af04      	add	r7, sp, #16
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	b29b      	uxth	r3, r3
 8001e26:	f04f 32ff 	mov.w	r2, #4294967295
 8001e2a:	9202      	str	r2, [sp, #8]
 8001e2c:	9301      	str	r3, [sp, #4]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	2301      	movs	r3, #1
 8001e34:	2240      	movs	r2, #64	; 0x40
 8001e36:	2178      	movs	r1, #120	; 0x78
 8001e38:	4803      	ldr	r0, [pc, #12]	; (8001e48 <ssd1306_WriteData+0x30>)
 8001e3a:	f001 f8c9 	bl	8002fd0 <HAL_I2C_Mem_Write>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	200002bc 	.word	0x200002bc

08001e4c <ssd1306_Init>:
    }
    return ret;
}

// Initialize the oled screen
void ssd1306_Init(void) {
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001e50:	f7ff ffc3 	bl	8001dda <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001e54:	2064      	movs	r0, #100	; 0x64
 8001e56:	f000 fc97 	bl	8002788 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f000 fa86 	bl	800236c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001e60:	2020      	movs	r0, #32
 8001e62:	f7ff ffc1 	bl	8001de8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001e66:	2000      	movs	r0, #0
 8001e68:	f7ff ffbe 	bl	8001de8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001e6c:	20b0      	movs	r0, #176	; 0xb0
 8001e6e:	f7ff ffbb 	bl	8001de8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001e72:	20c8      	movs	r0, #200	; 0xc8
 8001e74:	f7ff ffb8 	bl	8001de8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f7ff ffb5 	bl	8001de8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001e7e:	2010      	movs	r0, #16
 8001e80:	f7ff ffb2 	bl	8001de8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001e84:	2040      	movs	r0, #64	; 0x40
 8001e86:	f7ff ffaf 	bl	8001de8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001e8a:	20ff      	movs	r0, #255	; 0xff
 8001e8c:	f000 fa5b 	bl	8002346 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001e90:	20a1      	movs	r0, #161	; 0xa1
 8001e92:	f7ff ffa9 	bl	8001de8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001e96:	20a6      	movs	r0, #166	; 0xa6
 8001e98:	f7ff ffa6 	bl	8001de8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001e9c:	20a8      	movs	r0, #168	; 0xa8
 8001e9e:	f7ff ffa3 	bl	8001de8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8001ea2:	201f      	movs	r0, #31
 8001ea4:	f7ff ffa0 	bl	8001de8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001ea8:	20a4      	movs	r0, #164	; 0xa4
 8001eaa:	f7ff ff9d 	bl	8001de8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001eae:	20d3      	movs	r0, #211	; 0xd3
 8001eb0:	f7ff ff9a 	bl	8001de8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001eb4:	2000      	movs	r0, #0
 8001eb6:	f7ff ff97 	bl	8001de8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001eba:	20d5      	movs	r0, #213	; 0xd5
 8001ebc:	f7ff ff94 	bl	8001de8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001ec0:	20f0      	movs	r0, #240	; 0xf0
 8001ec2:	f7ff ff91 	bl	8001de8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001ec6:	20d9      	movs	r0, #217	; 0xd9
 8001ec8:	f7ff ff8e 	bl	8001de8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001ecc:	2022      	movs	r0, #34	; 0x22
 8001ece:	f7ff ff8b 	bl	8001de8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001ed2:	20da      	movs	r0, #218	; 0xda
 8001ed4:	f7ff ff88 	bl	8001de8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 8001ed8:	2002      	movs	r0, #2
 8001eda:	f7ff ff85 	bl	8001de8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001ede:	20db      	movs	r0, #219	; 0xdb
 8001ee0:	f7ff ff82 	bl	8001de8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001ee4:	2020      	movs	r0, #32
 8001ee6:	f7ff ff7f 	bl	8001de8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001eea:	208d      	movs	r0, #141	; 0x8d
 8001eec:	f7ff ff7c 	bl	8001de8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001ef0:	2014      	movs	r0, #20
 8001ef2:	f7ff ff79 	bl	8001de8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001ef6:	2001      	movs	r0, #1
 8001ef8:	f000 fa38 	bl	800236c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001efc:	2000      	movs	r0, #0
 8001efe:	f000 f80f 	bl	8001f20 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001f02:	f000 f82f 	bl	8001f64 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001f06:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <ssd1306_Init+0xd0>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <ssd1306_Init+0xd0>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001f12:	4b02      	ldr	r3, [pc, #8]	; (8001f1c <ssd1306_Init+0xd0>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	715a      	strb	r2, [r3, #5]
}
 8001f18:	bf00      	nop
 8001f1a:	bd80      	pop	{r7, pc}
 8001f1c:	200002a8 	.word	0x200002a8

08001f20 <ssd1306_Fill>:

// Fill the whole screen with the given color
void ssd1306_Fill(SSD1306_COLOR color) {
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
    /* Set memory */
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	e00d      	b.n	8001f4c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <ssd1306_Fill+0x1a>
 8001f36:	2100      	movs	r1, #0
 8001f38:	e000      	b.n	8001f3c <ssd1306_Fill+0x1c>
 8001f3a:	21ff      	movs	r1, #255	; 0xff
 8001f3c:	4a08      	ldr	r2, [pc, #32]	; (8001f60 <ssd1306_Fill+0x40>)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4413      	add	r3, r2
 8001f42:	460a      	mov	r2, r1
 8001f44:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	3301      	adds	r3, #1
 8001f4a:	60fb      	str	r3, [r7, #12]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f52:	d3ed      	bcc.n	8001f30 <ssd1306_Fill+0x10>
    }
}
 8001f54:	bf00      	nop
 8001f56:	bf00      	nop
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr
 8001f60:	200000a8 	.word	0x200000a8

08001f64 <ssd1306_UpdateScreen>:

// Write the screenbuffer with changed to the screen
void ssd1306_UpdateScreen(void) {
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	71fb      	strb	r3, [r7, #7]
 8001f6e:	e016      	b.n	8001f9e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001f70:	79fb      	ldrb	r3, [r7, #7]
 8001f72:	3b50      	subs	r3, #80	; 0x50
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff ff36 	bl	8001de8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00);
 8001f7c:	2000      	movs	r0, #0
 8001f7e:	f7ff ff33 	bl	8001de8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10);
 8001f82:	2010      	movs	r0, #16
 8001f84:	f7ff ff30 	bl	8001de8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	01db      	lsls	r3, r3, #7
 8001f8c:	4a08      	ldr	r2, [pc, #32]	; (8001fb0 <ssd1306_UpdateScreen+0x4c>)
 8001f8e:	4413      	add	r3, r2
 8001f90:	2180      	movs	r1, #128	; 0x80
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff ff40 	bl	8001e18 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	71fb      	strb	r3, [r7, #7]
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d9e5      	bls.n	8001f70 <ssd1306_UpdateScreen+0xc>
    }
}
 8001fa4:	bf00      	nop
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	200000a8 	.word	0x200000a8

08001fb4 <ssd1306_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate
//    Y => Y Coordinate
//    color => Pixel color
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001fb4:	b480      	push	{r7}
 8001fb6:	b083      	sub	sp, #12
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	4603      	mov	r3, r0
 8001fbc:	71fb      	strb	r3, [r7, #7]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	71bb      	strb	r3, [r7, #6]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	db48      	blt.n	8002060 <ssd1306_DrawPixel+0xac>
 8001fce:	79bb      	ldrb	r3, [r7, #6]
 8001fd0:	2b1f      	cmp	r3, #31
 8001fd2:	d845      	bhi.n	8002060 <ssd1306_DrawPixel+0xac>
        // Don't write outside the buffer
        return;
    }
    
    // Check if pixel should be inverted
    if(SSD1306.Inverted) {
 8001fd4:	4b25      	ldr	r3, [pc, #148]	; (800206c <ssd1306_DrawPixel+0xb8>)
 8001fd6:	791b      	ldrb	r3, [r3, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d006      	beq.n	8001fea <ssd1306_DrawPixel+0x36>
        color = (SSD1306_COLOR)!color;
 8001fdc:	797b      	ldrb	r3, [r7, #5]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	bf0c      	ite	eq
 8001fe2:	2301      	moveq	r3, #1
 8001fe4:	2300      	movne	r3, #0
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	717b      	strb	r3, [r7, #5]
    }
    
    // Draw in the right color
    if(color == White) {
 8001fea:	797b      	ldrb	r3, [r7, #5]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d11a      	bne.n	8002026 <ssd1306_DrawPixel+0x72>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001ff0:	79fa      	ldrb	r2, [r7, #7]
 8001ff2:	79bb      	ldrb	r3, [r7, #6]
 8001ff4:	08db      	lsrs	r3, r3, #3
 8001ff6:	b2d8      	uxtb	r0, r3
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	01db      	lsls	r3, r3, #7
 8001ffc:	4413      	add	r3, r2
 8001ffe:	4a1c      	ldr	r2, [pc, #112]	; (8002070 <ssd1306_DrawPixel+0xbc>)
 8002000:	5cd3      	ldrb	r3, [r2, r3]
 8002002:	b25a      	sxtb	r2, r3
 8002004:	79bb      	ldrb	r3, [r7, #6]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	2101      	movs	r1, #1
 800200c:	fa01 f303 	lsl.w	r3, r1, r3
 8002010:	b25b      	sxtb	r3, r3
 8002012:	4313      	orrs	r3, r2
 8002014:	b259      	sxtb	r1, r3
 8002016:	79fa      	ldrb	r2, [r7, #7]
 8002018:	4603      	mov	r3, r0
 800201a:	01db      	lsls	r3, r3, #7
 800201c:	4413      	add	r3, r2
 800201e:	b2c9      	uxtb	r1, r1
 8002020:	4a13      	ldr	r2, [pc, #76]	; (8002070 <ssd1306_DrawPixel+0xbc>)
 8002022:	54d1      	strb	r1, [r2, r3]
 8002024:	e01d      	b.n	8002062 <ssd1306_DrawPixel+0xae>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8002026:	79fa      	ldrb	r2, [r7, #7]
 8002028:	79bb      	ldrb	r3, [r7, #6]
 800202a:	08db      	lsrs	r3, r3, #3
 800202c:	b2d8      	uxtb	r0, r3
 800202e:	4603      	mov	r3, r0
 8002030:	01db      	lsls	r3, r3, #7
 8002032:	4413      	add	r3, r2
 8002034:	4a0e      	ldr	r2, [pc, #56]	; (8002070 <ssd1306_DrawPixel+0xbc>)
 8002036:	5cd3      	ldrb	r3, [r2, r3]
 8002038:	b25a      	sxtb	r2, r3
 800203a:	79bb      	ldrb	r3, [r7, #6]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	2101      	movs	r1, #1
 8002042:	fa01 f303 	lsl.w	r3, r1, r3
 8002046:	b25b      	sxtb	r3, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	b25b      	sxtb	r3, r3
 800204c:	4013      	ands	r3, r2
 800204e:	b259      	sxtb	r1, r3
 8002050:	79fa      	ldrb	r2, [r7, #7]
 8002052:	4603      	mov	r3, r0
 8002054:	01db      	lsls	r3, r3, #7
 8002056:	4413      	add	r3, r2
 8002058:	b2c9      	uxtb	r1, r1
 800205a:	4a05      	ldr	r2, [pc, #20]	; (8002070 <ssd1306_DrawPixel+0xbc>)
 800205c:	54d1      	strb	r1, [r2, r3]
 800205e:	e000      	b.n	8002062 <ssd1306_DrawPixel+0xae>
        return;
 8002060:	bf00      	nop
    }
}
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	bc80      	pop	{r7}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	200002a8 	.word	0x200002a8
 8002070:	200000a8 	.word	0x200000a8

08002074 <ssd1306_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => char om weg te schrijven
// Font     => Font waarmee we gaan schrijven
// color    => Black or White
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002074:	b590      	push	{r4, r7, lr}
 8002076:	b089      	sub	sp, #36	; 0x24
 8002078:	af00      	add	r7, sp, #0
 800207a:	4604      	mov	r4, r0
 800207c:	1d38      	adds	r0, r7, #4
 800207e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002082:	461a      	mov	r2, r3
 8002084:	4623      	mov	r3, r4
 8002086:	73fb      	strb	r3, [r7, #15]
 8002088:	4613      	mov	r3, r2
 800208a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	2b1f      	cmp	r3, #31
 8002090:	d902      	bls.n	8002098 <ssd1306_WriteChar+0x24>
 8002092:	7bfb      	ldrb	r3, [r7, #15]
 8002094:	2b7e      	cmp	r3, #126	; 0x7e
 8002096:	d901      	bls.n	800209c <ssd1306_WriteChar+0x28>
        return 0;
 8002098:	2300      	movs	r3, #0
 800209a:	e06d      	b.n	8002178 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800209c:	4b38      	ldr	r3, [pc, #224]	; (8002180 <ssd1306_WriteChar+0x10c>)
 800209e:	881b      	ldrh	r3, [r3, #0]
 80020a0:	461a      	mov	r2, r3
 80020a2:	793b      	ldrb	r3, [r7, #4]
 80020a4:	4413      	add	r3, r2
 80020a6:	2b80      	cmp	r3, #128	; 0x80
 80020a8:	dc06      	bgt.n	80020b8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80020aa:	4b35      	ldr	r3, [pc, #212]	; (8002180 <ssd1306_WriteChar+0x10c>)
 80020ac:	885b      	ldrh	r3, [r3, #2]
 80020ae:	461a      	mov	r2, r3
 80020b0:	797b      	ldrb	r3, [r7, #5]
 80020b2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80020b4:	2b20      	cmp	r3, #32
 80020b6:	dd01      	ble.n	80020bc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 80020b8:	2300      	movs	r3, #0
 80020ba:	e05d      	b.n	8002178 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80020bc:	2300      	movs	r3, #0
 80020be:	61fb      	str	r3, [r7, #28]
 80020c0:	e04c      	b.n	800215c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80020c2:	68ba      	ldr	r2, [r7, #8]
 80020c4:	7bfb      	ldrb	r3, [r7, #15]
 80020c6:	3b20      	subs	r3, #32
 80020c8:	7979      	ldrb	r1, [r7, #5]
 80020ca:	fb01 f303 	mul.w	r3, r1, r3
 80020ce:	4619      	mov	r1, r3
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	440b      	add	r3, r1
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80020dc:	2300      	movs	r3, #0
 80020de:	61bb      	str	r3, [r7, #24]
 80020e0:	e034      	b.n	800214c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80020e2:	697a      	ldr	r2, [r7, #20]
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d012      	beq.n	8002118 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80020f2:	4b23      	ldr	r3, [pc, #140]	; (8002180 <ssd1306_WriteChar+0x10c>)
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	4413      	add	r3, r2
 80020fe:	b2d8      	uxtb	r0, r3
 8002100:	4b1f      	ldr	r3, [pc, #124]	; (8002180 <ssd1306_WriteChar+0x10c>)
 8002102:	885b      	ldrh	r3, [r3, #2]
 8002104:	b2da      	uxtb	r2, r3
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	4413      	add	r3, r2
 800210c:	b2db      	uxtb	r3, r3
 800210e:	7bba      	ldrb	r2, [r7, #14]
 8002110:	4619      	mov	r1, r3
 8002112:	f7ff ff4f 	bl	8001fb4 <ssd1306_DrawPixel>
 8002116:	e016      	b.n	8002146 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <ssd1306_WriteChar+0x10c>)
 800211a:	881b      	ldrh	r3, [r3, #0]
 800211c:	b2da      	uxtb	r2, r3
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	4413      	add	r3, r2
 8002124:	b2d8      	uxtb	r0, r3
 8002126:	4b16      	ldr	r3, [pc, #88]	; (8002180 <ssd1306_WriteChar+0x10c>)
 8002128:	885b      	ldrh	r3, [r3, #2]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	b2db      	uxtb	r3, r3
 8002130:	4413      	add	r3, r2
 8002132:	b2d9      	uxtb	r1, r3
 8002134:	7bbb      	ldrb	r3, [r7, #14]
 8002136:	2b00      	cmp	r3, #0
 8002138:	bf0c      	ite	eq
 800213a:	2301      	moveq	r3, #1
 800213c:	2300      	movne	r3, #0
 800213e:	b2db      	uxtb	r3, r3
 8002140:	461a      	mov	r2, r3
 8002142:	f7ff ff37 	bl	8001fb4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	3301      	adds	r3, #1
 800214a:	61bb      	str	r3, [r7, #24]
 800214c:	793b      	ldrb	r3, [r7, #4]
 800214e:	461a      	mov	r2, r3
 8002150:	69bb      	ldr	r3, [r7, #24]
 8002152:	4293      	cmp	r3, r2
 8002154:	d3c5      	bcc.n	80020e2 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	3301      	adds	r3, #1
 800215a:	61fb      	str	r3, [r7, #28]
 800215c:	797b      	ldrb	r3, [r7, #5]
 800215e:	461a      	mov	r2, r3
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	4293      	cmp	r3, r2
 8002164:	d3ad      	bcc.n	80020c2 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <ssd1306_WriteChar+0x10c>)
 8002168:	881a      	ldrh	r2, [r3, #0]
 800216a:	793b      	ldrb	r3, [r7, #4]
 800216c:	b29b      	uxth	r3, r3
 800216e:	4413      	add	r3, r2
 8002170:	b29a      	uxth	r2, r3
 8002172:	4b03      	ldr	r3, [pc, #12]	; (8002180 <ssd1306_WriteChar+0x10c>)
 8002174:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002176:	7bfb      	ldrb	r3, [r7, #15]
}
 8002178:	4618      	mov	r0, r3
 800217a:	3724      	adds	r7, #36	; 0x24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd90      	pop	{r4, r7, pc}
 8002180:	200002a8 	.word	0x200002a8

08002184 <ssd1306_WriteString>:

// Write full string to screenbuffer
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	1d38      	adds	r0, r7, #4
 800218e:	e880 0006 	stmia.w	r0, {r1, r2}
 8002192:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 8002194:	e012      	b.n	80021bc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	7818      	ldrb	r0, [r3, #0]
 800219a:	78fb      	ldrb	r3, [r7, #3]
 800219c:	1d3a      	adds	r2, r7, #4
 800219e:	ca06      	ldmia	r2, {r1, r2}
 80021a0:	f7ff ff68 	bl	8002074 <ssd1306_WriteChar>
 80021a4:	4603      	mov	r3, r0
 80021a6:	461a      	mov	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d002      	beq.n	80021b6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	e008      	b.n	80021c8 <ssd1306_WriteString+0x44>
        }
        
        // Next char
        str++;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	3301      	adds	r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1e8      	bne.n	8002196 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	781b      	ldrb	r3, [r3, #0]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3710      	adds	r7, #16
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}

080021d0 <ssd1306_SetCursor>:

// Position the cursor
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	460a      	mov	r2, r1
 80021da:	71fb      	strb	r3, [r7, #7]
 80021dc:	4613      	mov	r3, r2
 80021de:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80021e0:	79fb      	ldrb	r3, [r7, #7]
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	4b05      	ldr	r3, [pc, #20]	; (80021fc <ssd1306_SetCursor+0x2c>)
 80021e6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80021e8:	79bb      	ldrb	r3, [r7, #6]
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	4b03      	ldr	r3, [pc, #12]	; (80021fc <ssd1306_SetCursor+0x2c>)
 80021ee:	805a      	strh	r2, [r3, #2]
}
 80021f0:	bf00      	nop
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bc80      	pop	{r7}
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	200002a8 	.word	0x200002a8

08002200 <ssd1306_Line>:

// Draw line by Bresenhem's algorithm
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b089      	sub	sp, #36	; 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	4604      	mov	r4, r0
 8002208:	4608      	mov	r0, r1
 800220a:	4611      	mov	r1, r2
 800220c:	461a      	mov	r2, r3
 800220e:	4623      	mov	r3, r4
 8002210:	71fb      	strb	r3, [r7, #7]
 8002212:	4603      	mov	r3, r0
 8002214:	71bb      	strb	r3, [r7, #6]
 8002216:	460b      	mov	r3, r1
 8002218:	717b      	strb	r3, [r7, #5]
 800221a:	4613      	mov	r3, r2
 800221c:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 800221e:	797a      	ldrb	r2, [r7, #5]
 8002220:	79fb      	ldrb	r3, [r7, #7]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	bfb8      	it	lt
 8002228:	425b      	neglt	r3, r3
 800222a:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 800222c:	793a      	ldrb	r2, [r7, #4]
 800222e:	79bb      	ldrb	r3, [r7, #6]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	bfb8      	it	lt
 8002236:	425b      	neglt	r3, r3
 8002238:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 800223a:	79fa      	ldrb	r2, [r7, #7]
 800223c:	797b      	ldrb	r3, [r7, #5]
 800223e:	429a      	cmp	r2, r3
 8002240:	d201      	bcs.n	8002246 <ssd1306_Line+0x46>
 8002242:	2301      	movs	r3, #1
 8002244:	e001      	b.n	800224a <ssd1306_Line+0x4a>
 8002246:	f04f 33ff 	mov.w	r3, #4294967295
 800224a:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 800224c:	79ba      	ldrb	r2, [r7, #6]
 800224e:	793b      	ldrb	r3, [r7, #4]
 8002250:	429a      	cmp	r2, r3
 8002252:	d201      	bcs.n	8002258 <ssd1306_Line+0x58>
 8002254:	2301      	movs	r3, #1
 8002256:	e001      	b.n	800225c <ssd1306_Line+0x5c>
 8002258:	f04f 33ff 	mov.w	r3, #4294967295
 800225c:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  ssd1306_DrawPixel(x2, y2, color);
 8002266:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800226a:	7939      	ldrb	r1, [r7, #4]
 800226c:	797b      	ldrb	r3, [r7, #5]
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff fea0 	bl	8001fb4 <ssd1306_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 8002274:	e024      	b.n	80022c0 <ssd1306_Line+0xc0>
    {
    ssd1306_DrawPixel(x1, y1, color);
 8002276:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800227a:	79b9      	ldrb	r1, [r7, #6]
 800227c:	79fb      	ldrb	r3, [r7, #7]
 800227e:	4618      	mov	r0, r3
 8002280:	f7ff fe98 	bl	8001fb4 <ssd1306_DrawPixel>
    error2 = error * 2;
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	60bb      	str	r3, [r7, #8]
    if(error2 > -deltaY)
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	425b      	negs	r3, r3
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	429a      	cmp	r2, r3
 8002292:	dd08      	ble.n	80022a6 <ssd1306_Line+0xa6>
    {
      error -= deltaY;
 8002294:	69fa      	ldr	r2, [r7, #28]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	61fb      	str	r3, [r7, #28]
      x1 += signX;
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	4413      	add	r3, r2
 80022a4:	71fb      	strb	r3, [r7, #7]
    else
    {
    /*nothing to do*/
    }
        
    if(error2 < deltaX)
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	da08      	bge.n	80022c0 <ssd1306_Line+0xc0>
    {
      error += deltaX;
 80022ae:	69fa      	ldr	r2, [r7, #28]
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	4413      	add	r3, r2
 80022b4:	61fb      	str	r3, [r7, #28]
      y1 += signY;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	79bb      	ldrb	r3, [r7, #6]
 80022bc:	4413      	add	r3, r2
 80022be:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 80022c0:	79fa      	ldrb	r2, [r7, #7]
 80022c2:	797b      	ldrb	r3, [r7, #5]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d1d6      	bne.n	8002276 <ssd1306_Line+0x76>
 80022c8:	79ba      	ldrb	r2, [r7, #6]
 80022ca:	793b      	ldrb	r3, [r7, #4]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d1d2      	bne.n	8002276 <ssd1306_Line+0x76>
    else
    {
    /*nothing to do*/
    }
  }
  return;
 80022d0:	bf00      	nop
}
 80022d2:	3724      	adds	r7, #36	; 0x24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd90      	pop	{r4, r7, pc}

080022d8 <ssd1306_DrawRectangle>:

    return;
}

//Draw rectangle
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80022d8:	b590      	push	{r4, r7, lr}
 80022da:	b085      	sub	sp, #20
 80022dc:	af02      	add	r7, sp, #8
 80022de:	4604      	mov	r4, r0
 80022e0:	4608      	mov	r0, r1
 80022e2:	4611      	mov	r1, r2
 80022e4:	461a      	mov	r2, r3
 80022e6:	4623      	mov	r3, r4
 80022e8:	71fb      	strb	r3, [r7, #7]
 80022ea:	4603      	mov	r3, r0
 80022ec:	71bb      	strb	r3, [r7, #6]
 80022ee:	460b      	mov	r3, r1
 80022f0:	717b      	strb	r3, [r7, #5]
 80022f2:	4613      	mov	r3, r2
 80022f4:	713b      	strb	r3, [r7, #4]
  ssd1306_Line(x1,y1,x2,y1,color);
 80022f6:	79bc      	ldrb	r4, [r7, #6]
 80022f8:	797a      	ldrb	r2, [r7, #5]
 80022fa:	79b9      	ldrb	r1, [r7, #6]
 80022fc:	79f8      	ldrb	r0, [r7, #7]
 80022fe:	7e3b      	ldrb	r3, [r7, #24]
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	4623      	mov	r3, r4
 8002304:	f7ff ff7c 	bl	8002200 <ssd1306_Line>
  ssd1306_Line(x2,y1,x2,y2,color);
 8002308:	793c      	ldrb	r4, [r7, #4]
 800230a:	797a      	ldrb	r2, [r7, #5]
 800230c:	79b9      	ldrb	r1, [r7, #6]
 800230e:	7978      	ldrb	r0, [r7, #5]
 8002310:	7e3b      	ldrb	r3, [r7, #24]
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	4623      	mov	r3, r4
 8002316:	f7ff ff73 	bl	8002200 <ssd1306_Line>
  ssd1306_Line(x2,y2,x1,y2,color);
 800231a:	793c      	ldrb	r4, [r7, #4]
 800231c:	79fa      	ldrb	r2, [r7, #7]
 800231e:	7939      	ldrb	r1, [r7, #4]
 8002320:	7978      	ldrb	r0, [r7, #5]
 8002322:	7e3b      	ldrb	r3, [r7, #24]
 8002324:	9300      	str	r3, [sp, #0]
 8002326:	4623      	mov	r3, r4
 8002328:	f7ff ff6a 	bl	8002200 <ssd1306_Line>
  ssd1306_Line(x1,y2,x1,y1,color);
 800232c:	79bc      	ldrb	r4, [r7, #6]
 800232e:	79fa      	ldrb	r2, [r7, #7]
 8002330:	7939      	ldrb	r1, [r7, #4]
 8002332:	79f8      	ldrb	r0, [r7, #7]
 8002334:	7e3b      	ldrb	r3, [r7, #24]
 8002336:	9300      	str	r3, [sp, #0]
 8002338:	4623      	mov	r3, r4
 800233a:	f7ff ff61 	bl	8002200 <ssd1306_Line>

  return;
 800233e:	bf00      	nop
}
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	bd90      	pop	{r4, r7, pc}

08002346 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8002346:	b580      	push	{r7, lr}
 8002348:	b084      	sub	sp, #16
 800234a:	af00      	add	r7, sp, #0
 800234c:	4603      	mov	r3, r0
 800234e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002350:	2381      	movs	r3, #129	; 0x81
 8002352:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002354:	7bfb      	ldrb	r3, [r7, #15]
 8002356:	4618      	mov	r0, r3
 8002358:	f7ff fd46 	bl	8001de8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800235c:	79fb      	ldrb	r3, [r7, #7]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fd42 	bl	8001de8 <ssd1306_WriteCommand>
}
 8002364:	bf00      	nop
 8002366:	3710      	adds	r7, #16
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002376:	79fb      	ldrb	r3, [r7, #7]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d005      	beq.n	8002388 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800237c:	23af      	movs	r3, #175	; 0xaf
 800237e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <ssd1306_SetDisplayOn+0x38>)
 8002382:	2201      	movs	r2, #1
 8002384:	719a      	strb	r2, [r3, #6]
 8002386:	e004      	b.n	8002392 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002388:	23ae      	movs	r3, #174	; 0xae
 800238a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <ssd1306_SetDisplayOn+0x38>)
 800238e:	2200      	movs	r2, #0
 8002390:	719a      	strb	r2, [r3, #6]
    }
    ssd1306_WriteCommand(value);
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fd27 	bl	8001de8 <ssd1306_WriteCommand>
}
 800239a:	bf00      	nop
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200002a8 	.word	0x200002a8

080023a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b085      	sub	sp, #20
 80023ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80023ae:	4b14      	ldr	r3, [pc, #80]	; (8002400 <HAL_MspInit+0x58>)
 80023b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b2:	4a13      	ldr	r2, [pc, #76]	; (8002400 <HAL_MspInit+0x58>)
 80023b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023b8:	6253      	str	r3, [r2, #36]	; 0x24
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_MspInit+0x58>)
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023c6:	4b0e      	ldr	r3, [pc, #56]	; (8002400 <HAL_MspInit+0x58>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a0d      	ldr	r2, [pc, #52]	; (8002400 <HAL_MspInit+0x58>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6213      	str	r3, [r2, #32]
 80023d2:	4b0b      	ldr	r3, [pc, #44]	; (8002400 <HAL_MspInit+0x58>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023de:	4b08      	ldr	r3, [pc, #32]	; (8002400 <HAL_MspInit+0x58>)
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	4a07      	ldr	r2, [pc, #28]	; (8002400 <HAL_MspInit+0x58>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023e8:	6253      	str	r3, [r2, #36]	; 0x24
 80023ea:	4b05      	ldr	r3, [pc, #20]	; (8002400 <HAL_MspInit+0x58>)
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	607b      	str	r3, [r7, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023f6:	bf00      	nop
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bc80      	pop	{r7}
 80023fe:	4770      	bx	lr
 8002400:	40023800 	.word	0x40023800

08002404 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800240c:	f107 0314 	add.w	r3, r7, #20
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]
 8002414:	605a      	str	r2, [r3, #4]
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	60da      	str	r2, [r3, #12]
 800241a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a17      	ldr	r2, [pc, #92]	; (8002480 <HAL_I2C_MspInit+0x7c>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d128      	bne.n	8002478 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002426:	4b17      	ldr	r3, [pc, #92]	; (8002484 <HAL_I2C_MspInit+0x80>)
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	4a16      	ldr	r2, [pc, #88]	; (8002484 <HAL_I2C_MspInit+0x80>)
 800242c:	f043 0302 	orr.w	r3, r3, #2
 8002430:	61d3      	str	r3, [r2, #28]
 8002432:	4b14      	ldr	r3, [pc, #80]	; (8002484 <HAL_I2C_MspInit+0x80>)
 8002434:	69db      	ldr	r3, [r3, #28]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	613b      	str	r3, [r7, #16]
 800243c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800243e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002444:	2312      	movs	r3, #18
 8002446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800244c:	2303      	movs	r3, #3
 800244e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002450:	2304      	movs	r3, #4
 8002452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002454:	f107 0314 	add.w	r3, r7, #20
 8002458:	4619      	mov	r1, r3
 800245a:	480b      	ldr	r0, [pc, #44]	; (8002488 <HAL_I2C_MspInit+0x84>)
 800245c:	f000 fac4 	bl	80029e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <HAL_I2C_MspInit+0x80>)
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	4a07      	ldr	r2, [pc, #28]	; (8002484 <HAL_I2C_MspInit+0x80>)
 8002466:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800246a:	6253      	str	r3, [r2, #36]	; 0x24
 800246c:	4b05      	ldr	r3, [pc, #20]	; (8002484 <HAL_I2C_MspInit+0x80>)
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002478:	bf00      	nop
 800247a:	3728      	adds	r7, #40	; 0x28
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40005400 	.word	0x40005400
 8002484:	40023800 	.word	0x40023800
 8002488:	40020400 	.word	0x40020400

0800248c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800249c:	d113      	bne.n	80024c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800249e:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <HAL_TIM_Base_MspInit+0x44>)
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	4a0b      	ldr	r2, [pc, #44]	; (80024d0 <HAL_TIM_Base_MspInit+0x44>)
 80024a4:	f043 0301 	orr.w	r3, r3, #1
 80024a8:	6253      	str	r3, [r2, #36]	; 0x24
 80024aa:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <HAL_TIM_Base_MspInit+0x44>)
 80024ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	60fb      	str	r3, [r7, #12]
 80024b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2100      	movs	r1, #0
 80024ba:	201c      	movs	r0, #28
 80024bc:	f000 fa5d 	bl	800297a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80024c0:	201c      	movs	r0, #28
 80024c2:	f000 fa76 	bl	80029b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80024c6:	bf00      	nop
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40023800 	.word	0x40023800

080024d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b08a      	sub	sp, #40	; 0x28
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024dc:	f107 0314 	add.w	r3, r7, #20
 80024e0:	2200      	movs	r2, #0
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	605a      	str	r2, [r3, #4]
 80024e6:	609a      	str	r2, [r3, #8]
 80024e8:	60da      	str	r2, [r3, #12]
 80024ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a17      	ldr	r2, [pc, #92]	; (8002550 <HAL_UART_MspInit+0x7c>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d127      	bne.n	8002546 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024f6:	4b17      	ldr	r3, [pc, #92]	; (8002554 <HAL_UART_MspInit+0x80>)
 80024f8:	6a1b      	ldr	r3, [r3, #32]
 80024fa:	4a16      	ldr	r2, [pc, #88]	; (8002554 <HAL_UART_MspInit+0x80>)
 80024fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002500:	6213      	str	r3, [r2, #32]
 8002502:	4b14      	ldr	r3, [pc, #80]	; (8002554 <HAL_UART_MspInit+0x80>)
 8002504:	6a1b      	ldr	r3, [r3, #32]
 8002506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800250e:	4b11      	ldr	r3, [pc, #68]	; (8002554 <HAL_UART_MspInit+0x80>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	4a10      	ldr	r2, [pc, #64]	; (8002554 <HAL_UART_MspInit+0x80>)
 8002514:	f043 0302 	orr.w	r3, r3, #2
 8002518:	61d3      	str	r3, [r2, #28]
 800251a:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <HAL_UART_MspInit+0x80>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	60fb      	str	r3, [r7, #12]
 8002524:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002526:	23c0      	movs	r3, #192	; 0xc0
 8002528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800252e:	2301      	movs	r3, #1
 8002530:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002532:	2303      	movs	r3, #3
 8002534:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002536:	2307      	movs	r3, #7
 8002538:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800253a:	f107 0314 	add.w	r3, r7, #20
 800253e:	4619      	mov	r1, r3
 8002540:	4805      	ldr	r0, [pc, #20]	; (8002558 <HAL_UART_MspInit+0x84>)
 8002542:	f000 fa51 	bl	80029e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002546:	bf00      	nop
 8002548:	3728      	adds	r7, #40	; 0x28
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40013800 	.word	0x40013800
 8002554:	40023800 	.word	0x40023800
 8002558:	40020400 	.word	0x40020400

0800255c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <NMI_Handler+0x4>

08002562 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002566:	e7fe      	b.n	8002566 <HardFault_Handler+0x4>

08002568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800256c:	e7fe      	b.n	800256c <MemManage_Handler+0x4>

0800256e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800256e:	b480      	push	{r7}
 8002570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002572:	e7fe      	b.n	8002572 <BusFault_Handler+0x4>

08002574 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002578:	e7fe      	b.n	8002578 <UsageFault_Handler+0x4>

0800257a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800257a:	b480      	push	{r7}
 800257c:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	46bd      	mov	sp, r7
 8002582:	bc80      	pop	{r7}
 8002584:	4770      	bx	lr

08002586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002586:	b480      	push	{r7}
 8002588:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800258a:	bf00      	nop
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002592:	b480      	push	{r7}
 8002594:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002596:	bf00      	nop
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr

0800259e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800259e:	b580      	push	{r7, lr}
 80025a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025a2:	f000 f8d5 	bl	8002750 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025a6:	bf00      	nop
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80025b0:	4802      	ldr	r0, [pc, #8]	; (80025bc <TIM2_IRQHandler+0x10>)
 80025b2:	f002 f9db 	bl	800496c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	2000036c 	.word	0x2000036c

080025c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80025c4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80025c8:	f000 fba6 	bl	8002d18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80025cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80025d0:	f000 fba2 	bl	8002d18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80025d4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80025d8:	f000 fb9e 	bl	8002d18 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80025dc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80025e0:	f000 fb9a 	bl	8002d18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025e4:	bf00      	nop
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025f0:	4a14      	ldr	r2, [pc, #80]	; (8002644 <_sbrk+0x5c>)
 80025f2:	4b15      	ldr	r3, [pc, #84]	; (8002648 <_sbrk+0x60>)
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025f8:	697b      	ldr	r3, [r7, #20]
 80025fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025fc:	4b13      	ldr	r3, [pc, #76]	; (800264c <_sbrk+0x64>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d102      	bne.n	800260a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <_sbrk+0x64>)
 8002606:	4a12      	ldr	r2, [pc, #72]	; (8002650 <_sbrk+0x68>)
 8002608:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800260a:	4b10      	ldr	r3, [pc, #64]	; (800264c <_sbrk+0x64>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4413      	add	r3, r2
 8002612:	693a      	ldr	r2, [r7, #16]
 8002614:	429a      	cmp	r2, r3
 8002616:	d207      	bcs.n	8002628 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002618:	f002 fe02 	bl	8005220 <__errno>
 800261c:	4603      	mov	r3, r0
 800261e:	220c      	movs	r2, #12
 8002620:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002622:	f04f 33ff 	mov.w	r3, #4294967295
 8002626:	e009      	b.n	800263c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002628:	4b08      	ldr	r3, [pc, #32]	; (800264c <_sbrk+0x64>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800262e:	4b07      	ldr	r3, [pc, #28]	; (800264c <_sbrk+0x64>)
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4413      	add	r3, r2
 8002636:	4a05      	ldr	r2, [pc, #20]	; (800264c <_sbrk+0x64>)
 8002638:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800263a:	68fb      	ldr	r3, [r7, #12]
}
 800263c:	4618      	mov	r0, r3
 800263e:	3718      	adds	r7, #24
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20008000 	.word	0x20008000
 8002648:	00000400 	.word	0x00000400
 800264c:	200002b0 	.word	0x200002b0
 8002650:	200003c0 	.word	0x200003c0

08002654 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002658:	bf00      	nop
 800265a:	46bd      	mov	sp, r7
 800265c:	bc80      	pop	{r7}
 800265e:	4770      	bx	lr

08002660 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002660:	480c      	ldr	r0, [pc, #48]	; (8002694 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002662:	490d      	ldr	r1, [pc, #52]	; (8002698 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002664:	4a0d      	ldr	r2, [pc, #52]	; (800269c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002666:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002668:	e002      	b.n	8002670 <LoopCopyDataInit>

0800266a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800266a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800266c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800266e:	3304      	adds	r3, #4

08002670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002674:	d3f9      	bcc.n	800266a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002676:	4a0a      	ldr	r2, [pc, #40]	; (80026a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002678:	4c0a      	ldr	r4, [pc, #40]	; (80026a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800267a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800267c:	e001      	b.n	8002682 <LoopFillZerobss>

0800267e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800267e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002680:	3204      	adds	r2, #4

08002682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002684:	d3fb      	bcc.n	800267e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002686:	f7ff ffe5 	bl	8002654 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800268a:	f002 fdcf 	bl	800522c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800268e:	f7fe fbef 	bl	8000e70 <main>
  bx lr
 8002692:	4770      	bx	lr
  ldr r0, =_sdata
 8002694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002698:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800269c:	08007148 	.word	0x08007148
  ldr r2, =_sbss
 80026a0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80026a4:	200003c0 	.word	0x200003c0

080026a8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80026a8:	e7fe      	b.n	80026a8 <ADC1_IRQHandler>

080026aa <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80026aa:	b580      	push	{r7, lr}
 80026ac:	b082      	sub	sp, #8
 80026ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80026b0:	2300      	movs	r3, #0
 80026b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b4:	2003      	movs	r0, #3
 80026b6:	f000 f955 	bl	8002964 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80026ba:	200f      	movs	r0, #15
 80026bc:	f000 f80e 	bl	80026dc <HAL_InitTick>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d002      	beq.n	80026cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	71fb      	strb	r3, [r7, #7]
 80026ca:	e001      	b.n	80026d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026cc:	f7ff fe6c 	bl	80023a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026d0:	79fb      	ldrb	r3, [r7, #7]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80026e4:	2300      	movs	r3, #0
 80026e6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80026e8:	4b16      	ldr	r3, [pc, #88]	; (8002744 <HAL_InitTick+0x68>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d022      	beq.n	8002736 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80026f0:	4b15      	ldr	r3, [pc, #84]	; (8002748 <HAL_InitTick+0x6c>)
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	4b13      	ldr	r3, [pc, #76]	; (8002744 <HAL_InitTick+0x68>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80026fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8002700:	fbb2 f3f3 	udiv	r3, r2, r3
 8002704:	4618      	mov	r0, r3
 8002706:	f000 f962 	bl	80029ce <HAL_SYSTICK_Config>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10f      	bne.n	8002730 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2b0f      	cmp	r3, #15
 8002714:	d809      	bhi.n	800272a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002716:	2200      	movs	r2, #0
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	f04f 30ff 	mov.w	r0, #4294967295
 800271e:	f000 f92c 	bl	800297a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002722:	4a0a      	ldr	r2, [pc, #40]	; (800274c <HAL_InitTick+0x70>)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	e007      	b.n	800273a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	73fb      	strb	r3, [r7, #15]
 800272e:	e004      	b.n	800273a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
 8002734:	e001      	b.n	800273a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800273a:	7bfb      	ldrb	r3, [r7, #15]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	2000001c 	.word	0x2000001c
 8002748:	20000014 	.word	0x20000014
 800274c:	20000018 	.word	0x20000018

08002750 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002754:	4b05      	ldr	r3, [pc, #20]	; (800276c <HAL_IncTick+0x1c>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <HAL_IncTick+0x20>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4413      	add	r3, r2
 800275e:	4a03      	ldr	r2, [pc, #12]	; (800276c <HAL_IncTick+0x1c>)
 8002760:	6013      	str	r3, [r2, #0]
}
 8002762:	bf00      	nop
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	200003ac 	.word	0x200003ac
 8002770:	2000001c 	.word	0x2000001c

08002774 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0
  return uwTick;
 8002778:	4b02      	ldr	r3, [pc, #8]	; (8002784 <HAL_GetTick+0x10>)
 800277a:	681b      	ldr	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	46bd      	mov	sp, r7
 8002780:	bc80      	pop	{r7}
 8002782:	4770      	bx	lr
 8002784:	200003ac 	.word	0x200003ac

08002788 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002790:	f7ff fff0 	bl	8002774 <HAL_GetTick>
 8002794:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a0:	d004      	beq.n	80027ac <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80027a2:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <HAL_Delay+0x40>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4413      	add	r3, r2
 80027aa:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80027ac:	bf00      	nop
 80027ae:	f7ff ffe1 	bl	8002774 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d8f7      	bhi.n	80027ae <HAL_Delay+0x26>
  {
  }
}
 80027be:	bf00      	nop
 80027c0:	bf00      	nop
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	2000001c 	.word	0x2000001c

080027cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027dc:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <__NVIC_SetPriorityGrouping+0x44>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80027e8:	4013      	ands	r3, r2
 80027ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027fe:	4a04      	ldr	r2, [pc, #16]	; (8002810 <__NVIC_SetPriorityGrouping+0x44>)
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	60d3      	str	r3, [r2, #12]
}
 8002804:	bf00      	nop
 8002806:	3714      	adds	r7, #20
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	e000ed00 	.word	0xe000ed00

08002814 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <__NVIC_GetPriorityGrouping+0x18>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	0a1b      	lsrs	r3, r3, #8
 800281e:	f003 0307 	and.w	r3, r3, #7
}
 8002822:	4618      	mov	r0, r3
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800283a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283e:	2b00      	cmp	r3, #0
 8002840:	db0b      	blt.n	800285a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002842:	79fb      	ldrb	r3, [r7, #7]
 8002844:	f003 021f 	and.w	r2, r3, #31
 8002848:	4906      	ldr	r1, [pc, #24]	; (8002864 <__NVIC_EnableIRQ+0x34>)
 800284a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	2001      	movs	r0, #1
 8002852:	fa00 f202 	lsl.w	r2, r0, r2
 8002856:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	e000e100 	.word	0xe000e100

08002868 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	4603      	mov	r3, r0
 8002870:	6039      	str	r1, [r7, #0]
 8002872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002878:	2b00      	cmp	r3, #0
 800287a:	db0a      	blt.n	8002892 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	b2da      	uxtb	r2, r3
 8002880:	490c      	ldr	r1, [pc, #48]	; (80028b4 <__NVIC_SetPriority+0x4c>)
 8002882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002886:	0112      	lsls	r2, r2, #4
 8002888:	b2d2      	uxtb	r2, r2
 800288a:	440b      	add	r3, r1
 800288c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002890:	e00a      	b.n	80028a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	b2da      	uxtb	r2, r3
 8002896:	4908      	ldr	r1, [pc, #32]	; (80028b8 <__NVIC_SetPriority+0x50>)
 8002898:	79fb      	ldrb	r3, [r7, #7]
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	3b04      	subs	r3, #4
 80028a0:	0112      	lsls	r2, r2, #4
 80028a2:	b2d2      	uxtb	r2, r2
 80028a4:	440b      	add	r3, r1
 80028a6:	761a      	strb	r2, [r3, #24]
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bc80      	pop	{r7}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	e000e100 	.word	0xe000e100
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028bc:	b480      	push	{r7}
 80028be:	b089      	sub	sp, #36	; 0x24
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f1c3 0307 	rsb	r3, r3, #7
 80028d6:	2b04      	cmp	r3, #4
 80028d8:	bf28      	it	cs
 80028da:	2304      	movcs	r3, #4
 80028dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3304      	adds	r3, #4
 80028e2:	2b06      	cmp	r3, #6
 80028e4:	d902      	bls.n	80028ec <NVIC_EncodePriority+0x30>
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	3b03      	subs	r3, #3
 80028ea:	e000      	b.n	80028ee <NVIC_EncodePriority+0x32>
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028f0:	f04f 32ff 	mov.w	r2, #4294967295
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	fa02 f303 	lsl.w	r3, r2, r3
 80028fa:	43da      	mvns	r2, r3
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	401a      	ands	r2, r3
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002904:	f04f 31ff 	mov.w	r1, #4294967295
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	fa01 f303 	lsl.w	r3, r1, r3
 800290e:	43d9      	mvns	r1, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002914:	4313      	orrs	r3, r2
         );
}
 8002916:	4618      	mov	r0, r3
 8002918:	3724      	adds	r7, #36	; 0x24
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3b01      	subs	r3, #1
 800292c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002930:	d301      	bcc.n	8002936 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002932:	2301      	movs	r3, #1
 8002934:	e00f      	b.n	8002956 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002936:	4a0a      	ldr	r2, [pc, #40]	; (8002960 <SysTick_Config+0x40>)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	3b01      	subs	r3, #1
 800293c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800293e:	210f      	movs	r1, #15
 8002940:	f04f 30ff 	mov.w	r0, #4294967295
 8002944:	f7ff ff90 	bl	8002868 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002948:	4b05      	ldr	r3, [pc, #20]	; (8002960 <SysTick_Config+0x40>)
 800294a:	2200      	movs	r2, #0
 800294c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800294e:	4b04      	ldr	r3, [pc, #16]	; (8002960 <SysTick_Config+0x40>)
 8002950:	2207      	movs	r2, #7
 8002952:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	e000e010 	.word	0xe000e010

08002964 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff ff2d 	bl	80027cc <__NVIC_SetPriorityGrouping>
}
 8002972:	bf00      	nop
 8002974:	3708      	adds	r7, #8
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}

0800297a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800297a:	b580      	push	{r7, lr}
 800297c:	b086      	sub	sp, #24
 800297e:	af00      	add	r7, sp, #0
 8002980:	4603      	mov	r3, r0
 8002982:	60b9      	str	r1, [r7, #8]
 8002984:	607a      	str	r2, [r7, #4]
 8002986:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002988:	2300      	movs	r3, #0
 800298a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800298c:	f7ff ff42 	bl	8002814 <__NVIC_GetPriorityGrouping>
 8002990:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	68b9      	ldr	r1, [r7, #8]
 8002996:	6978      	ldr	r0, [r7, #20]
 8002998:	f7ff ff90 	bl	80028bc <NVIC_EncodePriority>
 800299c:	4602      	mov	r2, r0
 800299e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ff5f 	bl	8002868 <__NVIC_SetPriority>
}
 80029aa:	bf00      	nop
 80029ac:	3718      	adds	r7, #24
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b082      	sub	sp, #8
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	4603      	mov	r3, r0
 80029ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff35 	bl	8002830 <__NVIC_EnableIRQ>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b082      	sub	sp, #8
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f7ff ffa2 	bl	8002920 <SysTick_Config>
 80029dc:	4603      	mov	r3, r0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3708      	adds	r7, #8
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b087      	sub	sp, #28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029f2:	2300      	movs	r3, #0
 80029f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029f6:	2300      	movs	r3, #0
 80029f8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80029fa:	2300      	movs	r3, #0
 80029fc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80029fe:	e154      	b.n	8002caa <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	2101      	movs	r1, #1
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	fa01 f303 	lsl.w	r3, r1, r3
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	f000 8146 	beq.w	8002ca4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0303 	and.w	r3, r3, #3
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d005      	beq.n	8002a30 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d130      	bne.n	8002a92 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	2203      	movs	r2, #3
 8002a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a40:	43db      	mvns	r3, r3
 8002a42:	693a      	ldr	r2, [r7, #16]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	693a      	ldr	r2, [r7, #16]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002a66:	2201      	movs	r2, #1
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4013      	ands	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	091b      	lsrs	r3, r3, #4
 8002a7c:	f003 0201 	and.w	r2, r3, #1
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	fa02 f303 	lsl.w	r3, r2, r3
 8002a86:	693a      	ldr	r2, [r7, #16]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b03      	cmp	r3, #3
 8002a9c:	d017      	beq.n	8002ace <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	2203      	movs	r2, #3
 8002aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002aae:	43db      	mvns	r3, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	689a      	ldr	r2, [r3, #8]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	693a      	ldr	r2, [r7, #16]
 8002acc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d123      	bne.n	8002b22 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	08da      	lsrs	r2, r3, #3
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	3208      	adds	r2, #8
 8002ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ae6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	220f      	movs	r2, #15
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	43db      	mvns	r3, r3
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0e:	693a      	ldr	r2, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	08da      	lsrs	r2, r3, #3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3208      	adds	r2, #8
 8002b1c:	6939      	ldr	r1, [r7, #16]
 8002b1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	2203      	movs	r2, #3
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43db      	mvns	r3, r3
 8002b34:	693a      	ldr	r2, [r7, #16]
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0203 	and.w	r2, r3, #3
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	005b      	lsls	r3, r3, #1
 8002b46:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	693a      	ldr	r2, [r7, #16]
 8002b54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 80a0 	beq.w	8002ca4 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b64:	4b58      	ldr	r3, [pc, #352]	; (8002cc8 <HAL_GPIO_Init+0x2e0>)
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	4a57      	ldr	r2, [pc, #348]	; (8002cc8 <HAL_GPIO_Init+0x2e0>)
 8002b6a:	f043 0301 	orr.w	r3, r3, #1
 8002b6e:	6213      	str	r3, [r2, #32]
 8002b70:	4b55      	ldr	r3, [pc, #340]	; (8002cc8 <HAL_GPIO_Init+0x2e0>)
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	60bb      	str	r3, [r7, #8]
 8002b7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b7c:	4a53      	ldr	r2, [pc, #332]	; (8002ccc <HAL_GPIO_Init+0x2e4>)
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	089b      	lsrs	r3, r3, #2
 8002b82:	3302      	adds	r3, #2
 8002b84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b88:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f003 0303 	and.w	r3, r3, #3
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	220f      	movs	r2, #15
 8002b94:	fa02 f303 	lsl.w	r3, r2, r3
 8002b98:	43db      	mvns	r3, r3
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	4a4b      	ldr	r2, [pc, #300]	; (8002cd0 <HAL_GPIO_Init+0x2e8>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d019      	beq.n	8002bdc <HAL_GPIO_Init+0x1f4>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4a4a      	ldr	r2, [pc, #296]	; (8002cd4 <HAL_GPIO_Init+0x2ec>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d013      	beq.n	8002bd8 <HAL_GPIO_Init+0x1f0>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a49      	ldr	r2, [pc, #292]	; (8002cd8 <HAL_GPIO_Init+0x2f0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00d      	beq.n	8002bd4 <HAL_GPIO_Init+0x1ec>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a48      	ldr	r2, [pc, #288]	; (8002cdc <HAL_GPIO_Init+0x2f4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d007      	beq.n	8002bd0 <HAL_GPIO_Init+0x1e8>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a47      	ldr	r2, [pc, #284]	; (8002ce0 <HAL_GPIO_Init+0x2f8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d101      	bne.n	8002bcc <HAL_GPIO_Init+0x1e4>
 8002bc8:	2304      	movs	r3, #4
 8002bca:	e008      	b.n	8002bde <HAL_GPIO_Init+0x1f6>
 8002bcc:	2305      	movs	r3, #5
 8002bce:	e006      	b.n	8002bde <HAL_GPIO_Init+0x1f6>
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e004      	b.n	8002bde <HAL_GPIO_Init+0x1f6>
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	e002      	b.n	8002bde <HAL_GPIO_Init+0x1f6>
 8002bd8:	2301      	movs	r3, #1
 8002bda:	e000      	b.n	8002bde <HAL_GPIO_Init+0x1f6>
 8002bdc:	2300      	movs	r3, #0
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	f002 0203 	and.w	r2, r2, #3
 8002be4:	0092      	lsls	r2, r2, #2
 8002be6:	4093      	lsls	r3, r2
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002bee:	4937      	ldr	r1, [pc, #220]	; (8002ccc <HAL_GPIO_Init+0x2e4>)
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	089b      	lsrs	r3, r3, #2
 8002bf4:	3302      	adds	r3, #2
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bfc:	4b39      	ldr	r3, [pc, #228]	; (8002ce4 <HAL_GPIO_Init+0x2fc>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	4013      	ands	r3, r2
 8002c0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d003      	beq.n	8002c20 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002c20:	4a30      	ldr	r2, [pc, #192]	; (8002ce4 <HAL_GPIO_Init+0x2fc>)
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c26:	4b2f      	ldr	r3, [pc, #188]	; (8002ce4 <HAL_GPIO_Init+0x2fc>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4013      	ands	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002c4a:	4a26      	ldr	r2, [pc, #152]	; (8002ce4 <HAL_GPIO_Init+0x2fc>)
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c50:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <HAL_GPIO_Init+0x2fc>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	43db      	mvns	r3, r3
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d003      	beq.n	8002c74 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c74:	4a1b      	ldr	r2, [pc, #108]	; (8002ce4 <HAL_GPIO_Init+0x2fc>)
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ce4 <HAL_GPIO_Init+0x2fc>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	43db      	mvns	r3, r3
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4013      	ands	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002c9e:	4a11      	ldr	r2, [pc, #68]	; (8002ce4 <HAL_GPIO_Init+0x2fc>)
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f47f aea3 	bne.w	8002a00 <HAL_GPIO_Init+0x18>
  }
}
 8002cba:	bf00      	nop
 8002cbc:	bf00      	nop
 8002cbe:	371c      	adds	r7, #28
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	bc80      	pop	{r7}
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	40023800 	.word	0x40023800
 8002ccc:	40010000 	.word	0x40010000
 8002cd0:	40020000 	.word	0x40020000
 8002cd4:	40020400 	.word	0x40020400
 8002cd8:	40020800 	.word	0x40020800
 8002cdc:	40020c00 	.word	0x40020c00
 8002ce0:	40021000 	.word	0x40021000
 8002ce4:	40010400 	.word	0x40010400

08002ce8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	887b      	ldrh	r3, [r7, #2]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d00:	2301      	movs	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
 8002d04:	e001      	b.n	8002d0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d06:	2300      	movs	r3, #0
 8002d08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bc80      	pop	{r7}
 8002d14:	4770      	bx	lr
	...

08002d18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d22:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d24:	695a      	ldr	r2, [r3, #20]
 8002d26:	88fb      	ldrh	r3, [r7, #6]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d006      	beq.n	8002d3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d2e:	4a05      	ldr	r2, [pc, #20]	; (8002d44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d30:	88fb      	ldrh	r3, [r7, #6]
 8002d32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d34:	88fb      	ldrh	r3, [r7, #6]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fe fe3e 	bl	80019b8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40010400 	.word	0x40010400

08002d48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e12b      	b.n	8002fb2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff fb48 	bl	8002404 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2224      	movs	r2, #36	; 0x24
 8002d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0201 	bic.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d9a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002daa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dac:	f001 fc9e 	bl	80046ec <HAL_RCC_GetPCLK1Freq>
 8002db0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	4a81      	ldr	r2, [pc, #516]	; (8002fbc <HAL_I2C_Init+0x274>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d807      	bhi.n	8002dcc <HAL_I2C_Init+0x84>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	4a80      	ldr	r2, [pc, #512]	; (8002fc0 <HAL_I2C_Init+0x278>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	bf94      	ite	ls
 8002dc4:	2301      	movls	r3, #1
 8002dc6:	2300      	movhi	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	e006      	b.n	8002dda <HAL_I2C_Init+0x92>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4a7d      	ldr	r2, [pc, #500]	; (8002fc4 <HAL_I2C_Init+0x27c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	bf94      	ite	ls
 8002dd4:	2301      	movls	r3, #1
 8002dd6:	2300      	movhi	r3, #0
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e0e7      	b.n	8002fb2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	4a78      	ldr	r2, [pc, #480]	; (8002fc8 <HAL_I2C_Init+0x280>)
 8002de6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dea:	0c9b      	lsrs	r3, r3, #18
 8002dec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68ba      	ldr	r2, [r7, #8]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	4a6a      	ldr	r2, [pc, #424]	; (8002fbc <HAL_I2C_Init+0x274>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d802      	bhi.n	8002e1c <HAL_I2C_Init+0xd4>
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	3301      	adds	r3, #1
 8002e1a:	e009      	b.n	8002e30 <HAL_I2C_Init+0xe8>
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e22:	fb02 f303 	mul.w	r3, r2, r3
 8002e26:	4a69      	ldr	r2, [pc, #420]	; (8002fcc <HAL_I2C_Init+0x284>)
 8002e28:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2c:	099b      	lsrs	r3, r3, #6
 8002e2e:	3301      	adds	r3, #1
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	6812      	ldr	r2, [r2, #0]
 8002e34:	430b      	orrs	r3, r1
 8002e36:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e42:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	495c      	ldr	r1, [pc, #368]	; (8002fbc <HAL_I2C_Init+0x274>)
 8002e4c:	428b      	cmp	r3, r1
 8002e4e:	d819      	bhi.n	8002e84 <HAL_I2C_Init+0x13c>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	1e59      	subs	r1, r3, #1
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e5e:	1c59      	adds	r1, r3, #1
 8002e60:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e64:	400b      	ands	r3, r1
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00a      	beq.n	8002e80 <HAL_I2C_Init+0x138>
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1e59      	subs	r1, r3, #1
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e78:	3301      	adds	r3, #1
 8002e7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e7e:	e051      	b.n	8002f24 <HAL_I2C_Init+0x1dc>
 8002e80:	2304      	movs	r3, #4
 8002e82:	e04f      	b.n	8002f24 <HAL_I2C_Init+0x1dc>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d111      	bne.n	8002eb0 <HAL_I2C_Init+0x168>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	1e58      	subs	r0, r3, #1
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6859      	ldr	r1, [r3, #4]
 8002e94:	460b      	mov	r3, r1
 8002e96:	005b      	lsls	r3, r3, #1
 8002e98:	440b      	add	r3, r1
 8002e9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	e012      	b.n	8002ed6 <HAL_I2C_Init+0x18e>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	1e58      	subs	r0, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6859      	ldr	r1, [r3, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	009b      	lsls	r3, r3, #2
 8002ebc:	440b      	add	r3, r1
 8002ebe:	0099      	lsls	r1, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bf0c      	ite	eq
 8002ed0:	2301      	moveq	r3, #1
 8002ed2:	2300      	movne	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d001      	beq.n	8002ede <HAL_I2C_Init+0x196>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e022      	b.n	8002f24 <HAL_I2C_Init+0x1dc>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10e      	bne.n	8002f04 <HAL_I2C_Init+0x1bc>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	1e58      	subs	r0, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6859      	ldr	r1, [r3, #4]
 8002eee:	460b      	mov	r3, r1
 8002ef0:	005b      	lsls	r3, r3, #1
 8002ef2:	440b      	add	r3, r1
 8002ef4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef8:	3301      	adds	r3, #1
 8002efa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002efe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f02:	e00f      	b.n	8002f24 <HAL_I2C_Init+0x1dc>
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1e58      	subs	r0, r3, #1
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6859      	ldr	r1, [r3, #4]
 8002f0c:	460b      	mov	r3, r1
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	440b      	add	r3, r1
 8002f12:	0099      	lsls	r1, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	6809      	ldr	r1, [r1, #0]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	69da      	ldr	r2, [r3, #28]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	430a      	orrs	r2, r1
 8002f46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f56:	687a      	ldr	r2, [r7, #4]
 8002f58:	6911      	ldr	r1, [r2, #16]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68d2      	ldr	r2, [r2, #12]
 8002f5e:	4311      	orrs	r1, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	430b      	orrs	r3, r1
 8002f66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	695a      	ldr	r2, [r3, #20]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	431a      	orrs	r2, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f042 0201 	orr.w	r2, r2, #1
 8002f92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	000186a0 	.word	0x000186a0
 8002fc0:	001e847f 	.word	0x001e847f
 8002fc4:	003d08ff 	.word	0x003d08ff
 8002fc8:	431bde83 	.word	0x431bde83
 8002fcc:	10624dd3 	.word	0x10624dd3

08002fd0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b088      	sub	sp, #32
 8002fd4:	af02      	add	r7, sp, #8
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	4608      	mov	r0, r1
 8002fda:	4611      	mov	r1, r2
 8002fdc:	461a      	mov	r2, r3
 8002fde:	4603      	mov	r3, r0
 8002fe0:	817b      	strh	r3, [r7, #10]
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	813b      	strh	r3, [r7, #8]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fea:	f7ff fbc3 	bl	8002774 <HAL_GetTick>
 8002fee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b20      	cmp	r3, #32
 8002ffa:	f040 80d9 	bne.w	80031b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	2319      	movs	r3, #25
 8003004:	2201      	movs	r2, #1
 8003006:	496d      	ldr	r1, [pc, #436]	; (80031bc <HAL_I2C_Mem_Write+0x1ec>)
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 fc7f 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003014:	2302      	movs	r3, #2
 8003016:	e0cc      	b.n	80031b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800301e:	2b01      	cmp	r3, #1
 8003020:	d101      	bne.n	8003026 <HAL_I2C_Mem_Write+0x56>
 8003022:	2302      	movs	r3, #2
 8003024:	e0c5      	b.n	80031b2 <HAL_I2C_Mem_Write+0x1e2>
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	2201      	movs	r2, #1
 800302a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b01      	cmp	r3, #1
 800303a:	d007      	beq.n	800304c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0201 	orr.w	r2, r2, #1
 800304a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800305a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2221      	movs	r2, #33	; 0x21
 8003060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2240      	movs	r2, #64	; 0x40
 8003068:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6a3a      	ldr	r2, [r7, #32]
 8003076:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800307c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	4a4d      	ldr	r2, [pc, #308]	; (80031c0 <HAL_I2C_Mem_Write+0x1f0>)
 800308c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800308e:	88f8      	ldrh	r0, [r7, #6]
 8003090:	893a      	ldrh	r2, [r7, #8]
 8003092:	8979      	ldrh	r1, [r7, #10]
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	9301      	str	r3, [sp, #4]
 8003098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309a:	9300      	str	r3, [sp, #0]
 800309c:	4603      	mov	r3, r0
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 fab6 	bl	8003610 <I2C_RequestMemoryWrite>
 80030a4:	4603      	mov	r3, r0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d052      	beq.n	8003150 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e081      	b.n	80031b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f000 fd00 	bl	8003ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00d      	beq.n	80030da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	2b04      	cmp	r3, #4
 80030c4:	d107      	bne.n	80030d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e06b      	b.n	80031b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030de:	781a      	ldrb	r2, [r3, #0]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f4:	3b01      	subs	r3, #1
 80030f6:	b29a      	uxth	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	695b      	ldr	r3, [r3, #20]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b04      	cmp	r3, #4
 8003116:	d11b      	bne.n	8003150 <HAL_I2C_Mem_Write+0x180>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311c:	2b00      	cmp	r3, #0
 800311e:	d017      	beq.n	8003150 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003124:	781a      	ldrb	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	1c5a      	adds	r2, r3, #1
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1aa      	bne.n	80030ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 fcec 	bl	8003b3a <I2C_WaitOnBTFFlagUntilTimeout>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00d      	beq.n	8003184 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316c:	2b04      	cmp	r3, #4
 800316e:	d107      	bne.n	8003180 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800317e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e016      	b.n	80031b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003192:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031ac:	2300      	movs	r3, #0
 80031ae:	e000      	b.n	80031b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031b0:	2302      	movs	r3, #2
  }
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	00100002 	.word	0x00100002
 80031c0:	ffff0000 	.word	0xffff0000

080031c4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b08c      	sub	sp, #48	; 0x30
 80031c8:	af02      	add	r7, sp, #8
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	4608      	mov	r0, r1
 80031ce:	4611      	mov	r1, r2
 80031d0:	461a      	mov	r2, r3
 80031d2:	4603      	mov	r3, r0
 80031d4:	817b      	strh	r3, [r7, #10]
 80031d6:	460b      	mov	r3, r1
 80031d8:	813b      	strh	r3, [r7, #8]
 80031da:	4613      	mov	r3, r2
 80031dc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031de:	f7ff fac9 	bl	8002774 <HAL_GetTick>
 80031e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	2b20      	cmp	r3, #32
 80031ee:	f040 8208 	bne.w	8003602 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f4:	9300      	str	r3, [sp, #0]
 80031f6:	2319      	movs	r3, #25
 80031f8:	2201      	movs	r2, #1
 80031fa:	497b      	ldr	r1, [pc, #492]	; (80033e8 <HAL_I2C_Mem_Read+0x224>)
 80031fc:	68f8      	ldr	r0, [r7, #12]
 80031fe:	f000 fb85 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003208:	2302      	movs	r3, #2
 800320a:	e1fb      	b.n	8003604 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_I2C_Mem_Read+0x56>
 8003216:	2302      	movs	r3, #2
 8003218:	e1f4      	b.n	8003604 <HAL_I2C_Mem_Read+0x440>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b01      	cmp	r3, #1
 800322e:	d007      	beq.n	8003240 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681a      	ldr	r2, [r3, #0]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f042 0201 	orr.w	r2, r2, #1
 800323e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800324e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2222      	movs	r2, #34	; 0x22
 8003254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2240      	movs	r2, #64	; 0x40
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800326a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003270:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4a5b      	ldr	r2, [pc, #364]	; (80033ec <HAL_I2C_Mem_Read+0x228>)
 8003280:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003282:	88f8      	ldrh	r0, [r7, #6]
 8003284:	893a      	ldrh	r2, [r7, #8]
 8003286:	8979      	ldrh	r1, [r7, #10]
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	4603      	mov	r3, r0
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 fa52 	bl	800373c <I2C_RequestMemoryRead>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e1b0      	b.n	8003604 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d113      	bne.n	80032d2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032aa:	2300      	movs	r3, #0
 80032ac:	623b      	str	r3, [r7, #32]
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	623b      	str	r3, [r7, #32]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	699b      	ldr	r3, [r3, #24]
 80032bc:	623b      	str	r3, [r7, #32]
 80032be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032ce:	601a      	str	r2, [r3, #0]
 80032d0:	e184      	b.n	80035dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d11b      	bne.n	8003312 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ea:	2300      	movs	r3, #0
 80032ec:	61fb      	str	r3, [r7, #28]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	695b      	ldr	r3, [r3, #20]
 80032f4:	61fb      	str	r3, [r7, #28]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	699b      	ldr	r3, [r3, #24]
 80032fc:	61fb      	str	r3, [r7, #28]
 80032fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	e164      	b.n	80035dc <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003316:	2b02      	cmp	r3, #2
 8003318:	d11b      	bne.n	8003352 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003328:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003338:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800333a:	2300      	movs	r3, #0
 800333c:	61bb      	str	r3, [r7, #24]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	61bb      	str	r3, [r7, #24]
 800334e:	69bb      	ldr	r3, [r7, #24]
 8003350:	e144      	b.n	80035dc <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695b      	ldr	r3, [r3, #20]
 800335c:	617b      	str	r3, [r7, #20]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	617b      	str	r3, [r7, #20]
 8003366:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003368:	e138      	b.n	80035dc <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800336e:	2b03      	cmp	r3, #3
 8003370:	f200 80f1 	bhi.w	8003556 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003378:	2b01      	cmp	r3, #1
 800337a:	d123      	bne.n	80033c4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800337c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 fc1b 	bl	8003bbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e139      	b.n	8003604 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	691a      	ldr	r2, [r3, #16]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	b2d2      	uxtb	r2, r2
 800339c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a2:	1c5a      	adds	r2, r3, #1
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ac:	3b01      	subs	r3, #1
 80033ae:	b29a      	uxth	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b8:	b29b      	uxth	r3, r3
 80033ba:	3b01      	subs	r3, #1
 80033bc:	b29a      	uxth	r2, r3
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033c2:	e10b      	b.n	80035dc <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d14e      	bne.n	800346a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033d2:	2200      	movs	r2, #0
 80033d4:	4906      	ldr	r1, [pc, #24]	; (80033f0 <HAL_I2C_Mem_Read+0x22c>)
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 fa98 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d008      	beq.n	80033f4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e10e      	b.n	8003604 <HAL_I2C_Mem_Read+0x440>
 80033e6:	bf00      	nop
 80033e8:	00100002 	.word	0x00100002
 80033ec:	ffff0000 	.word	0xffff0000
 80033f0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003402:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003416:	1c5a      	adds	r2, r3, #1
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	3b01      	subs	r3, #1
 8003430:	b29a      	uxth	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691a      	ldr	r2, [r3, #16]
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003440:	b2d2      	uxtb	r2, r2
 8003442:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	1c5a      	adds	r2, r3, #1
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003468:	e0b8      	b.n	80035dc <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	9300      	str	r3, [sp, #0]
 800346e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003470:	2200      	movs	r2, #0
 8003472:	4966      	ldr	r1, [pc, #408]	; (800360c <HAL_I2C_Mem_Read+0x448>)
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 fa49 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d001      	beq.n	8003484 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e0bf      	b.n	8003604 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003492:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	691a      	ldr	r2, [r3, #16]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a6:	1c5a      	adds	r2, r3, #1
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b0:	3b01      	subs	r3, #1
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034bc:	b29b      	uxth	r3, r3
 80034be:	3b01      	subs	r3, #1
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c8:	9300      	str	r3, [sp, #0]
 80034ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034cc:	2200      	movs	r2, #0
 80034ce:	494f      	ldr	r1, [pc, #316]	; (800360c <HAL_I2C_Mem_Read+0x448>)
 80034d0:	68f8      	ldr	r0, [r7, #12]
 80034d2:	f000 fa1b 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d001      	beq.n	80034e0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e091      	b.n	8003604 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691a      	ldr	r2, [r3, #16]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003502:	1c5a      	adds	r2, r3, #1
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800350c:	3b01      	subs	r3, #1
 800350e:	b29a      	uxth	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003518:	b29b      	uxth	r3, r3
 800351a:	3b01      	subs	r3, #1
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	b2d2      	uxtb	r2, r2
 800352e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003534:	1c5a      	adds	r2, r3, #1
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354a:	b29b      	uxth	r3, r3
 800354c:	3b01      	subs	r3, #1
 800354e:	b29a      	uxth	r2, r3
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003554:	e042      	b.n	80035dc <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003558:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800355a:	68f8      	ldr	r0, [r7, #12]
 800355c:	f000 fb2e 	bl	8003bbc <I2C_WaitOnRXNEFlagUntilTimeout>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e04c      	b.n	8003604 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	691a      	ldr	r2, [r3, #16]
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003574:	b2d2      	uxtb	r2, r2
 8003576:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003586:	3b01      	subs	r3, #1
 8003588:	b29a      	uxth	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003592:	b29b      	uxth	r3, r3
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	695b      	ldr	r3, [r3, #20]
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d118      	bne.n	80035dc <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	691a      	ldr	r2, [r3, #16]
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c6:	3b01      	subs	r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	3b01      	subs	r3, #1
 80035d6:	b29a      	uxth	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f47f aec2 	bne.w	800336a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035fe:	2300      	movs	r3, #0
 8003600:	e000      	b.n	8003604 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003602:	2302      	movs	r3, #2
  }
}
 8003604:	4618      	mov	r0, r3
 8003606:	3728      	adds	r7, #40	; 0x28
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	00010004 	.word	0x00010004

08003610 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af02      	add	r7, sp, #8
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	4608      	mov	r0, r1
 800361a:	4611      	mov	r1, r2
 800361c:	461a      	mov	r2, r3
 800361e:	4603      	mov	r3, r0
 8003620:	817b      	strh	r3, [r7, #10]
 8003622:	460b      	mov	r3, r1
 8003624:	813b      	strh	r3, [r7, #8]
 8003626:	4613      	mov	r3, r2
 8003628:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003638:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800363a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	2200      	movs	r2, #0
 8003642:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f000 f960 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d00d      	beq.n	800366e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003660:	d103      	bne.n	800366a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003668:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e05f      	b.n	800372e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800366e:	897b      	ldrh	r3, [r7, #10]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	461a      	mov	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800367c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800367e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003680:	6a3a      	ldr	r2, [r7, #32]
 8003682:	492d      	ldr	r1, [pc, #180]	; (8003738 <I2C_RequestMemoryWrite+0x128>)
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f000 f998 	bl	80039ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d001      	beq.n	8003694 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e04c      	b.n	800372e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003694:	2300      	movs	r3, #0
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	617b      	str	r3, [r7, #20]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	617b      	str	r3, [r7, #20]
 80036a8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036ac:	6a39      	ldr	r1, [r7, #32]
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 fa02 	bl	8003ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00d      	beq.n	80036d6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d107      	bne.n	80036d2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036d0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e02b      	b.n	800372e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80036d6:	88fb      	ldrh	r3, [r7, #6]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d105      	bne.n	80036e8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80036dc:	893b      	ldrh	r3, [r7, #8]
 80036de:	b2da      	uxtb	r2, r3
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	611a      	str	r2, [r3, #16]
 80036e6:	e021      	b.n	800372c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80036e8:	893b      	ldrh	r3, [r7, #8]
 80036ea:	0a1b      	lsrs	r3, r3, #8
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f8:	6a39      	ldr	r1, [r7, #32]
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 f9dc 	bl	8003ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00d      	beq.n	8003722 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	2b04      	cmp	r3, #4
 800370c:	d107      	bne.n	800371e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800371c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e005      	b.n	800372e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003722:	893b      	ldrh	r3, [r7, #8]
 8003724:	b2da      	uxtb	r2, r3
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	00010002 	.word	0x00010002

0800373c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b088      	sub	sp, #32
 8003740:	af02      	add	r7, sp, #8
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	4608      	mov	r0, r1
 8003746:	4611      	mov	r1, r2
 8003748:	461a      	mov	r2, r3
 800374a:	4603      	mov	r3, r0
 800374c:	817b      	strh	r3, [r7, #10]
 800374e:	460b      	mov	r3, r1
 8003750:	813b      	strh	r3, [r7, #8]
 8003752:	4613      	mov	r3, r2
 8003754:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003764:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003774:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	2200      	movs	r2, #0
 800377e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003782:	68f8      	ldr	r0, [r7, #12]
 8003784:	f000 f8c2 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00d      	beq.n	80037aa <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800379c:	d103      	bne.n	80037a6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e0aa      	b.n	8003900 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037aa:	897b      	ldrh	r3, [r7, #10]
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	461a      	mov	r2, r3
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037b8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037bc:	6a3a      	ldr	r2, [r7, #32]
 80037be:	4952      	ldr	r1, [pc, #328]	; (8003908 <I2C_RequestMemoryRead+0x1cc>)
 80037c0:	68f8      	ldr	r0, [r7, #12]
 80037c2:	f000 f8fa 	bl	80039ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037c6:	4603      	mov	r3, r0
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d001      	beq.n	80037d0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e097      	b.n	8003900 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	617b      	str	r3, [r7, #20]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	617b      	str	r3, [r7, #20]
 80037e4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e8:	6a39      	ldr	r1, [r7, #32]
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 f964 	bl	8003ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00d      	beq.n	8003812 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fa:	2b04      	cmp	r3, #4
 80037fc:	d107      	bne.n	800380e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e076      	b.n	8003900 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003812:	88fb      	ldrh	r3, [r7, #6]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d105      	bne.n	8003824 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003818:	893b      	ldrh	r3, [r7, #8]
 800381a:	b2da      	uxtb	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	611a      	str	r2, [r3, #16]
 8003822:	e021      	b.n	8003868 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003824:	893b      	ldrh	r3, [r7, #8]
 8003826:	0a1b      	lsrs	r3, r3, #8
 8003828:	b29b      	uxth	r3, r3
 800382a:	b2da      	uxtb	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003834:	6a39      	ldr	r1, [r7, #32]
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f93e 	bl	8003ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00d      	beq.n	800385e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	2b04      	cmp	r3, #4
 8003848:	d107      	bne.n	800385a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003858:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e050      	b.n	8003900 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800385e:	893b      	ldrh	r3, [r7, #8]
 8003860:	b2da      	uxtb	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800386a:	6a39      	ldr	r1, [r7, #32]
 800386c:	68f8      	ldr	r0, [r7, #12]
 800386e:	f000 f923 	bl	8003ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00d      	beq.n	8003894 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	2b04      	cmp	r3, #4
 800387e:	d107      	bne.n	8003890 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800388e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e035      	b.n	8003900 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038a2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a6:	9300      	str	r3, [sp, #0]
 80038a8:	6a3b      	ldr	r3, [r7, #32]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f82b 	bl	800390c <I2C_WaitOnFlagUntilTimeout>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00d      	beq.n	80038d8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038ca:	d103      	bne.n	80038d4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e013      	b.n	8003900 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80038d8:	897b      	ldrh	r3, [r7, #10]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	f043 0301 	orr.w	r3, r3, #1
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80038e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ea:	6a3a      	ldr	r2, [r7, #32]
 80038ec:	4906      	ldr	r1, [pc, #24]	; (8003908 <I2C_RequestMemoryRead+0x1cc>)
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f000 f863 	bl	80039ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e000      	b.n	8003900 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	00010002 	.word	0x00010002

0800390c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	603b      	str	r3, [r7, #0]
 8003918:	4613      	mov	r3, r2
 800391a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800391c:	e025      	b.n	800396a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003924:	d021      	beq.n	800396a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003926:	f7fe ff25 	bl	8002774 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	683a      	ldr	r2, [r7, #0]
 8003932:	429a      	cmp	r2, r3
 8003934:	d302      	bcc.n	800393c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d116      	bne.n	800396a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2200      	movs	r2, #0
 8003940:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	2220      	movs	r2, #32
 8003946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f043 0220 	orr.w	r2, r3, #32
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e023      	b.n	80039b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	0c1b      	lsrs	r3, r3, #16
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b01      	cmp	r3, #1
 8003972:	d10d      	bne.n	8003990 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	695b      	ldr	r3, [r3, #20]
 800397a:	43da      	mvns	r2, r3
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	4013      	ands	r3, r2
 8003980:	b29b      	uxth	r3, r3
 8003982:	2b00      	cmp	r3, #0
 8003984:	bf0c      	ite	eq
 8003986:	2301      	moveq	r3, #1
 8003988:	2300      	movne	r3, #0
 800398a:	b2db      	uxtb	r3, r3
 800398c:	461a      	mov	r2, r3
 800398e:	e00c      	b.n	80039aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	43da      	mvns	r2, r3
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	4013      	ands	r3, r2
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	bf0c      	ite	eq
 80039a2:	2301      	moveq	r3, #1
 80039a4:	2300      	movne	r3, #0
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d0b6      	beq.n	800391e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	3710      	adds	r7, #16
 80039b6:	46bd      	mov	sp, r7
 80039b8:	bd80      	pop	{r7, pc}

080039ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039ba:	b580      	push	{r7, lr}
 80039bc:	b084      	sub	sp, #16
 80039be:	af00      	add	r7, sp, #0
 80039c0:	60f8      	str	r0, [r7, #12]
 80039c2:	60b9      	str	r1, [r7, #8]
 80039c4:	607a      	str	r2, [r7, #4]
 80039c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039c8:	e051      	b.n	8003a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	695b      	ldr	r3, [r3, #20]
 80039d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d8:	d123      	bne.n	8003a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2200      	movs	r2, #0
 80039f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	2220      	movs	r2, #32
 80039fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f043 0204 	orr.w	r2, r3, #4
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e046      	b.n	8003ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a28:	d021      	beq.n	8003a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a2a:	f7fe fea3 	bl	8002774 <HAL_GetTick>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d302      	bcc.n	8003a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d116      	bne.n	8003a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2200      	movs	r2, #0
 8003a44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2220      	movs	r2, #32
 8003a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5a:	f043 0220 	orr.w	r2, r3, #32
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2200      	movs	r2, #0
 8003a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e020      	b.n	8003ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	0c1b      	lsrs	r3, r3, #16
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	d10c      	bne.n	8003a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	4013      	ands	r3, r2
 8003a84:	b29b      	uxth	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	bf14      	ite	ne
 8003a8a:	2301      	movne	r3, #1
 8003a8c:	2300      	moveq	r3, #0
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	e00b      	b.n	8003aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	699b      	ldr	r3, [r3, #24]
 8003a98:	43da      	mvns	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bf14      	ite	ne
 8003aa4:	2301      	movne	r3, #1
 8003aa6:	2300      	moveq	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d18d      	bne.n	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ac4:	e02d      	b.n	8003b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 f8ce 	bl	8003c68 <I2C_IsAcknowledgeFailed>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e02d      	b.n	8003b32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003adc:	d021      	beq.n	8003b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ade:	f7fe fe49 	bl	8002774 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	68ba      	ldr	r2, [r7, #8]
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d302      	bcc.n	8003af4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d116      	bne.n	8003b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2220      	movs	r2, #32
 8003afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	f043 0220 	orr.w	r2, r3, #32
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e007      	b.n	8003b32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2c:	2b80      	cmp	r3, #128	; 0x80
 8003b2e:	d1ca      	bne.n	8003ac6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}

08003b3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b3a:	b580      	push	{r7, lr}
 8003b3c:	b084      	sub	sp, #16
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b46:	e02d      	b.n	8003ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b48:	68f8      	ldr	r0, [r7, #12]
 8003b4a:	f000 f88d 	bl	8003c68 <I2C_IsAcknowledgeFailed>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e02d      	b.n	8003bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5e:	d021      	beq.n	8003ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b60:	f7fe fe08 	bl	8002774 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d302      	bcc.n	8003b76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d116      	bne.n	8003ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	f043 0220 	orr.w	r2, r3, #32
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	e007      	b.n	8003bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	695b      	ldr	r3, [r3, #20]
 8003baa:	f003 0304 	and.w	r3, r3, #4
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d1ca      	bne.n	8003b48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bc8:	e042      	b.n	8003c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695b      	ldr	r3, [r3, #20]
 8003bd0:	f003 0310 	and.w	r3, r3, #16
 8003bd4:	2b10      	cmp	r3, #16
 8003bd6:	d119      	bne.n	8003c0c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f06f 0210 	mvn.w	r2, #16
 8003be0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e029      	b.n	8003c60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c0c:	f7fe fdb2 	bl	8002774 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	68ba      	ldr	r2, [r7, #8]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d302      	bcc.n	8003c22 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d116      	bne.n	8003c50 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2220      	movs	r2, #32
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c3c:	f043 0220 	orr.w	r2, r3, #32
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e007      	b.n	8003c60 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	695b      	ldr	r3, [r3, #20]
 8003c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c5a:	2b40      	cmp	r3, #64	; 0x40
 8003c5c:	d1b5      	bne.n	8003bca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3710      	adds	r7, #16
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}

08003c68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c7e:	d11b      	bne.n	8003cb8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2220      	movs	r2, #32
 8003c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	f043 0204 	orr.w	r2, r3, #4
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e000      	b.n	8003cba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b088      	sub	sp, #32
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e31d      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cd6:	4b94      	ldr	r3, [pc, #592]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
 8003cde:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ce0:	4b91      	ldr	r3, [pc, #580]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d07b      	beq.n	8003dee <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d006      	beq.n	8003d0a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b0c      	cmp	r3, #12
 8003d00:	d10f      	bne.n	8003d22 <HAL_RCC_OscConfig+0x5e>
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d08:	d10b      	bne.n	8003d22 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d0a:	4b87      	ldr	r3, [pc, #540]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d06a      	beq.n	8003dec <HAL_RCC_OscConfig+0x128>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d166      	bne.n	8003dec <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e2f7      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d106      	bne.n	8003d38 <HAL_RCC_OscConfig+0x74>
 8003d2a:	4b7f      	ldr	r3, [pc, #508]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a7e      	ldr	r2, [pc, #504]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	e02d      	b.n	8003d94 <HAL_RCC_OscConfig+0xd0>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d10c      	bne.n	8003d5a <HAL_RCC_OscConfig+0x96>
 8003d40:	4b79      	ldr	r3, [pc, #484]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a78      	ldr	r2, [pc, #480]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	4b76      	ldr	r3, [pc, #472]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a75      	ldr	r2, [pc, #468]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	e01c      	b.n	8003d94 <HAL_RCC_OscConfig+0xd0>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b05      	cmp	r3, #5
 8003d60:	d10c      	bne.n	8003d7c <HAL_RCC_OscConfig+0xb8>
 8003d62:	4b71      	ldr	r3, [pc, #452]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4a70      	ldr	r2, [pc, #448]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d6c:	6013      	str	r3, [r2, #0]
 8003d6e:	4b6e      	ldr	r3, [pc, #440]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a6d      	ldr	r2, [pc, #436]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d78:	6013      	str	r3, [r2, #0]
 8003d7a:	e00b      	b.n	8003d94 <HAL_RCC_OscConfig+0xd0>
 8003d7c:	4b6a      	ldr	r3, [pc, #424]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a69      	ldr	r2, [pc, #420]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	4b67      	ldr	r3, [pc, #412]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a66      	ldr	r2, [pc, #408]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003d8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d013      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9c:	f7fe fcea 	bl	8002774 <HAL_GetTick>
 8003da0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003da2:	e008      	b.n	8003db6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003da4:	f7fe fce6 	bl	8002774 <HAL_GetTick>
 8003da8:	4602      	mov	r2, r0
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	1ad3      	subs	r3, r2, r3
 8003dae:	2b64      	cmp	r3, #100	; 0x64
 8003db0:	d901      	bls.n	8003db6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e2ad      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003db6:	4b5c      	ldr	r3, [pc, #368]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0f0      	beq.n	8003da4 <HAL_RCC_OscConfig+0xe0>
 8003dc2:	e014      	b.n	8003dee <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7fe fcd6 	bl	8002774 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dcc:	f7fe fcd2 	bl	8002774 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b64      	cmp	r3, #100	; 0x64
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e299      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003dde:	4b52      	ldr	r3, [pc, #328]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x108>
 8003dea:	e000      	b.n	8003dee <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d05a      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	2b04      	cmp	r3, #4
 8003dfe:	d005      	beq.n	8003e0c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b0c      	cmp	r3, #12
 8003e04:	d119      	bne.n	8003e3a <HAL_RCC_OscConfig+0x176>
 8003e06:	697b      	ldr	r3, [r7, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d116      	bne.n	8003e3a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e0c:	4b46      	ldr	r3, [pc, #280]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d005      	beq.n	8003e24 <HAL_RCC_OscConfig+0x160>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d001      	beq.n	8003e24 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003e20:	2301      	movs	r3, #1
 8003e22:	e276      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e24:	4b40      	ldr	r3, [pc, #256]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	021b      	lsls	r3, r3, #8
 8003e32:	493d      	ldr	r1, [pc, #244]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003e34:	4313      	orrs	r3, r2
 8003e36:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e38:	e03a      	b.n	8003eb0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d020      	beq.n	8003e84 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e42:	4b3a      	ldr	r3, [pc, #232]	; (8003f2c <HAL_RCC_OscConfig+0x268>)
 8003e44:	2201      	movs	r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e48:	f7fe fc94 	bl	8002774 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e50:	f7fe fc90 	bl	8002774 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e257      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e62:	4b31      	ldr	r3, [pc, #196]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6e:	4b2e      	ldr	r3, [pc, #184]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	021b      	lsls	r3, r3, #8
 8003e7c:	492a      	ldr	r1, [pc, #168]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	604b      	str	r3, [r1, #4]
 8003e82:	e015      	b.n	8003eb0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e84:	4b29      	ldr	r3, [pc, #164]	; (8003f2c <HAL_RCC_OscConfig+0x268>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e8a:	f7fe fc73 	bl	8002774 <HAL_GetTick>
 8003e8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003e90:	e008      	b.n	8003ea4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e92:	f7fe fc6f 	bl	8002774 <HAL_GetTick>
 8003e96:	4602      	mov	r2, r0
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e236      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003ea4:	4b20      	ldr	r3, [pc, #128]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f003 0302 	and.w	r3, r3, #2
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f0      	bne.n	8003e92 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0310 	and.w	r3, r3, #16
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 80b8 	beq.w	800402e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d170      	bne.n	8003fa6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ec4:	4b18      	ldr	r3, [pc, #96]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d005      	beq.n	8003edc <HAL_RCC_OscConfig+0x218>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e21a      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a1a      	ldr	r2, [r3, #32]
 8003ee0:	4b11      	ldr	r3, [pc, #68]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d921      	bls.n	8003f30 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f000 fc23 	bl	800473c <RCC_SetFlashLatencyFromMSIRange>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e208      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f00:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	4906      	ldr	r1, [pc, #24]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f12:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	69db      	ldr	r3, [r3, #28]
 8003f1e:	061b      	lsls	r3, r3, #24
 8003f20:	4901      	ldr	r1, [pc, #4]	; (8003f28 <HAL_RCC_OscConfig+0x264>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	604b      	str	r3, [r1, #4]
 8003f26:	e020      	b.n	8003f6a <HAL_RCC_OscConfig+0x2a6>
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f30:	4ba4      	ldr	r3, [pc, #656]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	49a1      	ldr	r1, [pc, #644]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f42:	4ba0      	ldr	r3, [pc, #640]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	69db      	ldr	r3, [r3, #28]
 8003f4e:	061b      	lsls	r3, r3, #24
 8003f50:	499c      	ldr	r1, [pc, #624]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fbee 	bl	800473c <RCC_SetFlashLatencyFromMSIRange>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e1d3      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	0b5b      	lsrs	r3, r3, #13
 8003f70:	3301      	adds	r3, #1
 8003f72:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f76:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003f7a:	4a92      	ldr	r2, [pc, #584]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8003f7c:	6892      	ldr	r2, [r2, #8]
 8003f7e:	0912      	lsrs	r2, r2, #4
 8003f80:	f002 020f 	and.w	r2, r2, #15
 8003f84:	4990      	ldr	r1, [pc, #576]	; (80041c8 <HAL_RCC_OscConfig+0x504>)
 8003f86:	5c8a      	ldrb	r2, [r1, r2]
 8003f88:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003f8a:	4a90      	ldr	r2, [pc, #576]	; (80041cc <HAL_RCC_OscConfig+0x508>)
 8003f8c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f8e:	4b90      	ldr	r3, [pc, #576]	; (80041d0 <HAL_RCC_OscConfig+0x50c>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fe fba2 	bl	80026dc <HAL_InitTick>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f9c:	7bfb      	ldrb	r3, [r7, #15]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d045      	beq.n	800402e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	e1b5      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d029      	beq.n	8004002 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003fae:	4b89      	ldr	r3, [pc, #548]	; (80041d4 <HAL_RCC_OscConfig+0x510>)
 8003fb0:	2201      	movs	r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fb4:	f7fe fbde 	bl	8002774 <HAL_GetTick>
 8003fb8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003fba:	e008      	b.n	8003fce <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fbc:	f7fe fbda 	bl	8002774 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d901      	bls.n	8003fce <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8003fca:	2303      	movs	r3, #3
 8003fcc:	e1a1      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003fce:	4b7d      	ldr	r3, [pc, #500]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0f0      	beq.n	8003fbc <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fda:	4b7a      	ldr	r3, [pc, #488]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	4977      	ldr	r1, [pc, #476]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fec:	4b75      	ldr	r3, [pc, #468]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	061b      	lsls	r3, r3, #24
 8003ffa:	4972      	ldr	r1, [pc, #456]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	604b      	str	r3, [r1, #4]
 8004000:	e015      	b.n	800402e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004002:	4b74      	ldr	r3, [pc, #464]	; (80041d4 <HAL_RCC_OscConfig+0x510>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004008:	f7fe fbb4 	bl	8002774 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004010:	f7fe fbb0 	bl	8002774 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e177      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004022:	4b68      	ldr	r3, [pc, #416]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	d030      	beq.n	800409c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d016      	beq.n	8004070 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004042:	4b65      	ldr	r3, [pc, #404]	; (80041d8 <HAL_RCC_OscConfig+0x514>)
 8004044:	2201      	movs	r2, #1
 8004046:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004048:	f7fe fb94 	bl	8002774 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800404e:	e008      	b.n	8004062 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004050:	f7fe fb90 	bl	8002774 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	2b02      	cmp	r3, #2
 800405c:	d901      	bls.n	8004062 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800405e:	2303      	movs	r3, #3
 8004060:	e157      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004062:	4b58      	ldr	r3, [pc, #352]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0f0      	beq.n	8004050 <HAL_RCC_OscConfig+0x38c>
 800406e:	e015      	b.n	800409c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004070:	4b59      	ldr	r3, [pc, #356]	; (80041d8 <HAL_RCC_OscConfig+0x514>)
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004076:	f7fe fb7d 	bl	8002774 <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800407e:	f7fe fb79 	bl	8002774 <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b02      	cmp	r3, #2
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e140      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004090:	4b4c      	ldr	r3, [pc, #304]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004094:	f003 0302 	and.w	r3, r3, #2
 8004098:	2b00      	cmp	r3, #0
 800409a:	d1f0      	bne.n	800407e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0304 	and.w	r3, r3, #4
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f000 80b5 	beq.w	8004214 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040aa:	2300      	movs	r3, #0
 80040ac:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ae:	4b45      	ldr	r3, [pc, #276]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10d      	bne.n	80040d6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ba:	4b42      	ldr	r3, [pc, #264]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	4a41      	ldr	r2, [pc, #260]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 80040c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040c4:	6253      	str	r3, [r2, #36]	; 0x24
 80040c6:	4b3f      	ldr	r3, [pc, #252]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ce:	60bb      	str	r3, [r7, #8]
 80040d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040d2:	2301      	movs	r3, #1
 80040d4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d6:	4b41      	ldr	r3, [pc, #260]	; (80041dc <HAL_RCC_OscConfig+0x518>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d118      	bne.n	8004114 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040e2:	4b3e      	ldr	r3, [pc, #248]	; (80041dc <HAL_RCC_OscConfig+0x518>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a3d      	ldr	r2, [pc, #244]	; (80041dc <HAL_RCC_OscConfig+0x518>)
 80040e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ee:	f7fe fb41 	bl	8002774 <HAL_GetTick>
 80040f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f4:	e008      	b.n	8004108 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f6:	f7fe fb3d 	bl	8002774 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b64      	cmp	r3, #100	; 0x64
 8004102:	d901      	bls.n	8004108 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e104      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004108:	4b34      	ldr	r3, [pc, #208]	; (80041dc <HAL_RCC_OscConfig+0x518>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0f0      	beq.n	80040f6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d106      	bne.n	800412a <HAL_RCC_OscConfig+0x466>
 800411c:	4b29      	ldr	r3, [pc, #164]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 800411e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004120:	4a28      	ldr	r2, [pc, #160]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004122:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004126:	6353      	str	r3, [r2, #52]	; 0x34
 8004128:	e02d      	b.n	8004186 <HAL_RCC_OscConfig+0x4c2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10c      	bne.n	800414c <HAL_RCC_OscConfig+0x488>
 8004132:	4b24      	ldr	r3, [pc, #144]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004136:	4a23      	ldr	r2, [pc, #140]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800413c:	6353      	str	r3, [r2, #52]	; 0x34
 800413e:	4b21      	ldr	r3, [pc, #132]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004142:	4a20      	ldr	r2, [pc, #128]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004144:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004148:	6353      	str	r3, [r2, #52]	; 0x34
 800414a:	e01c      	b.n	8004186 <HAL_RCC_OscConfig+0x4c2>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	2b05      	cmp	r3, #5
 8004152:	d10c      	bne.n	800416e <HAL_RCC_OscConfig+0x4aa>
 8004154:	4b1b      	ldr	r3, [pc, #108]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004158:	4a1a      	ldr	r2, [pc, #104]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 800415a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800415e:	6353      	str	r3, [r2, #52]	; 0x34
 8004160:	4b18      	ldr	r3, [pc, #96]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004164:	4a17      	ldr	r2, [pc, #92]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004166:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416a:	6353      	str	r3, [r2, #52]	; 0x34
 800416c:	e00b      	b.n	8004186 <HAL_RCC_OscConfig+0x4c2>
 800416e:	4b15      	ldr	r3, [pc, #84]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004172:	4a14      	ldr	r2, [pc, #80]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004178:	6353      	str	r3, [r2, #52]	; 0x34
 800417a:	4b12      	ldr	r3, [pc, #72]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 800417c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800417e:	4a11      	ldr	r2, [pc, #68]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 8004180:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004184:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d015      	beq.n	80041ba <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800418e:	f7fe faf1 	bl	8002774 <HAL_GetTick>
 8004192:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004194:	e00a      	b.n	80041ac <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004196:	f7fe faed 	bl	8002774 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e0b2      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80041ac:	4b05      	ldr	r3, [pc, #20]	; (80041c4 <HAL_RCC_OscConfig+0x500>)
 80041ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0ee      	beq.n	8004196 <HAL_RCC_OscConfig+0x4d2>
 80041b8:	e023      	b.n	8004202 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ba:	f7fe fadb 	bl	8002774 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041c0:	e019      	b.n	80041f6 <HAL_RCC_OscConfig+0x532>
 80041c2:	bf00      	nop
 80041c4:	40023800 	.word	0x40023800
 80041c8:	080070ec 	.word	0x080070ec
 80041cc:	20000014 	.word	0x20000014
 80041d0:	20000018 	.word	0x20000018
 80041d4:	42470020 	.word	0x42470020
 80041d8:	42470680 	.word	0x42470680
 80041dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041e0:	f7fe fac8 	bl	8002774 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e08d      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80041f6:	4b49      	ldr	r3, [pc, #292]	; (800431c <HAL_RCC_OscConfig+0x658>)
 80041f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1ee      	bne.n	80041e0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004202:	7ffb      	ldrb	r3, [r7, #31]
 8004204:	2b01      	cmp	r3, #1
 8004206:	d105      	bne.n	8004214 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004208:	4b44      	ldr	r3, [pc, #272]	; (800431c <HAL_RCC_OscConfig+0x658>)
 800420a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800420c:	4a43      	ldr	r2, [pc, #268]	; (800431c <HAL_RCC_OscConfig+0x658>)
 800420e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004212:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004218:	2b00      	cmp	r3, #0
 800421a:	d079      	beq.n	8004310 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	2b0c      	cmp	r3, #12
 8004220:	d056      	beq.n	80042d0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	2b02      	cmp	r3, #2
 8004228:	d13b      	bne.n	80042a2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800422a:	4b3d      	ldr	r3, [pc, #244]	; (8004320 <HAL_RCC_OscConfig+0x65c>)
 800422c:	2200      	movs	r2, #0
 800422e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004230:	f7fe faa0 	bl	8002774 <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004238:	f7fe fa9c 	bl	8002774 <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e063      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800424a:	4b34      	ldr	r3, [pc, #208]	; (800431c <HAL_RCC_OscConfig+0x658>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f0      	bne.n	8004238 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004256:	4b31      	ldr	r3, [pc, #196]	; (800431c <HAL_RCC_OscConfig+0x658>)
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004266:	4319      	orrs	r1, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426c:	430b      	orrs	r3, r1
 800426e:	492b      	ldr	r1, [pc, #172]	; (800431c <HAL_RCC_OscConfig+0x658>)
 8004270:	4313      	orrs	r3, r2
 8004272:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004274:	4b2a      	ldr	r3, [pc, #168]	; (8004320 <HAL_RCC_OscConfig+0x65c>)
 8004276:	2201      	movs	r2, #1
 8004278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800427a:	f7fe fa7b 	bl	8002774 <HAL_GetTick>
 800427e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004280:	e008      	b.n	8004294 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004282:	f7fe fa77 	bl	8002774 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	2b02      	cmp	r3, #2
 800428e:	d901      	bls.n	8004294 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004290:	2303      	movs	r3, #3
 8004292:	e03e      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004294:	4b21      	ldr	r3, [pc, #132]	; (800431c <HAL_RCC_OscConfig+0x658>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0f0      	beq.n	8004282 <HAL_RCC_OscConfig+0x5be>
 80042a0:	e036      	b.n	8004310 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042a2:	4b1f      	ldr	r3, [pc, #124]	; (8004320 <HAL_RCC_OscConfig+0x65c>)
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a8:	f7fe fa64 	bl	8002774 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042b0:	f7fe fa60 	bl	8002774 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e027      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80042c2:	4b16      	ldr	r3, [pc, #88]	; (800431c <HAL_RCC_OscConfig+0x658>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1f0      	bne.n	80042b0 <HAL_RCC_OscConfig+0x5ec>
 80042ce:	e01f      	b.n	8004310 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e01a      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042dc:	4b0f      	ldr	r3, [pc, #60]	; (800431c <HAL_RCC_OscConfig+0x658>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d10d      	bne.n	800430c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d106      	bne.n	800430c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004308:	429a      	cmp	r2, r3
 800430a:	d001      	beq.n	8004310 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e000      	b.n	8004312 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8004310:	2300      	movs	r3, #0
}
 8004312:	4618      	mov	r0, r3
 8004314:	3720      	adds	r7, #32
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	40023800 	.word	0x40023800
 8004320:	42470060 	.word	0x42470060

08004324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e11a      	b.n	800456e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004338:	4b8f      	ldr	r3, [pc, #572]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d919      	bls.n	800437a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d105      	bne.n	8004358 <HAL_RCC_ClockConfig+0x34>
 800434c:	4b8a      	ldr	r3, [pc, #552]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a89      	ldr	r2, [pc, #548]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 8004352:	f043 0304 	orr.w	r3, r3, #4
 8004356:	6013      	str	r3, [r2, #0]
 8004358:	4b87      	ldr	r3, [pc, #540]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f023 0201 	bic.w	r2, r3, #1
 8004360:	4985      	ldr	r1, [pc, #532]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	4313      	orrs	r3, r2
 8004366:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004368:	4b83      	ldr	r3, [pc, #524]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0301 	and.w	r3, r3, #1
 8004370:	683a      	ldr	r2, [r7, #0]
 8004372:	429a      	cmp	r2, r3
 8004374:	d001      	beq.n	800437a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e0f9      	b.n	800456e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d008      	beq.n	8004398 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004386:	4b7d      	ldr	r3, [pc, #500]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	497a      	ldr	r1, [pc, #488]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 8004394:	4313      	orrs	r3, r2
 8004396:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f003 0301 	and.w	r3, r3, #1
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	f000 808e 	beq.w	80044c2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d107      	bne.n	80043be <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80043ae:	4b73      	ldr	r3, [pc, #460]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d121      	bne.n	80043fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
 80043bc:	e0d7      	b.n	800456e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	2b03      	cmp	r3, #3
 80043c4:	d107      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80043c6:	4b6d      	ldr	r3, [pc, #436]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d115      	bne.n	80043fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e0cb      	b.n	800456e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d107      	bne.n	80043ee <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043de:	4b67      	ldr	r3, [pc, #412]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0302 	and.w	r3, r3, #2
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d109      	bne.n	80043fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	e0bf      	b.n	800456e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80043ee:	4b63      	ldr	r3, [pc, #396]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e0b7      	b.n	800456e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043fe:	4b5f      	ldr	r3, [pc, #380]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f023 0203 	bic.w	r2, r3, #3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	495c      	ldr	r1, [pc, #368]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 800440c:	4313      	orrs	r3, r2
 800440e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004410:	f7fe f9b0 	bl	8002774 <HAL_GetTick>
 8004414:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	2b02      	cmp	r3, #2
 800441c:	d112      	bne.n	8004444 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800441e:	e00a      	b.n	8004436 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004420:	f7fe f9a8 	bl	8002774 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	f241 3288 	movw	r2, #5000	; 0x1388
 800442e:	4293      	cmp	r3, r2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e09b      	b.n	800456e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004436:	4b51      	ldr	r3, [pc, #324]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 030c 	and.w	r3, r3, #12
 800443e:	2b08      	cmp	r3, #8
 8004440:	d1ee      	bne.n	8004420 <HAL_RCC_ClockConfig+0xfc>
 8004442:	e03e      	b.n	80044c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	2b03      	cmp	r3, #3
 800444a:	d112      	bne.n	8004472 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800444c:	e00a      	b.n	8004464 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800444e:	f7fe f991 	bl	8002774 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	f241 3288 	movw	r2, #5000	; 0x1388
 800445c:	4293      	cmp	r3, r2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e084      	b.n	800456e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004464:	4b45      	ldr	r3, [pc, #276]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f003 030c 	and.w	r3, r3, #12
 800446c:	2b0c      	cmp	r3, #12
 800446e:	d1ee      	bne.n	800444e <HAL_RCC_ClockConfig+0x12a>
 8004470:	e027      	b.n	80044c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d11d      	bne.n	80044b6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800447a:	e00a      	b.n	8004492 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800447c:	f7fe f97a 	bl	8002774 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	f241 3288 	movw	r2, #5000	; 0x1388
 800448a:	4293      	cmp	r3, r2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e06d      	b.n	800456e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004492:	4b3a      	ldr	r3, [pc, #232]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 030c 	and.w	r3, r3, #12
 800449a:	2b04      	cmp	r3, #4
 800449c:	d1ee      	bne.n	800447c <HAL_RCC_ClockConfig+0x158>
 800449e:	e010      	b.n	80044c2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044a0:	f7fe f968 	bl	8002774 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d901      	bls.n	80044b6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e05b      	b.n	800456e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80044b6:	4b31      	ldr	r3, [pc, #196]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 030c 	and.w	r3, r3, #12
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d1ee      	bne.n	80044a0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044c2:	4b2d      	ldr	r3, [pc, #180]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d219      	bcs.n	8004504 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d105      	bne.n	80044e2 <HAL_RCC_ClockConfig+0x1be>
 80044d6:	4b28      	ldr	r3, [pc, #160]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a27      	ldr	r2, [pc, #156]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 80044dc:	f043 0304 	orr.w	r3, r3, #4
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	4b25      	ldr	r3, [pc, #148]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f023 0201 	bic.w	r2, r3, #1
 80044ea:	4923      	ldr	r1, [pc, #140]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044f2:	4b21      	ldr	r3, [pc, #132]	; (8004578 <HAL_RCC_ClockConfig+0x254>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d001      	beq.n	8004504 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e034      	b.n	800456e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0304 	and.w	r3, r3, #4
 800450c:	2b00      	cmp	r3, #0
 800450e:	d008      	beq.n	8004522 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004510:	4b1a      	ldr	r3, [pc, #104]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	4917      	ldr	r1, [pc, #92]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 800451e:	4313      	orrs	r3, r2
 8004520:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d009      	beq.n	8004542 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800452e:	4b13      	ldr	r3, [pc, #76]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	691b      	ldr	r3, [r3, #16]
 800453a:	00db      	lsls	r3, r3, #3
 800453c:	490f      	ldr	r1, [pc, #60]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 800453e:	4313      	orrs	r3, r2
 8004540:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004542:	f000 f823 	bl	800458c <HAL_RCC_GetSysClockFreq>
 8004546:	4602      	mov	r2, r0
 8004548:	4b0c      	ldr	r3, [pc, #48]	; (800457c <HAL_RCC_ClockConfig+0x258>)
 800454a:	689b      	ldr	r3, [r3, #8]
 800454c:	091b      	lsrs	r3, r3, #4
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	490b      	ldr	r1, [pc, #44]	; (8004580 <HAL_RCC_ClockConfig+0x25c>)
 8004554:	5ccb      	ldrb	r3, [r1, r3]
 8004556:	fa22 f303 	lsr.w	r3, r2, r3
 800455a:	4a0a      	ldr	r2, [pc, #40]	; (8004584 <HAL_RCC_ClockConfig+0x260>)
 800455c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800455e:	4b0a      	ldr	r3, [pc, #40]	; (8004588 <HAL_RCC_ClockConfig+0x264>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4618      	mov	r0, r3
 8004564:	f7fe f8ba 	bl	80026dc <HAL_InitTick>
 8004568:	4603      	mov	r3, r0
 800456a:	72fb      	strb	r3, [r7, #11]

  return status;
 800456c:	7afb      	ldrb	r3, [r7, #11]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3710      	adds	r7, #16
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	40023c00 	.word	0x40023c00
 800457c:	40023800 	.word	0x40023800
 8004580:	080070ec 	.word	0x080070ec
 8004584:	20000014 	.word	0x20000014
 8004588:	20000018 	.word	0x20000018

0800458c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800458c:	b5b0      	push	{r4, r5, r7, lr}
 800458e:	b086      	sub	sp, #24
 8004590:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004592:	4b4d      	ldr	r3, [pc, #308]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f003 030c 	and.w	r3, r3, #12
 800459e:	2b0c      	cmp	r3, #12
 80045a0:	d00c      	beq.n	80045bc <HAL_RCC_GetSysClockFreq+0x30>
 80045a2:	2b0c      	cmp	r3, #12
 80045a4:	d87c      	bhi.n	80046a0 <HAL_RCC_GetSysClockFreq+0x114>
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d002      	beq.n	80045b0 <HAL_RCC_GetSysClockFreq+0x24>
 80045aa:	2b08      	cmp	r3, #8
 80045ac:	d003      	beq.n	80045b6 <HAL_RCC_GetSysClockFreq+0x2a>
 80045ae:	e077      	b.n	80046a0 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80045b0:	4b46      	ldr	r3, [pc, #280]	; (80046cc <HAL_RCC_GetSysClockFreq+0x140>)
 80045b2:	613b      	str	r3, [r7, #16]
      break;
 80045b4:	e082      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80045b6:	4b46      	ldr	r3, [pc, #280]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x144>)
 80045b8:	613b      	str	r3, [r7, #16]
      break;
 80045ba:	e07f      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	0c9b      	lsrs	r3, r3, #18
 80045c0:	f003 030f 	and.w	r3, r3, #15
 80045c4:	4a43      	ldr	r2, [pc, #268]	; (80046d4 <HAL_RCC_GetSysClockFreq+0x148>)
 80045c6:	5cd3      	ldrb	r3, [r2, r3]
 80045c8:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	0d9b      	lsrs	r3, r3, #22
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	3301      	adds	r3, #1
 80045d4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045d6:	4b3c      	ldr	r3, [pc, #240]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d01a      	beq.n	8004618 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	461a      	mov	r2, r3
 80045e6:	f04f 0300 	mov.w	r3, #0
 80045ea:	4939      	ldr	r1, [pc, #228]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x144>)
 80045ec:	fb01 f003 	mul.w	r0, r1, r3
 80045f0:	2100      	movs	r1, #0
 80045f2:	fb01 f102 	mul.w	r1, r1, r2
 80045f6:	1844      	adds	r4, r0, r1
 80045f8:	4935      	ldr	r1, [pc, #212]	; (80046d0 <HAL_RCC_GetSysClockFreq+0x144>)
 80045fa:	fba2 0101 	umull	r0, r1, r2, r1
 80045fe:	1863      	adds	r3, r4, r1
 8004600:	4619      	mov	r1, r3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	461a      	mov	r2, r3
 8004606:	f04f 0300 	mov.w	r3, #0
 800460a:	f7fc fab5 	bl	8000b78 <__aeabi_uldivmod>
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	4613      	mov	r3, r2
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	e040      	b.n	800469a <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	461c      	mov	r4, r3
 800461c:	f04f 0500 	mov.w	r5, #0
 8004620:	4620      	mov	r0, r4
 8004622:	4629      	mov	r1, r5
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	014b      	lsls	r3, r1, #5
 800462e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004632:	0142      	lsls	r2, r0, #5
 8004634:	4610      	mov	r0, r2
 8004636:	4619      	mov	r1, r3
 8004638:	1b00      	subs	r0, r0, r4
 800463a:	eb61 0105 	sbc.w	r1, r1, r5
 800463e:	f04f 0200 	mov.w	r2, #0
 8004642:	f04f 0300 	mov.w	r3, #0
 8004646:	018b      	lsls	r3, r1, #6
 8004648:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800464c:	0182      	lsls	r2, r0, #6
 800464e:	1a12      	subs	r2, r2, r0
 8004650:	eb63 0301 	sbc.w	r3, r3, r1
 8004654:	f04f 0000 	mov.w	r0, #0
 8004658:	f04f 0100 	mov.w	r1, #0
 800465c:	00d9      	lsls	r1, r3, #3
 800465e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004662:	00d0      	lsls	r0, r2, #3
 8004664:	4602      	mov	r2, r0
 8004666:	460b      	mov	r3, r1
 8004668:	1912      	adds	r2, r2, r4
 800466a:	eb45 0303 	adc.w	r3, r5, r3
 800466e:	f04f 0000 	mov.w	r0, #0
 8004672:	f04f 0100 	mov.w	r1, #0
 8004676:	0299      	lsls	r1, r3, #10
 8004678:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800467c:	0290      	lsls	r0, r2, #10
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4610      	mov	r0, r2
 8004684:	4619      	mov	r1, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	461a      	mov	r2, r3
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	f7fc fa73 	bl	8000b78 <__aeabi_uldivmod>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4613      	mov	r3, r2
 8004698:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	613b      	str	r3, [r7, #16]
      break;
 800469e:	e00d      	b.n	80046bc <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80046a0:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <HAL_RCC_GetSysClockFreq+0x13c>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	0b5b      	lsrs	r3, r3, #13
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	3301      	adds	r3, #1
 80046b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	613b      	str	r3, [r7, #16]
      break;
 80046ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046bc:	693b      	ldr	r3, [r7, #16]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bdb0      	pop	{r4, r5, r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40023800 	.word	0x40023800
 80046cc:	00f42400 	.word	0x00f42400
 80046d0:	016e3600 	.word	0x016e3600
 80046d4:	080070e0 	.word	0x080070e0

080046d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d8:	b480      	push	{r7}
 80046da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046dc:	4b02      	ldr	r3, [pc, #8]	; (80046e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80046de:	681b      	ldr	r3, [r3, #0]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bc80      	pop	{r7}
 80046e6:	4770      	bx	lr
 80046e8:	20000014 	.word	0x20000014

080046ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046f0:	f7ff fff2 	bl	80046d8 <HAL_RCC_GetHCLKFreq>
 80046f4:	4602      	mov	r2, r0
 80046f6:	4b05      	ldr	r3, [pc, #20]	; (800470c <HAL_RCC_GetPCLK1Freq+0x20>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	0a1b      	lsrs	r3, r3, #8
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	4903      	ldr	r1, [pc, #12]	; (8004710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004702:	5ccb      	ldrb	r3, [r1, r3]
 8004704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004708:	4618      	mov	r0, r3
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40023800 	.word	0x40023800
 8004710:	080070fc 	.word	0x080070fc

08004714 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004718:	f7ff ffde 	bl	80046d8 <HAL_RCC_GetHCLKFreq>
 800471c:	4602      	mov	r2, r0
 800471e:	4b05      	ldr	r3, [pc, #20]	; (8004734 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	0adb      	lsrs	r3, r3, #11
 8004724:	f003 0307 	and.w	r3, r3, #7
 8004728:	4903      	ldr	r1, [pc, #12]	; (8004738 <HAL_RCC_GetPCLK2Freq+0x24>)
 800472a:	5ccb      	ldrb	r3, [r1, r3]
 800472c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004730:	4618      	mov	r0, r3
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40023800 	.word	0x40023800
 8004738:	080070fc 	.word	0x080070fc

0800473c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004744:	2300      	movs	r3, #0
 8004746:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004748:	4b29      	ldr	r3, [pc, #164]	; (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d12c      	bne.n	80047ae <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004754:	4b26      	ldr	r3, [pc, #152]	; (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d005      	beq.n	800476c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004760:	4b24      	ldr	r3, [pc, #144]	; (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	e016      	b.n	800479a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800476c:	4b20      	ldr	r3, [pc, #128]	; (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800476e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004770:	4a1f      	ldr	r2, [pc, #124]	; (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004776:	6253      	str	r3, [r2, #36]	; 0x24
 8004778:	4b1d      	ldr	r3, [pc, #116]	; (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004784:	4b1b      	ldr	r3, [pc, #108]	; (80047f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800478c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800478e:	4b18      	ldr	r3, [pc, #96]	; (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004792:	4a17      	ldr	r2, [pc, #92]	; (80047f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004798:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80047a0:	d105      	bne.n	80047ae <RCC_SetFlashLatencyFromMSIRange+0x72>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80047a8:	d101      	bne.n	80047ae <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80047aa:	2301      	movs	r3, #1
 80047ac:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	d105      	bne.n	80047c0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80047b4:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a0f      	ldr	r2, [pc, #60]	; (80047f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ba:	f043 0304 	orr.w	r3, r3, #4
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	4b0d      	ldr	r3, [pc, #52]	; (80047f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f023 0201 	bic.w	r2, r3, #1
 80047c8:	490b      	ldr	r1, [pc, #44]	; (80047f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047d0:	4b09      	ldr	r3, [pc, #36]	; (80047f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d001      	beq.n	80047e2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80047e2:	2300      	movs	r3, #0
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	371c      	adds	r7, #28
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bc80      	pop	{r7}
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40023800 	.word	0x40023800
 80047f4:	40007000 	.word	0x40007000
 80047f8:	40023c00 	.word	0x40023c00

080047fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d101      	bne.n	800480e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e031      	b.n	8004872 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b00      	cmp	r3, #0
 8004818:	d106      	bne.n	8004828 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fd fe32 	bl	800248c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	3304      	adds	r3, #4
 8004838:	4619      	mov	r1, r3
 800483a:	4610      	mov	r0, r2
 800483c:	f000 fa5a 	bl	8004cf4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
	...

0800487c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800487c:	b480      	push	{r7}
 800487e:	b085      	sub	sp, #20
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b01      	cmp	r3, #1
 800488e:	d001      	beq.n	8004894 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e03a      	b.n	800490a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2202      	movs	r2, #2
 8004898:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f042 0201 	orr.w	r2, r2, #1
 80048aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048b4:	d00e      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x58>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a16      	ldr	r2, [pc, #88]	; (8004914 <HAL_TIM_Base_Start_IT+0x98>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d009      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x58>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a14      	ldr	r2, [pc, #80]	; (8004918 <HAL_TIM_Base_Start_IT+0x9c>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d004      	beq.n	80048d4 <HAL_TIM_Base_Start_IT+0x58>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a13      	ldr	r2, [pc, #76]	; (800491c <HAL_TIM_Base_Start_IT+0xa0>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d111      	bne.n	80048f8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	f003 0307 	and.w	r3, r3, #7
 80048de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b06      	cmp	r3, #6
 80048e4:	d010      	beq.n	8004908 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f042 0201 	orr.w	r2, r2, #1
 80048f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048f6:	e007      	b.n	8004908 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3714      	adds	r7, #20
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr
 8004914:	40000400 	.word	0x40000400
 8004918:	40000800 	.word	0x40000800
 800491c:	40010800 	.word	0x40010800

08004920 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	68da      	ldr	r2, [r3, #12]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 0201 	bic.w	r2, r2, #1
 8004936:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6a1a      	ldr	r2, [r3, #32]
 800493e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004942:	4013      	ands	r3, r2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d107      	bne.n	8004958 <HAL_TIM_Base_Stop_IT+0x38>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 0201 	bic.w	r2, r2, #1
 8004956:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Return function status */
  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr

0800496c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f003 0302 	and.w	r3, r3, #2
 800497e:	2b02      	cmp	r3, #2
 8004980:	d122      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b02      	cmp	r3, #2
 800498e:	d11b      	bne.n	80049c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0202 	mvn.w	r2, #2
 8004998:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 f985 	bl	8004cbe <HAL_TIM_IC_CaptureCallback>
 80049b4:	e005      	b.n	80049c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f978 	bl	8004cac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f987 	bl	8004cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0304 	and.w	r3, r3, #4
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d122      	bne.n	8004a1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b04      	cmp	r3, #4
 80049e2:	d11b      	bne.n	8004a1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0204 	mvn.w	r2, #4
 80049ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2202      	movs	r2, #2
 80049f2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	699b      	ldr	r3, [r3, #24]
 80049fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f95b 	bl	8004cbe <HAL_TIM_IC_CaptureCallback>
 8004a08:	e005      	b.n	8004a16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 f94e 	bl	8004cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 f95d 	bl	8004cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f003 0308 	and.w	r3, r3, #8
 8004a26:	2b08      	cmp	r3, #8
 8004a28:	d122      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0308 	and.w	r3, r3, #8
 8004a34:	2b08      	cmp	r3, #8
 8004a36:	d11b      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0208 	mvn.w	r2, #8
 8004a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2204      	movs	r2, #4
 8004a46:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f931 	bl	8004cbe <HAL_TIM_IC_CaptureCallback>
 8004a5c:	e005      	b.n	8004a6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f924 	bl	8004cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 f933 	bl	8004cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f003 0310 	and.w	r3, r3, #16
 8004a7a:	2b10      	cmp	r3, #16
 8004a7c:	d122      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d11b      	bne.n	8004ac4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0210 	mvn.w	r2, #16
 8004a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2208      	movs	r2, #8
 8004a9a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	69db      	ldr	r3, [r3, #28]
 8004aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f907 	bl	8004cbe <HAL_TIM_IC_CaptureCallback>
 8004ab0:	e005      	b.n	8004abe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f8fa 	bl	8004cac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f909 	bl	8004cd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	691b      	ldr	r3, [r3, #16]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b01      	cmp	r3, #1
 8004ad0:	d10e      	bne.n	8004af0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68db      	ldr	r3, [r3, #12]
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d107      	bne.n	8004af0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f06f 0201 	mvn.w	r2, #1
 8004ae8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7fc ffa8 	bl	8001a40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004afa:	2b40      	cmp	r3, #64	; 0x40
 8004afc:	d10e      	bne.n	8004b1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b08:	2b40      	cmp	r3, #64	; 0x40
 8004b0a:	d107      	bne.n	8004b1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f8e3 	bl	8004ce2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b1c:	bf00      	nop
 8004b1e:	3708      	adds	r7, #8
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}

08004b24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b084      	sub	sp, #16
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
 8004b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <HAL_TIM_ConfigClockSource+0x18>
 8004b38:	2302      	movs	r3, #2
 8004b3a:	e0b3      	b.n	8004ca4 <HAL_TIM_ConfigClockSource+0x180>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b74:	d03e      	beq.n	8004bf4 <HAL_TIM_ConfigClockSource+0xd0>
 8004b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b7a:	f200 8087 	bhi.w	8004c8c <HAL_TIM_ConfigClockSource+0x168>
 8004b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b82:	f000 8085 	beq.w	8004c90 <HAL_TIM_ConfigClockSource+0x16c>
 8004b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8a:	d87f      	bhi.n	8004c8c <HAL_TIM_ConfigClockSource+0x168>
 8004b8c:	2b70      	cmp	r3, #112	; 0x70
 8004b8e:	d01a      	beq.n	8004bc6 <HAL_TIM_ConfigClockSource+0xa2>
 8004b90:	2b70      	cmp	r3, #112	; 0x70
 8004b92:	d87b      	bhi.n	8004c8c <HAL_TIM_ConfigClockSource+0x168>
 8004b94:	2b60      	cmp	r3, #96	; 0x60
 8004b96:	d050      	beq.n	8004c3a <HAL_TIM_ConfigClockSource+0x116>
 8004b98:	2b60      	cmp	r3, #96	; 0x60
 8004b9a:	d877      	bhi.n	8004c8c <HAL_TIM_ConfigClockSource+0x168>
 8004b9c:	2b50      	cmp	r3, #80	; 0x50
 8004b9e:	d03c      	beq.n	8004c1a <HAL_TIM_ConfigClockSource+0xf6>
 8004ba0:	2b50      	cmp	r3, #80	; 0x50
 8004ba2:	d873      	bhi.n	8004c8c <HAL_TIM_ConfigClockSource+0x168>
 8004ba4:	2b40      	cmp	r3, #64	; 0x40
 8004ba6:	d058      	beq.n	8004c5a <HAL_TIM_ConfigClockSource+0x136>
 8004ba8:	2b40      	cmp	r3, #64	; 0x40
 8004baa:	d86f      	bhi.n	8004c8c <HAL_TIM_ConfigClockSource+0x168>
 8004bac:	2b30      	cmp	r3, #48	; 0x30
 8004bae:	d064      	beq.n	8004c7a <HAL_TIM_ConfigClockSource+0x156>
 8004bb0:	2b30      	cmp	r3, #48	; 0x30
 8004bb2:	d86b      	bhi.n	8004c8c <HAL_TIM_ConfigClockSource+0x168>
 8004bb4:	2b20      	cmp	r3, #32
 8004bb6:	d060      	beq.n	8004c7a <HAL_TIM_ConfigClockSource+0x156>
 8004bb8:	2b20      	cmp	r3, #32
 8004bba:	d867      	bhi.n	8004c8c <HAL_TIM_ConfigClockSource+0x168>
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d05c      	beq.n	8004c7a <HAL_TIM_ConfigClockSource+0x156>
 8004bc0:	2b10      	cmp	r3, #16
 8004bc2:	d05a      	beq.n	8004c7a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004bc4:	e062      	b.n	8004c8c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6818      	ldr	r0, [r3, #0]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	6899      	ldr	r1, [r3, #8]
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f000 f974 	bl	8004ec2 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004be8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68fa      	ldr	r2, [r7, #12]
 8004bf0:	609a      	str	r2, [r3, #8]
      break;
 8004bf2:	e04e      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6818      	ldr	r0, [r3, #0]
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	6899      	ldr	r1, [r3, #8]
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	f000 f95d 	bl	8004ec2 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c16:	609a      	str	r2, [r3, #8]
      break;
 8004c18:	e03b      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6818      	ldr	r0, [r3, #0]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	6859      	ldr	r1, [r3, #4]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	461a      	mov	r2, r3
 8004c28:	f000 f8d4 	bl	8004dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	2150      	movs	r1, #80	; 0x50
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 f92b 	bl	8004e8e <TIM_ITRx_SetConfig>
      break;
 8004c38:	e02b      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6818      	ldr	r0, [r3, #0]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	6859      	ldr	r1, [r3, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	461a      	mov	r2, r3
 8004c48:	f000 f8f2 	bl	8004e30 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	2160      	movs	r1, #96	; 0x60
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 f91b 	bl	8004e8e <TIM_ITRx_SetConfig>
      break;
 8004c58:	e01b      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6818      	ldr	r0, [r3, #0]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	6859      	ldr	r1, [r3, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	461a      	mov	r2, r3
 8004c68:	f000 f8b4 	bl	8004dd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2140      	movs	r1, #64	; 0x40
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 f90b 	bl	8004e8e <TIM_ITRx_SetConfig>
      break;
 8004c78:	e00b      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4619      	mov	r1, r3
 8004c84:	4610      	mov	r0, r2
 8004c86:	f000 f902 	bl	8004e8e <TIM_ITRx_SetConfig>
        break;
 8004c8a:	e002      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004c8c:	bf00      	nop
 8004c8e:	e000      	b.n	8004c92 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004c90:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004ca2:	2300      	movs	r3, #0
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bc80      	pop	{r7}
 8004cbc:	4770      	bx	lr

08004cbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cbe:	b480      	push	{r7}
 8004cc0:	b083      	sub	sp, #12
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cc6:	bf00      	nop
 8004cc8:	370c      	adds	r7, #12
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bc80      	pop	{r7}
 8004cce:	4770      	bx	lr

08004cd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cd8:	bf00      	nop
 8004cda:	370c      	adds	r7, #12
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bc80      	pop	{r7}
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr

08004cf4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d0a:	d00f      	beq.n	8004d2c <TIM_Base_SetConfig+0x38>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	4a2b      	ldr	r2, [pc, #172]	; (8004dbc <TIM_Base_SetConfig+0xc8>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d00b      	beq.n	8004d2c <TIM_Base_SetConfig+0x38>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a2a      	ldr	r2, [pc, #168]	; (8004dc0 <TIM_Base_SetConfig+0xcc>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d007      	beq.n	8004d2c <TIM_Base_SetConfig+0x38>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a29      	ldr	r2, [pc, #164]	; (8004dc4 <TIM_Base_SetConfig+0xd0>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d003      	beq.n	8004d2c <TIM_Base_SetConfig+0x38>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a28      	ldr	r2, [pc, #160]	; (8004dc8 <TIM_Base_SetConfig+0xd4>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d108      	bne.n	8004d3e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d44:	d017      	beq.n	8004d76 <TIM_Base_SetConfig+0x82>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a1c      	ldr	r2, [pc, #112]	; (8004dbc <TIM_Base_SetConfig+0xc8>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d013      	beq.n	8004d76 <TIM_Base_SetConfig+0x82>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a1b      	ldr	r2, [pc, #108]	; (8004dc0 <TIM_Base_SetConfig+0xcc>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d00f      	beq.n	8004d76 <TIM_Base_SetConfig+0x82>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a1a      	ldr	r2, [pc, #104]	; (8004dc4 <TIM_Base_SetConfig+0xd0>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d00b      	beq.n	8004d76 <TIM_Base_SetConfig+0x82>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a19      	ldr	r2, [pc, #100]	; (8004dc8 <TIM_Base_SetConfig+0xd4>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d007      	beq.n	8004d76 <TIM_Base_SetConfig+0x82>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a18      	ldr	r2, [pc, #96]	; (8004dcc <TIM_Base_SetConfig+0xd8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d003      	beq.n	8004d76 <TIM_Base_SetConfig+0x82>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	4a17      	ldr	r2, [pc, #92]	; (8004dd0 <TIM_Base_SetConfig+0xdc>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d108      	bne.n	8004d88 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68fa      	ldr	r2, [r7, #12]
 8004d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	689a      	ldr	r2, [r3, #8]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	615a      	str	r2, [r3, #20]
}
 8004db2:	bf00      	nop
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	bc80      	pop	{r7}
 8004dba:	4770      	bx	lr
 8004dbc:	40000400 	.word	0x40000400
 8004dc0:	40000800 	.word	0x40000800
 8004dc4:	40000c00 	.word	0x40000c00
 8004dc8:	40010800 	.word	0x40010800
 8004dcc:	40010c00 	.word	0x40010c00
 8004dd0:	40011000 	.word	0x40011000

08004dd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b087      	sub	sp, #28
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	60f8      	str	r0, [r7, #12]
 8004ddc:	60b9      	str	r1, [r7, #8]
 8004dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6a1b      	ldr	r3, [r3, #32]
 8004de4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a1b      	ldr	r3, [r3, #32]
 8004dea:	f023 0201 	bic.w	r2, r3, #1
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	699b      	ldr	r3, [r3, #24]
 8004df6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	011b      	lsls	r3, r3, #4
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f023 030a 	bic.w	r3, r3, #10
 8004e10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	693a      	ldr	r2, [r7, #16]
 8004e1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	697a      	ldr	r2, [r7, #20]
 8004e24:	621a      	str	r2, [r3, #32]
}
 8004e26:	bf00      	nop
 8004e28:	371c      	adds	r7, #28
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bc80      	pop	{r7}
 8004e2e:	4770      	bx	lr

08004e30 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	60f8      	str	r0, [r7, #12]
 8004e38:	60b9      	str	r1, [r7, #8]
 8004e3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	6a1b      	ldr	r3, [r3, #32]
 8004e40:	f023 0210 	bic.w	r2, r3, #16
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	031b      	lsls	r3, r3, #12
 8004e60:	697a      	ldr	r2, [r7, #20]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e6c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	697a      	ldr	r2, [r7, #20]
 8004e7c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	621a      	str	r2, [r3, #32]
}
 8004e84:	bf00      	nop
 8004e86:	371c      	adds	r7, #28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr

08004e8e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e8e:	b480      	push	{r7}
 8004e90:	b085      	sub	sp, #20
 8004e92:	af00      	add	r7, sp, #0
 8004e94:	6078      	str	r0, [r7, #4]
 8004e96:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ea6:	683a      	ldr	r2, [r7, #0]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f043 0307 	orr.w	r3, r3, #7
 8004eb0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	609a      	str	r2, [r3, #8]
}
 8004eb8:	bf00      	nop
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bc80      	pop	{r7}
 8004ec0:	4770      	bx	lr

08004ec2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b087      	sub	sp, #28
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
 8004ece:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004edc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	021a      	lsls	r2, r3, #8
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	697a      	ldr	r2, [r7, #20]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	697a      	ldr	r2, [r7, #20]
 8004ef4:	609a      	str	r2, [r3, #8]
}
 8004ef6:	bf00      	nop
 8004ef8:	371c      	adds	r7, #28
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr

08004f00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d101      	bne.n	8004f18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f14:	2302      	movs	r3, #2
 8004f16:	e046      	b.n	8004fa6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68fa      	ldr	r2, [r7, #12]
 8004f50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5a:	d00e      	beq.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a13      	ldr	r2, [pc, #76]	; (8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d009      	beq.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a12      	ldr	r2, [pc, #72]	; (8004fb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d004      	beq.n	8004f7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a10      	ldr	r2, [pc, #64]	; (8004fb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d10c      	bne.n	8004f94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	68ba      	ldr	r2, [r7, #8]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68ba      	ldr	r2, [r7, #8]
 8004f92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr
 8004fb0:	40000400 	.word	0x40000400
 8004fb4:	40000800 	.word	0x40000800
 8004fb8:	40010800 	.word	0x40010800

08004fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e03f      	b.n	800504e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d106      	bne.n	8004fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f7fd fa76 	bl	80024d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2224      	movs	r2, #36	; 0x24
 8004fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 f829 	bl	8005058 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	691a      	ldr	r2, [r3, #16]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	695a      	ldr	r2, [r3, #20]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2200      	movs	r2, #0
 800503a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2220      	movs	r2, #32
 8005040:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2220      	movs	r2, #32
 8005048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	689a      	ldr	r2, [r3, #8]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	431a      	orrs	r2, r3
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	69db      	ldr	r3, [r3, #28]
 800508a:	4313      	orrs	r3, r2
 800508c:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005098:	f023 030c 	bic.w	r3, r3, #12
 800509c:	687a      	ldr	r2, [r7, #4]
 800509e:	6812      	ldr	r2, [r2, #0]
 80050a0:	68b9      	ldr	r1, [r7, #8]
 80050a2:	430b      	orrs	r3, r1
 80050a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699a      	ldr	r2, [r3, #24]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a55      	ldr	r2, [pc, #340]	; (8005218 <UART_SetConfig+0x1c0>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d103      	bne.n	80050ce <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80050c6:	f7ff fb25 	bl	8004714 <HAL_RCC_GetPCLK2Freq>
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	e002      	b.n	80050d4 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80050ce:	f7ff fb0d 	bl	80046ec <HAL_RCC_GetPCLK1Freq>
 80050d2:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050dc:	d14c      	bne.n	8005178 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	4613      	mov	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	4413      	add	r3, r2
 80050e6:	009a      	lsls	r2, r3, #2
 80050e8:	441a      	add	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	005b      	lsls	r3, r3, #1
 80050f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f4:	4a49      	ldr	r2, [pc, #292]	; (800521c <UART_SetConfig+0x1c4>)
 80050f6:	fba2 2303 	umull	r2, r3, r2, r3
 80050fa:	095b      	lsrs	r3, r3, #5
 80050fc:	0119      	lsls	r1, r3, #4
 80050fe:	68fa      	ldr	r2, [r7, #12]
 8005100:	4613      	mov	r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	4413      	add	r3, r2
 8005106:	009a      	lsls	r2, r3, #2
 8005108:	441a      	add	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	005b      	lsls	r3, r3, #1
 8005110:	fbb2 f2f3 	udiv	r2, r2, r3
 8005114:	4b41      	ldr	r3, [pc, #260]	; (800521c <UART_SetConfig+0x1c4>)
 8005116:	fba3 0302 	umull	r0, r3, r3, r2
 800511a:	095b      	lsrs	r3, r3, #5
 800511c:	2064      	movs	r0, #100	; 0x64
 800511e:	fb00 f303 	mul.w	r3, r0, r3
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	00db      	lsls	r3, r3, #3
 8005126:	3332      	adds	r3, #50	; 0x32
 8005128:	4a3c      	ldr	r2, [pc, #240]	; (800521c <UART_SetConfig+0x1c4>)
 800512a:	fba2 2303 	umull	r2, r3, r2, r3
 800512e:	095b      	lsrs	r3, r3, #5
 8005130:	005b      	lsls	r3, r3, #1
 8005132:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005136:	4419      	add	r1, r3
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4613      	mov	r3, r2
 800513c:	009b      	lsls	r3, r3, #2
 800513e:	4413      	add	r3, r2
 8005140:	009a      	lsls	r2, r3, #2
 8005142:	441a      	add	r2, r3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	fbb2 f2f3 	udiv	r2, r2, r3
 800514e:	4b33      	ldr	r3, [pc, #204]	; (800521c <UART_SetConfig+0x1c4>)
 8005150:	fba3 0302 	umull	r0, r3, r3, r2
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	2064      	movs	r0, #100	; 0x64
 8005158:	fb00 f303 	mul.w	r3, r0, r3
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	00db      	lsls	r3, r3, #3
 8005160:	3332      	adds	r3, #50	; 0x32
 8005162:	4a2e      	ldr	r2, [pc, #184]	; (800521c <UART_SetConfig+0x1c4>)
 8005164:	fba2 2303 	umull	r2, r3, r2, r3
 8005168:	095b      	lsrs	r3, r3, #5
 800516a:	f003 0207 	and.w	r2, r3, #7
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	440a      	add	r2, r1
 8005174:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005176:	e04a      	b.n	800520e <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4613      	mov	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	009a      	lsls	r2, r3, #2
 8005182:	441a      	add	r2, r3
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	fbb2 f3f3 	udiv	r3, r2, r3
 800518e:	4a23      	ldr	r2, [pc, #140]	; (800521c <UART_SetConfig+0x1c4>)
 8005190:	fba2 2303 	umull	r2, r3, r2, r3
 8005194:	095b      	lsrs	r3, r3, #5
 8005196:	0119      	lsls	r1, r3, #4
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4613      	mov	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	009a      	lsls	r2, r3, #2
 80051a2:	441a      	add	r2, r3
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80051ae:	4b1b      	ldr	r3, [pc, #108]	; (800521c <UART_SetConfig+0x1c4>)
 80051b0:	fba3 0302 	umull	r0, r3, r3, r2
 80051b4:	095b      	lsrs	r3, r3, #5
 80051b6:	2064      	movs	r0, #100	; 0x64
 80051b8:	fb00 f303 	mul.w	r3, r0, r3
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	011b      	lsls	r3, r3, #4
 80051c0:	3332      	adds	r3, #50	; 0x32
 80051c2:	4a16      	ldr	r2, [pc, #88]	; (800521c <UART_SetConfig+0x1c4>)
 80051c4:	fba2 2303 	umull	r2, r3, r2, r3
 80051c8:	095b      	lsrs	r3, r3, #5
 80051ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051ce:	4419      	add	r1, r3
 80051d0:	68fa      	ldr	r2, [r7, #12]
 80051d2:	4613      	mov	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4413      	add	r3, r2
 80051d8:	009a      	lsls	r2, r3, #2
 80051da:	441a      	add	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	009b      	lsls	r3, r3, #2
 80051e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80051e6:	4b0d      	ldr	r3, [pc, #52]	; (800521c <UART_SetConfig+0x1c4>)
 80051e8:	fba3 0302 	umull	r0, r3, r3, r2
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	2064      	movs	r0, #100	; 0x64
 80051f0:	fb00 f303 	mul.w	r3, r0, r3
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	3332      	adds	r3, #50	; 0x32
 80051fa:	4a08      	ldr	r2, [pc, #32]	; (800521c <UART_SetConfig+0x1c4>)
 80051fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005200:	095b      	lsrs	r3, r3, #5
 8005202:	f003 020f 	and.w	r2, r3, #15
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	440a      	add	r2, r1
 800520c:	609a      	str	r2, [r3, #8]
}
 800520e:	bf00      	nop
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	40013800 	.word	0x40013800
 800521c:	51eb851f 	.word	0x51eb851f

08005220 <__errno>:
 8005220:	4b01      	ldr	r3, [pc, #4]	; (8005228 <__errno+0x8>)
 8005222:	6818      	ldr	r0, [r3, #0]
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	20000020 	.word	0x20000020

0800522c <__libc_init_array>:
 800522c:	b570      	push	{r4, r5, r6, lr}
 800522e:	2600      	movs	r6, #0
 8005230:	4d0c      	ldr	r5, [pc, #48]	; (8005264 <__libc_init_array+0x38>)
 8005232:	4c0d      	ldr	r4, [pc, #52]	; (8005268 <__libc_init_array+0x3c>)
 8005234:	1b64      	subs	r4, r4, r5
 8005236:	10a4      	asrs	r4, r4, #2
 8005238:	42a6      	cmp	r6, r4
 800523a:	d109      	bne.n	8005250 <__libc_init_array+0x24>
 800523c:	f000 fc5c 	bl	8005af8 <_init>
 8005240:	2600      	movs	r6, #0
 8005242:	4d0a      	ldr	r5, [pc, #40]	; (800526c <__libc_init_array+0x40>)
 8005244:	4c0a      	ldr	r4, [pc, #40]	; (8005270 <__libc_init_array+0x44>)
 8005246:	1b64      	subs	r4, r4, r5
 8005248:	10a4      	asrs	r4, r4, #2
 800524a:	42a6      	cmp	r6, r4
 800524c:	d105      	bne.n	800525a <__libc_init_array+0x2e>
 800524e:	bd70      	pop	{r4, r5, r6, pc}
 8005250:	f855 3b04 	ldr.w	r3, [r5], #4
 8005254:	4798      	blx	r3
 8005256:	3601      	adds	r6, #1
 8005258:	e7ee      	b.n	8005238 <__libc_init_array+0xc>
 800525a:	f855 3b04 	ldr.w	r3, [r5], #4
 800525e:	4798      	blx	r3
 8005260:	3601      	adds	r6, #1
 8005262:	e7f2      	b.n	800524a <__libc_init_array+0x1e>
 8005264:	08007140 	.word	0x08007140
 8005268:	08007140 	.word	0x08007140
 800526c:	08007140 	.word	0x08007140
 8005270:	08007144 	.word	0x08007144

08005274 <memcpy>:
 8005274:	440a      	add	r2, r1
 8005276:	4291      	cmp	r1, r2
 8005278:	f100 33ff 	add.w	r3, r0, #4294967295
 800527c:	d100      	bne.n	8005280 <memcpy+0xc>
 800527e:	4770      	bx	lr
 8005280:	b510      	push	{r4, lr}
 8005282:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005286:	4291      	cmp	r1, r2
 8005288:	f803 4f01 	strb.w	r4, [r3, #1]!
 800528c:	d1f9      	bne.n	8005282 <memcpy+0xe>
 800528e:	bd10      	pop	{r4, pc}

08005290 <memmove>:
 8005290:	4288      	cmp	r0, r1
 8005292:	b510      	push	{r4, lr}
 8005294:	eb01 0402 	add.w	r4, r1, r2
 8005298:	d902      	bls.n	80052a0 <memmove+0x10>
 800529a:	4284      	cmp	r4, r0
 800529c:	4623      	mov	r3, r4
 800529e:	d807      	bhi.n	80052b0 <memmove+0x20>
 80052a0:	1e43      	subs	r3, r0, #1
 80052a2:	42a1      	cmp	r1, r4
 80052a4:	d008      	beq.n	80052b8 <memmove+0x28>
 80052a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80052ae:	e7f8      	b.n	80052a2 <memmove+0x12>
 80052b0:	4601      	mov	r1, r0
 80052b2:	4402      	add	r2, r0
 80052b4:	428a      	cmp	r2, r1
 80052b6:	d100      	bne.n	80052ba <memmove+0x2a>
 80052b8:	bd10      	pop	{r4, pc}
 80052ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80052c2:	e7f7      	b.n	80052b4 <memmove+0x24>

080052c4 <memset>:
 80052c4:	4603      	mov	r3, r0
 80052c6:	4402      	add	r2, r0
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d100      	bne.n	80052ce <memset+0xa>
 80052cc:	4770      	bx	lr
 80052ce:	f803 1b01 	strb.w	r1, [r3], #1
 80052d2:	e7f9      	b.n	80052c8 <memset+0x4>

080052d4 <siprintf>:
 80052d4:	b40e      	push	{r1, r2, r3}
 80052d6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80052da:	b500      	push	{lr}
 80052dc:	b09c      	sub	sp, #112	; 0x70
 80052de:	ab1d      	add	r3, sp, #116	; 0x74
 80052e0:	9002      	str	r0, [sp, #8]
 80052e2:	9006      	str	r0, [sp, #24]
 80052e4:	9107      	str	r1, [sp, #28]
 80052e6:	9104      	str	r1, [sp, #16]
 80052e8:	4808      	ldr	r0, [pc, #32]	; (800530c <siprintf+0x38>)
 80052ea:	4909      	ldr	r1, [pc, #36]	; (8005310 <siprintf+0x3c>)
 80052ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80052f0:	9105      	str	r1, [sp, #20]
 80052f2:	6800      	ldr	r0, [r0, #0]
 80052f4:	a902      	add	r1, sp, #8
 80052f6:	9301      	str	r3, [sp, #4]
 80052f8:	f000 f868 	bl	80053cc <_svfiprintf_r>
 80052fc:	2200      	movs	r2, #0
 80052fe:	9b02      	ldr	r3, [sp, #8]
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	b01c      	add	sp, #112	; 0x70
 8005304:	f85d eb04 	ldr.w	lr, [sp], #4
 8005308:	b003      	add	sp, #12
 800530a:	4770      	bx	lr
 800530c:	20000020 	.word	0x20000020
 8005310:	ffff0208 	.word	0xffff0208

08005314 <__ssputs_r>:
 8005314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005318:	688e      	ldr	r6, [r1, #8]
 800531a:	4682      	mov	sl, r0
 800531c:	429e      	cmp	r6, r3
 800531e:	460c      	mov	r4, r1
 8005320:	4690      	mov	r8, r2
 8005322:	461f      	mov	r7, r3
 8005324:	d838      	bhi.n	8005398 <__ssputs_r+0x84>
 8005326:	898a      	ldrh	r2, [r1, #12]
 8005328:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800532c:	d032      	beq.n	8005394 <__ssputs_r+0x80>
 800532e:	6825      	ldr	r5, [r4, #0]
 8005330:	6909      	ldr	r1, [r1, #16]
 8005332:	3301      	adds	r3, #1
 8005334:	eba5 0901 	sub.w	r9, r5, r1
 8005338:	6965      	ldr	r5, [r4, #20]
 800533a:	444b      	add	r3, r9
 800533c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005340:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005344:	106d      	asrs	r5, r5, #1
 8005346:	429d      	cmp	r5, r3
 8005348:	bf38      	it	cc
 800534a:	461d      	movcc	r5, r3
 800534c:	0553      	lsls	r3, r2, #21
 800534e:	d531      	bpl.n	80053b4 <__ssputs_r+0xa0>
 8005350:	4629      	mov	r1, r5
 8005352:	f000 fb2b 	bl	80059ac <_malloc_r>
 8005356:	4606      	mov	r6, r0
 8005358:	b950      	cbnz	r0, 8005370 <__ssputs_r+0x5c>
 800535a:	230c      	movs	r3, #12
 800535c:	f04f 30ff 	mov.w	r0, #4294967295
 8005360:	f8ca 3000 	str.w	r3, [sl]
 8005364:	89a3      	ldrh	r3, [r4, #12]
 8005366:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800536a:	81a3      	strh	r3, [r4, #12]
 800536c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005370:	464a      	mov	r2, r9
 8005372:	6921      	ldr	r1, [r4, #16]
 8005374:	f7ff ff7e 	bl	8005274 <memcpy>
 8005378:	89a3      	ldrh	r3, [r4, #12]
 800537a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800537e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005382:	81a3      	strh	r3, [r4, #12]
 8005384:	6126      	str	r6, [r4, #16]
 8005386:	444e      	add	r6, r9
 8005388:	6026      	str	r6, [r4, #0]
 800538a:	463e      	mov	r6, r7
 800538c:	6165      	str	r5, [r4, #20]
 800538e:	eba5 0509 	sub.w	r5, r5, r9
 8005392:	60a5      	str	r5, [r4, #8]
 8005394:	42be      	cmp	r6, r7
 8005396:	d900      	bls.n	800539a <__ssputs_r+0x86>
 8005398:	463e      	mov	r6, r7
 800539a:	4632      	mov	r2, r6
 800539c:	4641      	mov	r1, r8
 800539e:	6820      	ldr	r0, [r4, #0]
 80053a0:	f7ff ff76 	bl	8005290 <memmove>
 80053a4:	68a3      	ldr	r3, [r4, #8]
 80053a6:	6822      	ldr	r2, [r4, #0]
 80053a8:	1b9b      	subs	r3, r3, r6
 80053aa:	4432      	add	r2, r6
 80053ac:	2000      	movs	r0, #0
 80053ae:	60a3      	str	r3, [r4, #8]
 80053b0:	6022      	str	r2, [r4, #0]
 80053b2:	e7db      	b.n	800536c <__ssputs_r+0x58>
 80053b4:	462a      	mov	r2, r5
 80053b6:	f000 fb53 	bl	8005a60 <_realloc_r>
 80053ba:	4606      	mov	r6, r0
 80053bc:	2800      	cmp	r0, #0
 80053be:	d1e1      	bne.n	8005384 <__ssputs_r+0x70>
 80053c0:	4650      	mov	r0, sl
 80053c2:	6921      	ldr	r1, [r4, #16]
 80053c4:	f000 faa6 	bl	8005914 <_free_r>
 80053c8:	e7c7      	b.n	800535a <__ssputs_r+0x46>
	...

080053cc <_svfiprintf_r>:
 80053cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053d0:	4698      	mov	r8, r3
 80053d2:	898b      	ldrh	r3, [r1, #12]
 80053d4:	4607      	mov	r7, r0
 80053d6:	061b      	lsls	r3, r3, #24
 80053d8:	460d      	mov	r5, r1
 80053da:	4614      	mov	r4, r2
 80053dc:	b09d      	sub	sp, #116	; 0x74
 80053de:	d50e      	bpl.n	80053fe <_svfiprintf_r+0x32>
 80053e0:	690b      	ldr	r3, [r1, #16]
 80053e2:	b963      	cbnz	r3, 80053fe <_svfiprintf_r+0x32>
 80053e4:	2140      	movs	r1, #64	; 0x40
 80053e6:	f000 fae1 	bl	80059ac <_malloc_r>
 80053ea:	6028      	str	r0, [r5, #0]
 80053ec:	6128      	str	r0, [r5, #16]
 80053ee:	b920      	cbnz	r0, 80053fa <_svfiprintf_r+0x2e>
 80053f0:	230c      	movs	r3, #12
 80053f2:	603b      	str	r3, [r7, #0]
 80053f4:	f04f 30ff 	mov.w	r0, #4294967295
 80053f8:	e0d1      	b.n	800559e <_svfiprintf_r+0x1d2>
 80053fa:	2340      	movs	r3, #64	; 0x40
 80053fc:	616b      	str	r3, [r5, #20]
 80053fe:	2300      	movs	r3, #0
 8005400:	9309      	str	r3, [sp, #36]	; 0x24
 8005402:	2320      	movs	r3, #32
 8005404:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005408:	2330      	movs	r3, #48	; 0x30
 800540a:	f04f 0901 	mov.w	r9, #1
 800540e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005412:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80055b8 <_svfiprintf_r+0x1ec>
 8005416:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800541a:	4623      	mov	r3, r4
 800541c:	469a      	mov	sl, r3
 800541e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005422:	b10a      	cbz	r2, 8005428 <_svfiprintf_r+0x5c>
 8005424:	2a25      	cmp	r2, #37	; 0x25
 8005426:	d1f9      	bne.n	800541c <_svfiprintf_r+0x50>
 8005428:	ebba 0b04 	subs.w	fp, sl, r4
 800542c:	d00b      	beq.n	8005446 <_svfiprintf_r+0x7a>
 800542e:	465b      	mov	r3, fp
 8005430:	4622      	mov	r2, r4
 8005432:	4629      	mov	r1, r5
 8005434:	4638      	mov	r0, r7
 8005436:	f7ff ff6d 	bl	8005314 <__ssputs_r>
 800543a:	3001      	adds	r0, #1
 800543c:	f000 80aa 	beq.w	8005594 <_svfiprintf_r+0x1c8>
 8005440:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005442:	445a      	add	r2, fp
 8005444:	9209      	str	r2, [sp, #36]	; 0x24
 8005446:	f89a 3000 	ldrb.w	r3, [sl]
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 80a2 	beq.w	8005594 <_svfiprintf_r+0x1c8>
 8005450:	2300      	movs	r3, #0
 8005452:	f04f 32ff 	mov.w	r2, #4294967295
 8005456:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800545a:	f10a 0a01 	add.w	sl, sl, #1
 800545e:	9304      	str	r3, [sp, #16]
 8005460:	9307      	str	r3, [sp, #28]
 8005462:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005466:	931a      	str	r3, [sp, #104]	; 0x68
 8005468:	4654      	mov	r4, sl
 800546a:	2205      	movs	r2, #5
 800546c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005470:	4851      	ldr	r0, [pc, #324]	; (80055b8 <_svfiprintf_r+0x1ec>)
 8005472:	f000 fa41 	bl	80058f8 <memchr>
 8005476:	9a04      	ldr	r2, [sp, #16]
 8005478:	b9d8      	cbnz	r0, 80054b2 <_svfiprintf_r+0xe6>
 800547a:	06d0      	lsls	r0, r2, #27
 800547c:	bf44      	itt	mi
 800547e:	2320      	movmi	r3, #32
 8005480:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005484:	0711      	lsls	r1, r2, #28
 8005486:	bf44      	itt	mi
 8005488:	232b      	movmi	r3, #43	; 0x2b
 800548a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800548e:	f89a 3000 	ldrb.w	r3, [sl]
 8005492:	2b2a      	cmp	r3, #42	; 0x2a
 8005494:	d015      	beq.n	80054c2 <_svfiprintf_r+0xf6>
 8005496:	4654      	mov	r4, sl
 8005498:	2000      	movs	r0, #0
 800549a:	f04f 0c0a 	mov.w	ip, #10
 800549e:	9a07      	ldr	r2, [sp, #28]
 80054a0:	4621      	mov	r1, r4
 80054a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054a6:	3b30      	subs	r3, #48	; 0x30
 80054a8:	2b09      	cmp	r3, #9
 80054aa:	d94e      	bls.n	800554a <_svfiprintf_r+0x17e>
 80054ac:	b1b0      	cbz	r0, 80054dc <_svfiprintf_r+0x110>
 80054ae:	9207      	str	r2, [sp, #28]
 80054b0:	e014      	b.n	80054dc <_svfiprintf_r+0x110>
 80054b2:	eba0 0308 	sub.w	r3, r0, r8
 80054b6:	fa09 f303 	lsl.w	r3, r9, r3
 80054ba:	4313      	orrs	r3, r2
 80054bc:	46a2      	mov	sl, r4
 80054be:	9304      	str	r3, [sp, #16]
 80054c0:	e7d2      	b.n	8005468 <_svfiprintf_r+0x9c>
 80054c2:	9b03      	ldr	r3, [sp, #12]
 80054c4:	1d19      	adds	r1, r3, #4
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	9103      	str	r1, [sp, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	bfbb      	ittet	lt
 80054ce:	425b      	neglt	r3, r3
 80054d0:	f042 0202 	orrlt.w	r2, r2, #2
 80054d4:	9307      	strge	r3, [sp, #28]
 80054d6:	9307      	strlt	r3, [sp, #28]
 80054d8:	bfb8      	it	lt
 80054da:	9204      	strlt	r2, [sp, #16]
 80054dc:	7823      	ldrb	r3, [r4, #0]
 80054de:	2b2e      	cmp	r3, #46	; 0x2e
 80054e0:	d10c      	bne.n	80054fc <_svfiprintf_r+0x130>
 80054e2:	7863      	ldrb	r3, [r4, #1]
 80054e4:	2b2a      	cmp	r3, #42	; 0x2a
 80054e6:	d135      	bne.n	8005554 <_svfiprintf_r+0x188>
 80054e8:	9b03      	ldr	r3, [sp, #12]
 80054ea:	3402      	adds	r4, #2
 80054ec:	1d1a      	adds	r2, r3, #4
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	9203      	str	r2, [sp, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	bfb8      	it	lt
 80054f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80054fa:	9305      	str	r3, [sp, #20]
 80054fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80055c8 <_svfiprintf_r+0x1fc>
 8005500:	2203      	movs	r2, #3
 8005502:	4650      	mov	r0, sl
 8005504:	7821      	ldrb	r1, [r4, #0]
 8005506:	f000 f9f7 	bl	80058f8 <memchr>
 800550a:	b140      	cbz	r0, 800551e <_svfiprintf_r+0x152>
 800550c:	2340      	movs	r3, #64	; 0x40
 800550e:	eba0 000a 	sub.w	r0, r0, sl
 8005512:	fa03 f000 	lsl.w	r0, r3, r0
 8005516:	9b04      	ldr	r3, [sp, #16]
 8005518:	3401      	adds	r4, #1
 800551a:	4303      	orrs	r3, r0
 800551c:	9304      	str	r3, [sp, #16]
 800551e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005522:	2206      	movs	r2, #6
 8005524:	4825      	ldr	r0, [pc, #148]	; (80055bc <_svfiprintf_r+0x1f0>)
 8005526:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800552a:	f000 f9e5 	bl	80058f8 <memchr>
 800552e:	2800      	cmp	r0, #0
 8005530:	d038      	beq.n	80055a4 <_svfiprintf_r+0x1d8>
 8005532:	4b23      	ldr	r3, [pc, #140]	; (80055c0 <_svfiprintf_r+0x1f4>)
 8005534:	bb1b      	cbnz	r3, 800557e <_svfiprintf_r+0x1b2>
 8005536:	9b03      	ldr	r3, [sp, #12]
 8005538:	3307      	adds	r3, #7
 800553a:	f023 0307 	bic.w	r3, r3, #7
 800553e:	3308      	adds	r3, #8
 8005540:	9303      	str	r3, [sp, #12]
 8005542:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005544:	4433      	add	r3, r6
 8005546:	9309      	str	r3, [sp, #36]	; 0x24
 8005548:	e767      	b.n	800541a <_svfiprintf_r+0x4e>
 800554a:	460c      	mov	r4, r1
 800554c:	2001      	movs	r0, #1
 800554e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005552:	e7a5      	b.n	80054a0 <_svfiprintf_r+0xd4>
 8005554:	2300      	movs	r3, #0
 8005556:	f04f 0c0a 	mov.w	ip, #10
 800555a:	4619      	mov	r1, r3
 800555c:	3401      	adds	r4, #1
 800555e:	9305      	str	r3, [sp, #20]
 8005560:	4620      	mov	r0, r4
 8005562:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005566:	3a30      	subs	r2, #48	; 0x30
 8005568:	2a09      	cmp	r2, #9
 800556a:	d903      	bls.n	8005574 <_svfiprintf_r+0x1a8>
 800556c:	2b00      	cmp	r3, #0
 800556e:	d0c5      	beq.n	80054fc <_svfiprintf_r+0x130>
 8005570:	9105      	str	r1, [sp, #20]
 8005572:	e7c3      	b.n	80054fc <_svfiprintf_r+0x130>
 8005574:	4604      	mov	r4, r0
 8005576:	2301      	movs	r3, #1
 8005578:	fb0c 2101 	mla	r1, ip, r1, r2
 800557c:	e7f0      	b.n	8005560 <_svfiprintf_r+0x194>
 800557e:	ab03      	add	r3, sp, #12
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	462a      	mov	r2, r5
 8005584:	4638      	mov	r0, r7
 8005586:	4b0f      	ldr	r3, [pc, #60]	; (80055c4 <_svfiprintf_r+0x1f8>)
 8005588:	a904      	add	r1, sp, #16
 800558a:	f3af 8000 	nop.w
 800558e:	1c42      	adds	r2, r0, #1
 8005590:	4606      	mov	r6, r0
 8005592:	d1d6      	bne.n	8005542 <_svfiprintf_r+0x176>
 8005594:	89ab      	ldrh	r3, [r5, #12]
 8005596:	065b      	lsls	r3, r3, #25
 8005598:	f53f af2c 	bmi.w	80053f4 <_svfiprintf_r+0x28>
 800559c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800559e:	b01d      	add	sp, #116	; 0x74
 80055a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a4:	ab03      	add	r3, sp, #12
 80055a6:	9300      	str	r3, [sp, #0]
 80055a8:	462a      	mov	r2, r5
 80055aa:	4638      	mov	r0, r7
 80055ac:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <_svfiprintf_r+0x1f8>)
 80055ae:	a904      	add	r1, sp, #16
 80055b0:	f000 f87c 	bl	80056ac <_printf_i>
 80055b4:	e7eb      	b.n	800558e <_svfiprintf_r+0x1c2>
 80055b6:	bf00      	nop
 80055b8:	08007104 	.word	0x08007104
 80055bc:	0800710e 	.word	0x0800710e
 80055c0:	00000000 	.word	0x00000000
 80055c4:	08005315 	.word	0x08005315
 80055c8:	0800710a 	.word	0x0800710a

080055cc <_printf_common>:
 80055cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055d0:	4616      	mov	r6, r2
 80055d2:	4699      	mov	r9, r3
 80055d4:	688a      	ldr	r2, [r1, #8]
 80055d6:	690b      	ldr	r3, [r1, #16]
 80055d8:	4607      	mov	r7, r0
 80055da:	4293      	cmp	r3, r2
 80055dc:	bfb8      	it	lt
 80055de:	4613      	movlt	r3, r2
 80055e0:	6033      	str	r3, [r6, #0]
 80055e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80055e6:	460c      	mov	r4, r1
 80055e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80055ec:	b10a      	cbz	r2, 80055f2 <_printf_common+0x26>
 80055ee:	3301      	adds	r3, #1
 80055f0:	6033      	str	r3, [r6, #0]
 80055f2:	6823      	ldr	r3, [r4, #0]
 80055f4:	0699      	lsls	r1, r3, #26
 80055f6:	bf42      	ittt	mi
 80055f8:	6833      	ldrmi	r3, [r6, #0]
 80055fa:	3302      	addmi	r3, #2
 80055fc:	6033      	strmi	r3, [r6, #0]
 80055fe:	6825      	ldr	r5, [r4, #0]
 8005600:	f015 0506 	ands.w	r5, r5, #6
 8005604:	d106      	bne.n	8005614 <_printf_common+0x48>
 8005606:	f104 0a19 	add.w	sl, r4, #25
 800560a:	68e3      	ldr	r3, [r4, #12]
 800560c:	6832      	ldr	r2, [r6, #0]
 800560e:	1a9b      	subs	r3, r3, r2
 8005610:	42ab      	cmp	r3, r5
 8005612:	dc28      	bgt.n	8005666 <_printf_common+0x9a>
 8005614:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005618:	1e13      	subs	r3, r2, #0
 800561a:	6822      	ldr	r2, [r4, #0]
 800561c:	bf18      	it	ne
 800561e:	2301      	movne	r3, #1
 8005620:	0692      	lsls	r2, r2, #26
 8005622:	d42d      	bmi.n	8005680 <_printf_common+0xb4>
 8005624:	4649      	mov	r1, r9
 8005626:	4638      	mov	r0, r7
 8005628:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800562c:	47c0      	blx	r8
 800562e:	3001      	adds	r0, #1
 8005630:	d020      	beq.n	8005674 <_printf_common+0xa8>
 8005632:	6823      	ldr	r3, [r4, #0]
 8005634:	68e5      	ldr	r5, [r4, #12]
 8005636:	f003 0306 	and.w	r3, r3, #6
 800563a:	2b04      	cmp	r3, #4
 800563c:	bf18      	it	ne
 800563e:	2500      	movne	r5, #0
 8005640:	6832      	ldr	r2, [r6, #0]
 8005642:	f04f 0600 	mov.w	r6, #0
 8005646:	68a3      	ldr	r3, [r4, #8]
 8005648:	bf08      	it	eq
 800564a:	1aad      	subeq	r5, r5, r2
 800564c:	6922      	ldr	r2, [r4, #16]
 800564e:	bf08      	it	eq
 8005650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005654:	4293      	cmp	r3, r2
 8005656:	bfc4      	itt	gt
 8005658:	1a9b      	subgt	r3, r3, r2
 800565a:	18ed      	addgt	r5, r5, r3
 800565c:	341a      	adds	r4, #26
 800565e:	42b5      	cmp	r5, r6
 8005660:	d11a      	bne.n	8005698 <_printf_common+0xcc>
 8005662:	2000      	movs	r0, #0
 8005664:	e008      	b.n	8005678 <_printf_common+0xac>
 8005666:	2301      	movs	r3, #1
 8005668:	4652      	mov	r2, sl
 800566a:	4649      	mov	r1, r9
 800566c:	4638      	mov	r0, r7
 800566e:	47c0      	blx	r8
 8005670:	3001      	adds	r0, #1
 8005672:	d103      	bne.n	800567c <_printf_common+0xb0>
 8005674:	f04f 30ff 	mov.w	r0, #4294967295
 8005678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800567c:	3501      	adds	r5, #1
 800567e:	e7c4      	b.n	800560a <_printf_common+0x3e>
 8005680:	2030      	movs	r0, #48	; 0x30
 8005682:	18e1      	adds	r1, r4, r3
 8005684:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800568e:	4422      	add	r2, r4
 8005690:	3302      	adds	r3, #2
 8005692:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005696:	e7c5      	b.n	8005624 <_printf_common+0x58>
 8005698:	2301      	movs	r3, #1
 800569a:	4622      	mov	r2, r4
 800569c:	4649      	mov	r1, r9
 800569e:	4638      	mov	r0, r7
 80056a0:	47c0      	blx	r8
 80056a2:	3001      	adds	r0, #1
 80056a4:	d0e6      	beq.n	8005674 <_printf_common+0xa8>
 80056a6:	3601      	adds	r6, #1
 80056a8:	e7d9      	b.n	800565e <_printf_common+0x92>
	...

080056ac <_printf_i>:
 80056ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056b0:	460c      	mov	r4, r1
 80056b2:	7e27      	ldrb	r7, [r4, #24]
 80056b4:	4691      	mov	r9, r2
 80056b6:	2f78      	cmp	r7, #120	; 0x78
 80056b8:	4680      	mov	r8, r0
 80056ba:	469a      	mov	sl, r3
 80056bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 80056be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80056c2:	d807      	bhi.n	80056d4 <_printf_i+0x28>
 80056c4:	2f62      	cmp	r7, #98	; 0x62
 80056c6:	d80a      	bhi.n	80056de <_printf_i+0x32>
 80056c8:	2f00      	cmp	r7, #0
 80056ca:	f000 80d9 	beq.w	8005880 <_printf_i+0x1d4>
 80056ce:	2f58      	cmp	r7, #88	; 0x58
 80056d0:	f000 80a4 	beq.w	800581c <_printf_i+0x170>
 80056d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80056d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80056dc:	e03a      	b.n	8005754 <_printf_i+0xa8>
 80056de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80056e2:	2b15      	cmp	r3, #21
 80056e4:	d8f6      	bhi.n	80056d4 <_printf_i+0x28>
 80056e6:	a001      	add	r0, pc, #4	; (adr r0, 80056ec <_printf_i+0x40>)
 80056e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80056ec:	08005745 	.word	0x08005745
 80056f0:	08005759 	.word	0x08005759
 80056f4:	080056d5 	.word	0x080056d5
 80056f8:	080056d5 	.word	0x080056d5
 80056fc:	080056d5 	.word	0x080056d5
 8005700:	080056d5 	.word	0x080056d5
 8005704:	08005759 	.word	0x08005759
 8005708:	080056d5 	.word	0x080056d5
 800570c:	080056d5 	.word	0x080056d5
 8005710:	080056d5 	.word	0x080056d5
 8005714:	080056d5 	.word	0x080056d5
 8005718:	08005867 	.word	0x08005867
 800571c:	08005789 	.word	0x08005789
 8005720:	08005849 	.word	0x08005849
 8005724:	080056d5 	.word	0x080056d5
 8005728:	080056d5 	.word	0x080056d5
 800572c:	08005889 	.word	0x08005889
 8005730:	080056d5 	.word	0x080056d5
 8005734:	08005789 	.word	0x08005789
 8005738:	080056d5 	.word	0x080056d5
 800573c:	080056d5 	.word	0x080056d5
 8005740:	08005851 	.word	0x08005851
 8005744:	680b      	ldr	r3, [r1, #0]
 8005746:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800574a:	1d1a      	adds	r2, r3, #4
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	600a      	str	r2, [r1, #0]
 8005750:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005754:	2301      	movs	r3, #1
 8005756:	e0a4      	b.n	80058a2 <_printf_i+0x1f6>
 8005758:	6825      	ldr	r5, [r4, #0]
 800575a:	6808      	ldr	r0, [r1, #0]
 800575c:	062e      	lsls	r6, r5, #24
 800575e:	f100 0304 	add.w	r3, r0, #4
 8005762:	d50a      	bpl.n	800577a <_printf_i+0xce>
 8005764:	6805      	ldr	r5, [r0, #0]
 8005766:	600b      	str	r3, [r1, #0]
 8005768:	2d00      	cmp	r5, #0
 800576a:	da03      	bge.n	8005774 <_printf_i+0xc8>
 800576c:	232d      	movs	r3, #45	; 0x2d
 800576e:	426d      	negs	r5, r5
 8005770:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005774:	230a      	movs	r3, #10
 8005776:	485e      	ldr	r0, [pc, #376]	; (80058f0 <_printf_i+0x244>)
 8005778:	e019      	b.n	80057ae <_printf_i+0x102>
 800577a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800577e:	6805      	ldr	r5, [r0, #0]
 8005780:	600b      	str	r3, [r1, #0]
 8005782:	bf18      	it	ne
 8005784:	b22d      	sxthne	r5, r5
 8005786:	e7ef      	b.n	8005768 <_printf_i+0xbc>
 8005788:	680b      	ldr	r3, [r1, #0]
 800578a:	6825      	ldr	r5, [r4, #0]
 800578c:	1d18      	adds	r0, r3, #4
 800578e:	6008      	str	r0, [r1, #0]
 8005790:	0628      	lsls	r0, r5, #24
 8005792:	d501      	bpl.n	8005798 <_printf_i+0xec>
 8005794:	681d      	ldr	r5, [r3, #0]
 8005796:	e002      	b.n	800579e <_printf_i+0xf2>
 8005798:	0669      	lsls	r1, r5, #25
 800579a:	d5fb      	bpl.n	8005794 <_printf_i+0xe8>
 800579c:	881d      	ldrh	r5, [r3, #0]
 800579e:	2f6f      	cmp	r7, #111	; 0x6f
 80057a0:	bf0c      	ite	eq
 80057a2:	2308      	moveq	r3, #8
 80057a4:	230a      	movne	r3, #10
 80057a6:	4852      	ldr	r0, [pc, #328]	; (80058f0 <_printf_i+0x244>)
 80057a8:	2100      	movs	r1, #0
 80057aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80057ae:	6866      	ldr	r6, [r4, #4]
 80057b0:	2e00      	cmp	r6, #0
 80057b2:	bfa8      	it	ge
 80057b4:	6821      	ldrge	r1, [r4, #0]
 80057b6:	60a6      	str	r6, [r4, #8]
 80057b8:	bfa4      	itt	ge
 80057ba:	f021 0104 	bicge.w	r1, r1, #4
 80057be:	6021      	strge	r1, [r4, #0]
 80057c0:	b90d      	cbnz	r5, 80057c6 <_printf_i+0x11a>
 80057c2:	2e00      	cmp	r6, #0
 80057c4:	d04d      	beq.n	8005862 <_printf_i+0x1b6>
 80057c6:	4616      	mov	r6, r2
 80057c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80057cc:	fb03 5711 	mls	r7, r3, r1, r5
 80057d0:	5dc7      	ldrb	r7, [r0, r7]
 80057d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80057d6:	462f      	mov	r7, r5
 80057d8:	42bb      	cmp	r3, r7
 80057da:	460d      	mov	r5, r1
 80057dc:	d9f4      	bls.n	80057c8 <_printf_i+0x11c>
 80057de:	2b08      	cmp	r3, #8
 80057e0:	d10b      	bne.n	80057fa <_printf_i+0x14e>
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	07df      	lsls	r7, r3, #31
 80057e6:	d508      	bpl.n	80057fa <_printf_i+0x14e>
 80057e8:	6923      	ldr	r3, [r4, #16]
 80057ea:	6861      	ldr	r1, [r4, #4]
 80057ec:	4299      	cmp	r1, r3
 80057ee:	bfde      	ittt	le
 80057f0:	2330      	movle	r3, #48	; 0x30
 80057f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80057f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80057fa:	1b92      	subs	r2, r2, r6
 80057fc:	6122      	str	r2, [r4, #16]
 80057fe:	464b      	mov	r3, r9
 8005800:	4621      	mov	r1, r4
 8005802:	4640      	mov	r0, r8
 8005804:	f8cd a000 	str.w	sl, [sp]
 8005808:	aa03      	add	r2, sp, #12
 800580a:	f7ff fedf 	bl	80055cc <_printf_common>
 800580e:	3001      	adds	r0, #1
 8005810:	d14c      	bne.n	80058ac <_printf_i+0x200>
 8005812:	f04f 30ff 	mov.w	r0, #4294967295
 8005816:	b004      	add	sp, #16
 8005818:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800581c:	4834      	ldr	r0, [pc, #208]	; (80058f0 <_printf_i+0x244>)
 800581e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005822:	680e      	ldr	r6, [r1, #0]
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	f856 5b04 	ldr.w	r5, [r6], #4
 800582a:	061f      	lsls	r7, r3, #24
 800582c:	600e      	str	r6, [r1, #0]
 800582e:	d514      	bpl.n	800585a <_printf_i+0x1ae>
 8005830:	07d9      	lsls	r1, r3, #31
 8005832:	bf44      	itt	mi
 8005834:	f043 0320 	orrmi.w	r3, r3, #32
 8005838:	6023      	strmi	r3, [r4, #0]
 800583a:	b91d      	cbnz	r5, 8005844 <_printf_i+0x198>
 800583c:	6823      	ldr	r3, [r4, #0]
 800583e:	f023 0320 	bic.w	r3, r3, #32
 8005842:	6023      	str	r3, [r4, #0]
 8005844:	2310      	movs	r3, #16
 8005846:	e7af      	b.n	80057a8 <_printf_i+0xfc>
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	f043 0320 	orr.w	r3, r3, #32
 800584e:	6023      	str	r3, [r4, #0]
 8005850:	2378      	movs	r3, #120	; 0x78
 8005852:	4828      	ldr	r0, [pc, #160]	; (80058f4 <_printf_i+0x248>)
 8005854:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005858:	e7e3      	b.n	8005822 <_printf_i+0x176>
 800585a:	065e      	lsls	r6, r3, #25
 800585c:	bf48      	it	mi
 800585e:	b2ad      	uxthmi	r5, r5
 8005860:	e7e6      	b.n	8005830 <_printf_i+0x184>
 8005862:	4616      	mov	r6, r2
 8005864:	e7bb      	b.n	80057de <_printf_i+0x132>
 8005866:	680b      	ldr	r3, [r1, #0]
 8005868:	6826      	ldr	r6, [r4, #0]
 800586a:	1d1d      	adds	r5, r3, #4
 800586c:	6960      	ldr	r0, [r4, #20]
 800586e:	600d      	str	r5, [r1, #0]
 8005870:	0635      	lsls	r5, r6, #24
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	d501      	bpl.n	800587a <_printf_i+0x1ce>
 8005876:	6018      	str	r0, [r3, #0]
 8005878:	e002      	b.n	8005880 <_printf_i+0x1d4>
 800587a:	0671      	lsls	r1, r6, #25
 800587c:	d5fb      	bpl.n	8005876 <_printf_i+0x1ca>
 800587e:	8018      	strh	r0, [r3, #0]
 8005880:	2300      	movs	r3, #0
 8005882:	4616      	mov	r6, r2
 8005884:	6123      	str	r3, [r4, #16]
 8005886:	e7ba      	b.n	80057fe <_printf_i+0x152>
 8005888:	680b      	ldr	r3, [r1, #0]
 800588a:	1d1a      	adds	r2, r3, #4
 800588c:	600a      	str	r2, [r1, #0]
 800588e:	681e      	ldr	r6, [r3, #0]
 8005890:	2100      	movs	r1, #0
 8005892:	4630      	mov	r0, r6
 8005894:	6862      	ldr	r2, [r4, #4]
 8005896:	f000 f82f 	bl	80058f8 <memchr>
 800589a:	b108      	cbz	r0, 80058a0 <_printf_i+0x1f4>
 800589c:	1b80      	subs	r0, r0, r6
 800589e:	6060      	str	r0, [r4, #4]
 80058a0:	6863      	ldr	r3, [r4, #4]
 80058a2:	6123      	str	r3, [r4, #16]
 80058a4:	2300      	movs	r3, #0
 80058a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058aa:	e7a8      	b.n	80057fe <_printf_i+0x152>
 80058ac:	4632      	mov	r2, r6
 80058ae:	4649      	mov	r1, r9
 80058b0:	4640      	mov	r0, r8
 80058b2:	6923      	ldr	r3, [r4, #16]
 80058b4:	47d0      	blx	sl
 80058b6:	3001      	adds	r0, #1
 80058b8:	d0ab      	beq.n	8005812 <_printf_i+0x166>
 80058ba:	6823      	ldr	r3, [r4, #0]
 80058bc:	079b      	lsls	r3, r3, #30
 80058be:	d413      	bmi.n	80058e8 <_printf_i+0x23c>
 80058c0:	68e0      	ldr	r0, [r4, #12]
 80058c2:	9b03      	ldr	r3, [sp, #12]
 80058c4:	4298      	cmp	r0, r3
 80058c6:	bfb8      	it	lt
 80058c8:	4618      	movlt	r0, r3
 80058ca:	e7a4      	b.n	8005816 <_printf_i+0x16a>
 80058cc:	2301      	movs	r3, #1
 80058ce:	4632      	mov	r2, r6
 80058d0:	4649      	mov	r1, r9
 80058d2:	4640      	mov	r0, r8
 80058d4:	47d0      	blx	sl
 80058d6:	3001      	adds	r0, #1
 80058d8:	d09b      	beq.n	8005812 <_printf_i+0x166>
 80058da:	3501      	adds	r5, #1
 80058dc:	68e3      	ldr	r3, [r4, #12]
 80058de:	9903      	ldr	r1, [sp, #12]
 80058e0:	1a5b      	subs	r3, r3, r1
 80058e2:	42ab      	cmp	r3, r5
 80058e4:	dcf2      	bgt.n	80058cc <_printf_i+0x220>
 80058e6:	e7eb      	b.n	80058c0 <_printf_i+0x214>
 80058e8:	2500      	movs	r5, #0
 80058ea:	f104 0619 	add.w	r6, r4, #25
 80058ee:	e7f5      	b.n	80058dc <_printf_i+0x230>
 80058f0:	08007115 	.word	0x08007115
 80058f4:	08007126 	.word	0x08007126

080058f8 <memchr>:
 80058f8:	4603      	mov	r3, r0
 80058fa:	b510      	push	{r4, lr}
 80058fc:	b2c9      	uxtb	r1, r1
 80058fe:	4402      	add	r2, r0
 8005900:	4293      	cmp	r3, r2
 8005902:	4618      	mov	r0, r3
 8005904:	d101      	bne.n	800590a <memchr+0x12>
 8005906:	2000      	movs	r0, #0
 8005908:	e003      	b.n	8005912 <memchr+0x1a>
 800590a:	7804      	ldrb	r4, [r0, #0]
 800590c:	3301      	adds	r3, #1
 800590e:	428c      	cmp	r4, r1
 8005910:	d1f6      	bne.n	8005900 <memchr+0x8>
 8005912:	bd10      	pop	{r4, pc}

08005914 <_free_r>:
 8005914:	b538      	push	{r3, r4, r5, lr}
 8005916:	4605      	mov	r5, r0
 8005918:	2900      	cmp	r1, #0
 800591a:	d043      	beq.n	80059a4 <_free_r+0x90>
 800591c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005920:	1f0c      	subs	r4, r1, #4
 8005922:	2b00      	cmp	r3, #0
 8005924:	bfb8      	it	lt
 8005926:	18e4      	addlt	r4, r4, r3
 8005928:	f000 f8d0 	bl	8005acc <__malloc_lock>
 800592c:	4a1e      	ldr	r2, [pc, #120]	; (80059a8 <_free_r+0x94>)
 800592e:	6813      	ldr	r3, [r2, #0]
 8005930:	4610      	mov	r0, r2
 8005932:	b933      	cbnz	r3, 8005942 <_free_r+0x2e>
 8005934:	6063      	str	r3, [r4, #4]
 8005936:	6014      	str	r4, [r2, #0]
 8005938:	4628      	mov	r0, r5
 800593a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800593e:	f000 b8cb 	b.w	8005ad8 <__malloc_unlock>
 8005942:	42a3      	cmp	r3, r4
 8005944:	d90a      	bls.n	800595c <_free_r+0x48>
 8005946:	6821      	ldr	r1, [r4, #0]
 8005948:	1862      	adds	r2, r4, r1
 800594a:	4293      	cmp	r3, r2
 800594c:	bf01      	itttt	eq
 800594e:	681a      	ldreq	r2, [r3, #0]
 8005950:	685b      	ldreq	r3, [r3, #4]
 8005952:	1852      	addeq	r2, r2, r1
 8005954:	6022      	streq	r2, [r4, #0]
 8005956:	6063      	str	r3, [r4, #4]
 8005958:	6004      	str	r4, [r0, #0]
 800595a:	e7ed      	b.n	8005938 <_free_r+0x24>
 800595c:	461a      	mov	r2, r3
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	b10b      	cbz	r3, 8005966 <_free_r+0x52>
 8005962:	42a3      	cmp	r3, r4
 8005964:	d9fa      	bls.n	800595c <_free_r+0x48>
 8005966:	6811      	ldr	r1, [r2, #0]
 8005968:	1850      	adds	r0, r2, r1
 800596a:	42a0      	cmp	r0, r4
 800596c:	d10b      	bne.n	8005986 <_free_r+0x72>
 800596e:	6820      	ldr	r0, [r4, #0]
 8005970:	4401      	add	r1, r0
 8005972:	1850      	adds	r0, r2, r1
 8005974:	4283      	cmp	r3, r0
 8005976:	6011      	str	r1, [r2, #0]
 8005978:	d1de      	bne.n	8005938 <_free_r+0x24>
 800597a:	6818      	ldr	r0, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	4401      	add	r1, r0
 8005980:	6011      	str	r1, [r2, #0]
 8005982:	6053      	str	r3, [r2, #4]
 8005984:	e7d8      	b.n	8005938 <_free_r+0x24>
 8005986:	d902      	bls.n	800598e <_free_r+0x7a>
 8005988:	230c      	movs	r3, #12
 800598a:	602b      	str	r3, [r5, #0]
 800598c:	e7d4      	b.n	8005938 <_free_r+0x24>
 800598e:	6820      	ldr	r0, [r4, #0]
 8005990:	1821      	adds	r1, r4, r0
 8005992:	428b      	cmp	r3, r1
 8005994:	bf01      	itttt	eq
 8005996:	6819      	ldreq	r1, [r3, #0]
 8005998:	685b      	ldreq	r3, [r3, #4]
 800599a:	1809      	addeq	r1, r1, r0
 800599c:	6021      	streq	r1, [r4, #0]
 800599e:	6063      	str	r3, [r4, #4]
 80059a0:	6054      	str	r4, [r2, #4]
 80059a2:	e7c9      	b.n	8005938 <_free_r+0x24>
 80059a4:	bd38      	pop	{r3, r4, r5, pc}
 80059a6:	bf00      	nop
 80059a8:	200002b4 	.word	0x200002b4

080059ac <_malloc_r>:
 80059ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ae:	1ccd      	adds	r5, r1, #3
 80059b0:	f025 0503 	bic.w	r5, r5, #3
 80059b4:	3508      	adds	r5, #8
 80059b6:	2d0c      	cmp	r5, #12
 80059b8:	bf38      	it	cc
 80059ba:	250c      	movcc	r5, #12
 80059bc:	2d00      	cmp	r5, #0
 80059be:	4606      	mov	r6, r0
 80059c0:	db01      	blt.n	80059c6 <_malloc_r+0x1a>
 80059c2:	42a9      	cmp	r1, r5
 80059c4:	d903      	bls.n	80059ce <_malloc_r+0x22>
 80059c6:	230c      	movs	r3, #12
 80059c8:	6033      	str	r3, [r6, #0]
 80059ca:	2000      	movs	r0, #0
 80059cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059ce:	f000 f87d 	bl	8005acc <__malloc_lock>
 80059d2:	4921      	ldr	r1, [pc, #132]	; (8005a58 <_malloc_r+0xac>)
 80059d4:	680a      	ldr	r2, [r1, #0]
 80059d6:	4614      	mov	r4, r2
 80059d8:	b99c      	cbnz	r4, 8005a02 <_malloc_r+0x56>
 80059da:	4f20      	ldr	r7, [pc, #128]	; (8005a5c <_malloc_r+0xb0>)
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	b923      	cbnz	r3, 80059ea <_malloc_r+0x3e>
 80059e0:	4621      	mov	r1, r4
 80059e2:	4630      	mov	r0, r6
 80059e4:	f000 f862 	bl	8005aac <_sbrk_r>
 80059e8:	6038      	str	r0, [r7, #0]
 80059ea:	4629      	mov	r1, r5
 80059ec:	4630      	mov	r0, r6
 80059ee:	f000 f85d 	bl	8005aac <_sbrk_r>
 80059f2:	1c43      	adds	r3, r0, #1
 80059f4:	d123      	bne.n	8005a3e <_malloc_r+0x92>
 80059f6:	230c      	movs	r3, #12
 80059f8:	4630      	mov	r0, r6
 80059fa:	6033      	str	r3, [r6, #0]
 80059fc:	f000 f86c 	bl	8005ad8 <__malloc_unlock>
 8005a00:	e7e3      	b.n	80059ca <_malloc_r+0x1e>
 8005a02:	6823      	ldr	r3, [r4, #0]
 8005a04:	1b5b      	subs	r3, r3, r5
 8005a06:	d417      	bmi.n	8005a38 <_malloc_r+0x8c>
 8005a08:	2b0b      	cmp	r3, #11
 8005a0a:	d903      	bls.n	8005a14 <_malloc_r+0x68>
 8005a0c:	6023      	str	r3, [r4, #0]
 8005a0e:	441c      	add	r4, r3
 8005a10:	6025      	str	r5, [r4, #0]
 8005a12:	e004      	b.n	8005a1e <_malloc_r+0x72>
 8005a14:	6863      	ldr	r3, [r4, #4]
 8005a16:	42a2      	cmp	r2, r4
 8005a18:	bf0c      	ite	eq
 8005a1a:	600b      	streq	r3, [r1, #0]
 8005a1c:	6053      	strne	r3, [r2, #4]
 8005a1e:	4630      	mov	r0, r6
 8005a20:	f000 f85a 	bl	8005ad8 <__malloc_unlock>
 8005a24:	f104 000b 	add.w	r0, r4, #11
 8005a28:	1d23      	adds	r3, r4, #4
 8005a2a:	f020 0007 	bic.w	r0, r0, #7
 8005a2e:	1ac2      	subs	r2, r0, r3
 8005a30:	d0cc      	beq.n	80059cc <_malloc_r+0x20>
 8005a32:	1a1b      	subs	r3, r3, r0
 8005a34:	50a3      	str	r3, [r4, r2]
 8005a36:	e7c9      	b.n	80059cc <_malloc_r+0x20>
 8005a38:	4622      	mov	r2, r4
 8005a3a:	6864      	ldr	r4, [r4, #4]
 8005a3c:	e7cc      	b.n	80059d8 <_malloc_r+0x2c>
 8005a3e:	1cc4      	adds	r4, r0, #3
 8005a40:	f024 0403 	bic.w	r4, r4, #3
 8005a44:	42a0      	cmp	r0, r4
 8005a46:	d0e3      	beq.n	8005a10 <_malloc_r+0x64>
 8005a48:	1a21      	subs	r1, r4, r0
 8005a4a:	4630      	mov	r0, r6
 8005a4c:	f000 f82e 	bl	8005aac <_sbrk_r>
 8005a50:	3001      	adds	r0, #1
 8005a52:	d1dd      	bne.n	8005a10 <_malloc_r+0x64>
 8005a54:	e7cf      	b.n	80059f6 <_malloc_r+0x4a>
 8005a56:	bf00      	nop
 8005a58:	200002b4 	.word	0x200002b4
 8005a5c:	200002b8 	.word	0x200002b8

08005a60 <_realloc_r>:
 8005a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a62:	4607      	mov	r7, r0
 8005a64:	4614      	mov	r4, r2
 8005a66:	460e      	mov	r6, r1
 8005a68:	b921      	cbnz	r1, 8005a74 <_realloc_r+0x14>
 8005a6a:	4611      	mov	r1, r2
 8005a6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8005a70:	f7ff bf9c 	b.w	80059ac <_malloc_r>
 8005a74:	b922      	cbnz	r2, 8005a80 <_realloc_r+0x20>
 8005a76:	f7ff ff4d 	bl	8005914 <_free_r>
 8005a7a:	4625      	mov	r5, r4
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a80:	f000 f830 	bl	8005ae4 <_malloc_usable_size_r>
 8005a84:	42a0      	cmp	r0, r4
 8005a86:	d20f      	bcs.n	8005aa8 <_realloc_r+0x48>
 8005a88:	4621      	mov	r1, r4
 8005a8a:	4638      	mov	r0, r7
 8005a8c:	f7ff ff8e 	bl	80059ac <_malloc_r>
 8005a90:	4605      	mov	r5, r0
 8005a92:	2800      	cmp	r0, #0
 8005a94:	d0f2      	beq.n	8005a7c <_realloc_r+0x1c>
 8005a96:	4631      	mov	r1, r6
 8005a98:	4622      	mov	r2, r4
 8005a9a:	f7ff fbeb 	bl	8005274 <memcpy>
 8005a9e:	4631      	mov	r1, r6
 8005aa0:	4638      	mov	r0, r7
 8005aa2:	f7ff ff37 	bl	8005914 <_free_r>
 8005aa6:	e7e9      	b.n	8005a7c <_realloc_r+0x1c>
 8005aa8:	4635      	mov	r5, r6
 8005aaa:	e7e7      	b.n	8005a7c <_realloc_r+0x1c>

08005aac <_sbrk_r>:
 8005aac:	b538      	push	{r3, r4, r5, lr}
 8005aae:	2300      	movs	r3, #0
 8005ab0:	4d05      	ldr	r5, [pc, #20]	; (8005ac8 <_sbrk_r+0x1c>)
 8005ab2:	4604      	mov	r4, r0
 8005ab4:	4608      	mov	r0, r1
 8005ab6:	602b      	str	r3, [r5, #0]
 8005ab8:	f7fc fd96 	bl	80025e8 <_sbrk>
 8005abc:	1c43      	adds	r3, r0, #1
 8005abe:	d102      	bne.n	8005ac6 <_sbrk_r+0x1a>
 8005ac0:	682b      	ldr	r3, [r5, #0]
 8005ac2:	b103      	cbz	r3, 8005ac6 <_sbrk_r+0x1a>
 8005ac4:	6023      	str	r3, [r4, #0]
 8005ac6:	bd38      	pop	{r3, r4, r5, pc}
 8005ac8:	200003b0 	.word	0x200003b0

08005acc <__malloc_lock>:
 8005acc:	4801      	ldr	r0, [pc, #4]	; (8005ad4 <__malloc_lock+0x8>)
 8005ace:	f000 b811 	b.w	8005af4 <__retarget_lock_acquire_recursive>
 8005ad2:	bf00      	nop
 8005ad4:	200003b8 	.word	0x200003b8

08005ad8 <__malloc_unlock>:
 8005ad8:	4801      	ldr	r0, [pc, #4]	; (8005ae0 <__malloc_unlock+0x8>)
 8005ada:	f000 b80c 	b.w	8005af6 <__retarget_lock_release_recursive>
 8005ade:	bf00      	nop
 8005ae0:	200003b8 	.word	0x200003b8

08005ae4 <_malloc_usable_size_r>:
 8005ae4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005ae8:	1f18      	subs	r0, r3, #4
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	bfbc      	itt	lt
 8005aee:	580b      	ldrlt	r3, [r1, r0]
 8005af0:	18c0      	addlt	r0, r0, r3
 8005af2:	4770      	bx	lr

08005af4 <__retarget_lock_acquire_recursive>:
 8005af4:	4770      	bx	lr

08005af6 <__retarget_lock_release_recursive>:
 8005af6:	4770      	bx	lr

08005af8 <_init>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	bf00      	nop
 8005afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afe:	bc08      	pop	{r3}
 8005b00:	469e      	mov	lr, r3
 8005b02:	4770      	bx	lr

08005b04 <_fini>:
 8005b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b06:	bf00      	nop
 8005b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b0a:	bc08      	pop	{r3}
 8005b0c:	469e      	mov	lr, r3
 8005b0e:	4770      	bx	lr
